<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W.T.的博客</title>
  
  <subtitle>Every day to be a little better</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.runaccpeted.com/"/>
  <updated>2019-09-13T16:17:16.819Z</updated>
  <id>https://www.runaccpeted.com/</id>
  
  <author>
    <name>Wang Ting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础知识-线程</title>
    <link href="https://www.runaccpeted.com/2019/09/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.runaccpeted.com/2019/09/14/Java基础知识-线程/</id>
    <published>2019-09-13T16:11:47.000Z</published>
    <updated>2019-09-13T16:17:16.819Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">多线程</blockquote><a id="more"></a><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a><font size="4px">线程状态</font></h1><ul><li>New</li><li>Runnable</li><li>Blocked</li><li>Waiting</li><li>Timed waiting</li><li>Terminated</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getState();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;多线程&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-集合</title>
    <link href="https://www.runaccpeted.com/2019/09/13/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E9%9B%86%E5%90%88/"/>
    <id>https://www.runaccpeted.com/2019/09/13/Java基础知识-集合/</id>
    <published>2019-09-13T14:12:05.000Z</published>
    <updated>2019-09-14T17:31:28.439Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Collection HashMap</blockquote><a id="more"></a><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a><font size="4px">Collection</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"><span class="comment">//并 other元素添加到集合中</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;E&gt; other)</span></span>;</span><br><span class="line"><span class="comment">//交 删除与other中匹配的所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection other)</span></span>;</span><br><span class="line"><span class="comment">//差 删除与other不同的元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection other)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><font size="4px">LinkedList</font></h1><p>双向链表实现，只能顺序访问，故get方法效率低，可以快速插入和删除元素。</p><p>结点 prev|element|next</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>add() 采用尾插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">last = newNode;</span><br></pre></td></tr></table></figure><p>查找结点</p><p>前一半从前往后，后一半从后往前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><font size="4px">ArrayList</font></h1><p>动态数组，支持随机访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>,<span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//数组默认大小10</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_CAPACITY</span> </span>= <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>扩容 扩为1.5倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure><p>add()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elementData[size++] = e;</span><br></pre></td></tr></table></figure><p>remove()</p><p>调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,numMoved);</span><br><span class="line">elementData[--size] = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>序列化</p><p>Serializable表示可以被序列化，保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。实现 writeObject() 和 readObject() 来控制序列化数组中有元素填充那部分内容。</p><h1 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><font size="4px">Vector</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;  <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure><p>扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + oldCapacity;</span><br></pre></td></tr></table></figure><p>内部采用synchronized同步块，线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><font size="4px">HashSet</font></h1><p>内部采用HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">HashSet</span>() </span>&#123;</span><br><span class="line">     map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><font size="4px">TreeSet</font></h1><p>基于红黑树实现，有序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">TreeSet</span>(<span class="title">Comparator</span>&lt;? <span class="title">super</span> <span class="title">E</span>&gt; <span class="title">comparator</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><font size="4px">HashMap</font></h1><ul><li>HashMap 可以插入键为 null 的 Entry。</li><li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">table</span> 的容量大小，默认为 16。需要注意的是 <span class="title">capacity</span> 必须保证为 2 的 <span class="title">n</span> 次方</span></span><br><span class="line"><span class="class"><span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_INITIAL_CAPACITY</span> </span>= <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">//装载因子，table 能够使用的比例，threshold = (int)(newCapacity * loadFactor)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//size 的临界值，当 size 大于等于 threshold 就必须进行扩容操作</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">Node&lt;K,V&gt; next;</span><br><span class="line"><span class="keyword">do</span> &#123; </span><br><span class="line">      next = e.next;</span><br><span class="line">      <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                 loHead = e;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">       loTail = e;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                   hiHead = e;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                   hiTail.next = e;</span><br><span class="line">              hiTail = e; &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容为2倍</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a><font size="3px">工作原理</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"K1"</span>, <span class="string">"V1"</span>);</span><br><span class="line">map.put(<span class="string">"K2"</span>, <span class="string">"V2"</span>);</span><br></pre></td></tr></table></figure><ul><li>插入 &lt;K1,V1&gt; 键值对，先计算 K1 的 hashCode 为 1，使用除留余数法得到所在的下标 1%16=1。</li><li>插入 &lt;K2,V2&gt; 键值对，先计算 K2 的 hashCode 为 1，使用除留余数法得到所在的桶下标 1%16=1,插在 &lt;K1,V1&gt; 前面。</li></ul><p>HashMap采用的是头插法。</p><h1 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a><font size="4px">Hashtable</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>键值对都不允许为null,线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span></span></span><br></pre></td></tr></table></figure><h1 id="CurrentHashMap"><a href="#CurrentHashMap" class="headerlink" title="CurrentHashMap"></a><font size="4px">CurrentHashMap</font></h1><p>ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个HashEntry，多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_CAPACITY</span> </span>= <span class="number">16</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p> 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。</p><p>并且也在链表过长时会转换为红黑树。</p><p>插入结点 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (f) &#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><font size="4px">TreeMap</font></h1><p>用于比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">TreeMap</span>(<span class="title">Comparator</span>&lt;? <span class="title">super</span> <span class="title">K</span>&gt; <span class="title">comparator</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a><font size="4px">LinkedHashMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结点</p><p>内部维护了一个双向链表，用来维护插入顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">   <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a><font size="4px">EnumMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumMap</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a><font size="4px">WeakHashMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>WeakHashMap 的 Entry 继承自 WeakReference，被 WeakReference 关联的对象在下一次垃圾回收时会被回收。</p><p>WeakHashMap 主要用来实现缓存，通过使用 WeakHashMap 来引用缓存对象，由 JVM 对这部分缓存进行回收。</p><p>Tomcat 中的 ConcurrentCache 使用了 WeakHashMap 来实现缓存功能。</p><p>ConcurrentCache 采取的是分代缓存：</p><ul><li>经常使用的对象放入 eden 中，eden 使用 ConcurrentHashMap 实现，不用担心会被回收（伊甸园）；</li><li>不常用的对象放入 longterm，longterm 使用 WeakHashMap 实现，这些老对象会被垃圾收集器回收。</li><li>当调用 get() 方法时，会先从 eden 区获取，如果没有找到的话再到 longterm 获取，当从 longterm 获取到就把对象放入 eden 中，从而保证经常被访问的节点不容易被回收。</li><li>当调用 put() 方法时，如果 eden 的大小超过了 size，那么就将 eden 中的所有对象都放入 longterm 中，利用虚拟机回收掉一部分不经常使用的对象。</li></ul><h1 id="IdentityHashMap"><a href="#IdentityHashMap" class="headerlink" title="IdentityHashMap"></a><font size="4px">IdentityHashMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Collection HashMap&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识</title>
    <link href="https://www.runaccpeted.com/2019/09/13/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.runaccpeted.com/2019/09/13/Java基础知识/</id>
    <published>2019-09-13T13:03:44.000Z</published>
    <updated>2019-09-14T16:10:42.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Java核心技术卷I知识点</blockquote><a id="more"></a><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><font size="4px">数据类型</font></h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><font size="4px">基本数据类型</font></h2><table><thead><tr><th></th><th>数据类型</th><th>字节长度</th><th>范围</th><th>默认值</th><th>包装类</th></tr></thead><tbody><tr><td>整型</td><td>byte</td><td>1</td><td>-127～128</td><td>0</td><td>Byte</td></tr><tr><td>整型</td><td>short</td><td>2</td><td>-3万～3万</td><td>0</td><td>Short</td></tr><tr><td>整型</td><td>int</td><td>4</td><td>-2x10^7</td><td>0</td><td>Integer</td></tr><tr><td>整型</td><td>long</td><td>8</td><td>-9x10^18</td><td>0L</td><td>Long</td></tr><tr><td>浮点数</td><td>float</td><td>4</td><td>32位 1 8 11，6～7位精确</td><td>0.0f</td><td>Float</td></tr><tr><td>浮点数</td><td>double</td><td>8</td><td>64位 1 11 52，15-16位精确</td><td>0.0</td><td>Double</td></tr><tr><td>字符</td><td>char</td><td>2</td><td>0～65535</td><td>\u0000</td><td>Character</td></tr><tr><td>布尔值</td><td>boolean</td><td>1</td><td>true or false，不与其他强制转换</td><td>FALSE</td><td>Boolean</td></tr></tbody></table><p>null不是合法的object实例 编译器不会分配内存 它仅仅表示当前引用类型不指向任何对象</p><p>当计算机保存某个字符时，只要将该字符的编号转换成二进制码，字符集就是所有字符的编号组成的总和。</p><p>汉字：默认使用Unicode编码方式，一个字符占2字节</p><p>英文占1字符，中文占2字符</p><p>判断汉字：String.getByte().length() == String.length()</p><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a><font size="3px">隐式类型转换</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> short1 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//short1 = short1 + 1; 字面量1是int类型，比short类型精度高，不能隐式将int转为short类型</span></span><br><span class="line"></span><br><span class="line">short1 += <span class="number">1</span>; <span class="comment">//隐式类型转换则是可以的 == （short)(short1+1);</span></span><br></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a><font size="3px">强制类型转换</font></h2><p>无精度丢失 byte -&gt; short -&gt; int -&gt; long ；char -&gt; int； int -&gt; double</p><p>精度丢失 int –&gt; float；  long –&gt; float；long –&gt; double</p><h2 id="不可变类"><a href="#不可变类" class="headerlink" title="不可变类"></a><font size="3px">不可变类</font></h2><p>一旦创建了这个类的实例就不允许修改它的值，它的成员变量也不能被修改，在Java中所有基本数据类型的包装类是不可变类。</p><p>包装类中所有成员变量被private修饰，只提供构造函数，没有set，get方法，所有方法不能被子类覆盖</p><h2 id="装箱，拆箱"><a href="#装箱，拆箱" class="headerlink" title="装箱，拆箱"></a><font size="3px">装箱，拆箱</font></h2><p>java中对应每个基本数据类型都有包装类，把数据装成对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装箱</span></span><br><span class="line">Integera=Integer.valueOf(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//拆箱</span></span><br><span class="line"><span class="keyword">int</span> in=newInteger(<span class="number">3</span>).intValue();</span><br><span class="line"><span class="comment">//String --&gt; int</span></span><br><span class="line">in=Integer.parseInt(str);</span><br></pre></td></tr></table></figure><h2 id="缓存池问题"><a href="#缓存池问题" class="headerlink" title="缓存池问题"></a><font size="3px" color="#fff0000">缓存池问题</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line">System.out.println(x == y);    <span class="comment">// false</span></span><br><span class="line">x = Integer.valueOf(<span class="number">2</span>);</span><br><span class="line">y = Integer.valueOf(<span class="number">2</span>);</span><br><span class="line">System.out.println(x == y);   <span class="comment">// true</span></span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">y = <span class="number">2</span>;</span><br><span class="line">System.out.println(x == y);   <span class="comment">// true 采用了自动装箱 Integer.valueOf(2);</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：new Integer() 每次创建对象；Integer.valueOf() 使用缓存池取的是同一个对象的引用。</p><p>Jdk1.8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer 缓存池的大小默认为 -128~127。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">static</span> &#123;</span><br><span class="line">           <span class="comment">// high value may be configured by property</span></span><br><span class="line">           <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">           String integerCacheHighPropValue =</span><br><span class="line">               sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">           <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                   i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                   <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                   h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                   <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           high = h;</span><br><span class="line"></span><br><span class="line">           cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">           <span class="keyword">int</span> j = low;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">               cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">           <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="上界可调"><a href="#上界可调" class="headerlink" title="上界可调"></a><font size="3px" color="#f00">上界可调</font></h3><p>启动JVM配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:AutoBoxCacheMax=&lt;size&gt;</span><br></pre></td></tr></table></figure><p>该选项在 JVM 初始化的时候会设定一个名为 java.lang.IntegerCache.high 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer x = Integer.valueOf(<span class="number">180</span>);</span><br><span class="line">Integer y = Integer.valueOf(<span class="number">180</span>);</span><br><span class="line">System.out.println(x == y); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java</span><br><span class="line">java Test</span><br><span class="line"></span><br><span class="line">false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java</span><br><span class="line">java -XX:AutoBoxCacheMax=200 Test</span><br><span class="line"></span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="其他数据类型的缓存"><a href="#其他数据类型的缓存" class="headerlink" title="其他数据类型的缓存"></a><font size="3px">其他数据类型的缓存</font></h3><p>Short </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Byte</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Byte cache[] = <span class="keyword">new</span> Byte[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>Character</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> Character[<span class="number">127</span> + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><font size="4px">字符串</font></h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a><font size="3px">String</font></h2><p>Java 8:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[]; <span class="comment">//不允许被继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，而是都会指向同一个 value 数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>value数组声明为final，初始化后不能被其他数组引用，保证String不可变。</p><p><font size="3px" color="#f00">不可变</font></p><ul><li>保证String的hash值不变，在HashMap中当key时保证键值</li><li>保证String从常量池中取得字符串常量</li><li>作为网络连接参数，确保双方数据一致性</li><li>保证多线程的安全性</li></ul><p>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">"Hello"</span>;</span><br><span class="line">str+=<span class="string">"World"</span>;</span><br></pre></td></tr></table></figure><p>==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder su= <span class="keyword">new</span> StringBuilder(<span class="string">"Hello"</span>);</span><br><span class="line">su.append(<span class="string">"World"</span>);</span><br><span class="line">String str=su.toString();</span><br></pre></td></tr></table></figure><p>存储机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1=<span class="string">"abc"</span>;</span><br><span class="line">String s2=<span class="string">"abc"</span>;</span><br><span class="line">String s3=<span class="string">"ab"</span>+<span class="string">"c"</span>;</span><br><span class="line">String s4=<span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p>s1=s2=s3!=s4<br>常量池中存放abc字符串常量，s1,s2,s3都指向常量池中的abc</p><p>new String()，堆中生成new出来的对象，对象中value[]指向常量池中的abc，栈中的s4指向堆中的对象</p><p>跟输出形式关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str=String.format(<span class="string">"%d"</span>,age);</span><br></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><font size="3px">StringBuilder</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line">extends AbstractStringBuilder</span><br><span class="line"><span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程不安全，效率高</span></span><br></pre></td></tr></table></figure><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a><font size="3px">StringBuffer</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line">extends AbstractStringBuilder</span><br><span class="line"><span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法都用synchronized 同步代码块，线程安全</span></span><br></pre></td></tr></table></figure><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a><font size="4px">传参</font></h1><p>java传参数分为基本数据类型传递，引用类型传递。都是以值传递的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">  a=<span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">  System.out.println(x); <span class="comment">//1</span></span><br><span class="line">  change(x);</span><br><span class="line">  System.out.println(x); <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a只存在于change方法块内，只作为x的值拷贝，离开方法体a不再使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">this</span>.x = x; &#125;  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Test t)</span></span>&#123;</span><br><span class="line">t.setX(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">test.setX(<span class="number">2</span>);</span><br><span class="line">System.out.println(test.getX()); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">change(test);</span><br><span class="line">System.out.println(test.getX()); <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>t 拷贝的是test的指向地址，new Test()对象的地址。对象中x的值改变了就是改变了。</p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a><font size="4px">输入输出</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);<span class="comment">//InputStream</span></span><br><span class="line"><span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">  sc.nextLine(); <span class="comment">//一行</span></span><br><span class="line">  sc.nextInt(); <span class="comment">//整数</span></span><br><span class="line">  sc.nextDouble(); <span class="comment">//浮点数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a><font size="4px">数组</font></h1><p>初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array=<span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">array=&#123;&#125;;</span><br><span class="line">array=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br></pre></td></tr></table></figure><p>Arrays</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.copyOf(array,array.length);</span><br><span class="line">Arrays.sort(array); <span class="comment">//从小到大排序</span></span><br><span class="line">Arrays.asList(array); <span class="comment">//转为List</span></span><br><span class="line">Arrays.toString(array); <span class="comment">//转为String</span></span><br><span class="line">Arrays.fill(array,<span class="number">8</span>); <span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] rows: a)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> value: rows)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a><font size="4px">时间</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GregorianCalendar g = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">g.get(Calendar.MONTH); <span class="comment">//月</span></span><br><span class="line">g.get(Calendar.DAY_OF_MONTH);<span class="comment">//日</span></span><br><span class="line">g.get(Calendar.DAY_OF_WEEK);<span class="comment">//周</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改变状态</span></span><br><span class="line">g.set(Calendar.MONTH,Calendar.APRIL);</span><br><span class="line"></span><br><span class="line">Date time=g.getTime();</span><br></pre></td></tr></table></figure><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a><font size="4px">构造器</font></h1><ul><li>与类名相同</li><li>类可以有一或多个构造器</li><li>构造器可以有任意个参数</li><li>构造器没有返回值</li><li>总是伴随着new操作一起调用</li><li>构造函数不能被继承，不能被覆盖，可以被重载</li><li>子类可以通过super关键字来显式调用父类的构造函数，当父类没有提供无参数的构造函数时，子类的构造函数必须显式地调用父类的构造函数，父类提供了无参数构造函数时，子类的构造函数就可以不显式地调用父类的构造函数，编译器默认调用父类的无参数构造函数。有父类时，实例化子类会先执行父类的构造函数。</li><li>父类，子类都没有定义构造函数时，编译器会为父类生成一个默认的无参数构造函数，给子类也生成一个无参数构造函数。默认构造器的修饰符只跟当前类的修饰符有关</li><li>普通方法可以与构造函数有相同的方法名</li></ul><p><strong>this</strong> – 表示正在初始化的对象；调用同类另一个构造器this()</p><p><strong>super</strong> – 调用超类方法，调用超类构造器</p><h1 id="java创建对象方式"><a href="#java创建对象方式" class="headerlink" title="java创建对象方式"></a><font size="4px">java创建对象方式</font></h1><ol><li>new 实例化</li><li>反射机制 newInstance()</li><li>clone()创建一个对象</li><li>反序列化创建对象</li></ol><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a><font size="4px">内部类</font></h1><p>静态内部类 不依赖于类实例化调用，不能有非静态变量和方法</p><p>成员内部类 依赖于实例化调用，不能有静态变量和方法</p><p>局部内部类 不能被public，protected，private以及static修饰</p><p>匿名内部类 没有类名的内部类，不使用extends，class，implements，没有构造函数，通过new 类名直接使用</p><h1 id="重载，重写"><a href="#重载，重写" class="headerlink" title="重载，重写"></a><font size="4px">重载，重写</font></h1><table><thead><tr><th></th><th>重载</th><th>重写</th></tr></thead><tbody><tr><td>位置</td><td>发生在同一个类中</td><td>父类的子类中</td></tr><tr><td>定义</td><td>同一方法名的参数顺序，个数，类型不同；返回值，访问权限，异常不同并不构成重载</td><td>同一方法名，参数相同；子类返回值，异常类型小于父类，访问权限大于父类</td></tr><tr><td>原理</td><td>方法调用</td><td>用于多态</td></tr></tbody></table><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a><font size="4px">多态</font></h1><p>当同一个存在作用在不同对象时，会有不同的语义。编译时多态，运行时多态。方法的重载，同一个类有多个同名的方法，方法有不同的参数，编译时就可以确定到底调用哪个方法，是一种编译时多态，方法多态性。方法的覆盖，父类的引用变量可以指向子类的实例对象，在运行时才动态绑定，确定调用哪个方法，是运行时多态。成员变量无法实现多态。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a><font size="4px">继承</font></h1><p>extends </p><p>提高代码复用功能，子类继承父类。Java不支持多继承，但接口可以多继承父接口。子类只能继承父类的非私有(public，protected)成员变量与方法。子类与父类有相同的成员变量时，子类的成员变量会覆盖父类的成员变量，而不是继承。有相同的函数时，子类也会覆盖父类的方法，而不是继承。子类不能继承，显式调用父类的构造函数，子类可通过super()进行调用</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a><font size="4px">抽象类</font></h1><p>abstract关键字。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。抽象类中可以包含普通方法和成员变量，不能被实例化。是一种模块，类声明为abstract，抽象类只能被继承extends，且只能是单继承，抽象强调has-a关系</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a><font size="4px">接口</font></h1><p>implement</p><p>接口可以拥有默认的方法实现</p><p>接口的方法默认都是 public 的，并且不允许定义为 private 或者 protected。</p><p>接口的字段默认都是 static 和 final 的</p><p>是一种规范，类声明为interface，接口中可以包含静态常量，方法（抽象实例方法，类方法，默认方法），内部类（内部接口，枚举），类中方法只能为public, abstract, default，不能用private，static，synchronized，native修饰，成员变量只能为public static final，接口可以被实现implements，一个类可以实现多个接口，接口可以多继承以实现类多继承的功能，接口只能继承接口，不能继承类，接口强调is-a关系</p><p>抽象，接口都不能被实例化，都可以通过多态调用子类，实现类方法</p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a><font size="4px">Object</font></h1><p>Object作为所有类的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; <span class="title">getClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><h1 id="equals"><a href="#equals" class="headerlink" title="equals()"></a><font size="3px">equals()</font></h1><ul><li><p>自反性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(x);</span><br></pre></td></tr></table></figure></li><li><p>对称性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(y)==y.equals(x);</span><br></pre></td></tr></table></figure></li><li><p>传递性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x.equals(y) &amp;&amp; y.equals(z))</span><br><span class="line">    x.equals(z); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure></li><li><p>一致性 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(y) == x.equals(y); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p>object类中的equals方法直接使用==运算符比较两个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类可以对其进行重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Byte) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Byte)obj).byteValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a><font size="3px">hashCode()</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Object中hashCode方法返回对象在内存中地址转换成的一个int值，如果没有重写hashCode方法，任何对象的hashCode方法返回值都不相同。在HashMap中key值是否重复就是通过hashCode来判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规定equals被覆盖，hashCode必被覆盖</p><p>equals相同，hashCode必相同；equals不同，hashCode可能相同</p><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a><font size="3px">toString()</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认返回 类名@xxxxx 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。</p><h1 id="clone"><a href="#clone" class="headerlink" title="clone()"></a><font size="3px">clone()</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浅拷贝：拷贝对象和原始对象的引用类型引用同一个对象。</p><p>深拷贝：拷贝对象和原始对象的引用类型引用不同对象。</p><p>Java中只有值传递，基本数据类型传的是值，对象传的是地址。</p><p>而clone()方法创建出一个与对象A具有相同状态的对象B，并且对B的修改不影响A的情况</p><p>所有类都继承自object类，object 类中有clone()方法，返回一个object对象的复制对象</p><p>clone()的使用：</p><p>class XX implements Cloneable + 重写clone()方法 + 调用super.clone()</p><p>其实现的是浅拷贝，当类中包括其他对象时，需要再调用clone()完成深复制</p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><font size="4px">关键字</font></h1><h2 id="final"><a href="#final" class="headerlink" title="final"></a><font size="3px">final</font></h2><p>变量：基本数据类型，不可重新赋值；对象，指向对象地址不变，对象内容可变</p><p>父类方法：不能被重写；父类：不能被继承</p><p>形参不能用final修饰</p><p>必须被程序员显式初始化</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a><font size="3px">static</font></h2><table><thead><tr><th>成员变量</th><th>静态变量从属于类，在内存中只有一份，所有实例都指向同一个内存地址，类被加载后，静态变量就会被分配空间，可以被使用，引用该变量：类.静态变量，对象.静态变量不能在成员函数内部定义static变量</th></tr></thead><tbody><tr><td>成员方法</td><td>静态方法可以通过类.静态方法调用，静态方法中不能使用非静态变量，方法。</td></tr><tr><td>代码块</td><td>独立于成员变量和成员函数，类加载时会先执行static代码块，再初始化构造函数</td></tr><tr><td>内部类</td><td>不依赖于外部类实例对象而被实例化，静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量和方法，只能访问其静态变量和方法</td></tr></tbody></table><p>拷贝对象和原始对象的引用类型引用不同对象。</p><p>拷贝对象和原始对象的引用类型引用同一个对象。</p><p>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。最后才是构造函数的初始化。</p><p>初始化顺序：</p><ul><li>父类（静态变量、静态语句块）</li><li>子类（静态变量、静态语句块）</li><li>父类（实例变量、普通语句块）</li><li>父类（构造函数）</li><li>子类（实例变量、普通语句块）</li><li>子类（构造函数）</li></ul><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a><font size="3px">switch</font></h2><p>switch(expression)，expression只能是一个枚举常量或整数表达式，expression可以是byte，short，char，int，也可以是它们的包装类Byte，Short，Character，Integer。long, float, double 强制转换为int可以使用。case为直接的常量数组，还可以为final型的变量，但不能是变量或带有变量的表达式。</p><p>Java7开始支持String类型，其实质是：对String调用hasCode()方法，得到hash值，来匹配所有case，接着调用字符串的equals()进行匹配。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a><font size="3px">volatile</font></h2><p>volatile是一种类型修饰符，用来修饰被不同线程访问和修改的变量，保证变量是直接从内存中提取，而不利用缓存，从而保证变量值的一致性。</p><p>volatile不能保证操作的原子性，不能代替synchronized。</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><font size="3px">instanceof</font></h2><p>判断一个引用类型的变量所指向的对象属于是一个类的实例，左边是否是右边的实例。</p><p>前面对象是后面类的实例或子类实例时都将返回true</p><h2 id="stricfp"><a href="#stricfp" class="headerlink" title="stricfp"></a><font size="3px">stricfp</font></h2><p>static float point精确浮点，按照IEEE二进制浮点数算术标准来执行。用于修饰类，类中所有方法都会自动被stricfp修饰，保证浮点数运算精确性，在不同硬件平台上也有一致的结果</p><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a><font size="3px">assert</font></h2><p>作为一种软件调试的方法，主要作用是对一个boolean表达式进行检查。</p><p>assert expression或assert expression1:变量</p><p>如：assert 1+1==3:“assert failed，exit”，调用java -ea Test ，-ea表示打开开关</p><p>输出：Exception in thread “main” Java.lang.AssertError:assert failed, exit at Test.main(Test.java 5)</p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a><font size="4px">日志</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> finall Logger logger=Logger.getLogger(<span class="string">"com.company.app"</span>);</span><br><span class="line">logger.log(Level.FINE,message);</span><br></pre></td></tr></table></figure><p>日志记录器级别：SEVERE，WARNING，INFO，CONFIG，FINE，FINER，FINEST</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Java核心技术卷I知识点&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>树莓派搭建服务器&amp;&amp;实现内网穿透</title>
    <link href="https://www.runaccpeted.com/2019/09/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.runaccpeted.com/2019/09/06/树莓派搭建服务器/</id>
    <published>2019-09-06T13:23:07.000Z</published>
    <updated>2019-09-13T06:33:57.719Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">tomcat mysql nginx php</blockquote><a id="more"></a><h1 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a><font size="4px">tomcat安装</font></h1><p><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a> 下载Tomcat X core:  XX.tar.gz</p><p>使用Transmit软件直接文件拷贝到树莓派文件夹中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf apache-tomcat-x.x.x.tar.gz</span><br><span class="line">ls</span><br><span class="line">cd apache-tomcat-x.x.x</span><br><span class="line">cd bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p>树莓派访问 localhost:8080</p><p>本机访问 ip:8080</p><h1 id="mysqlt安装"><a href="#mysqlt安装" class="headerlink" title="mysqlt安装"></a><font size="4px">mysqlt安装</font></h1><p>❌ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">没有可用的软件包 mysql-server，但是它被其它的软件包引用了。</span><br><span class="line">这可能意味着这个缺失的软件包可能已被废弃，</span><br><span class="line">或者只能在其他发布源中找到</span><br><span class="line">然而下列软件包会取代它：</span><br><span class="line">  mariadb-server-10.0</span><br><span class="line"></span><br><span class="line">E: 软件包 mysql-server 没有可安装候选</span><br></pre></td></tr></table></figure><p>于是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mariadb-server-10.0</span><br></pre></td></tr></table></figure><p>☑️ 树莓派换源</p><p><strong>软件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>第一行加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</span><br></pre></td></tr></table></figure><p>注释掉其他的源</p><p><strong>系统</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list.d/raspi.list</span><br></pre></td></tr></table></figure><p>第一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ stretch main ui</span><br></pre></td></tr></table></figure><p>同样注释掉其他的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p><strong>最终：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>成功！</p><h2 id="配置密码"><a href="#配置密码" class="headerlink" title="配置密码"></a><font size="3px">配置密码</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root</span><br></pre></td></tr></table></figure><p>直接回车</p><p>出现以下内容即为成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 44</span><br><span class="line">Server version: 10.1.38-MariaDB-0+deb9u1 Raspbian 9.0</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure><p>设置root密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user mysql;</span><br><span class="line">UPDATE user SET password=password(&apos;密码&apos;) WHERE user=&apos;root&apos;; </span><br><span class="line">UPDATE user SET plugin=&apos;mysql_native_password&apos; WHERE user = &apos;root&apos;; </span><br><span class="line">flush privileges; </span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><p>重启mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><h2 id="配置远程服务"><a href="#配置远程服务" class="headerlink" title="配置远程服务"></a><font size="3px">配置远程服务</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf</span><br></pre></td></tr></table></figure><p>将bind-address 127.0.0.1改为0.0.0.0</p><p>control+o</p><p>control+x</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><p>设置账号远程登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root</span><br></pre></td></tr></table></figure><p>现在需要输入刚设置的密码了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;123456&apos; with grant option;</span><br><span class="line">flush privileges; </span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h2 id="客户端登陆-Navicat"><a href="#客户端登陆-Navicat" class="headerlink" title="客户端登陆-Navicat"></a><font size="3px">客户端登陆-Navicat</font></h2><p><img src="/2019/09/06/树莓派搭建服务器/navicat.png" alt="image-20190909171228911"></p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a><font size="4px">nginx</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service</span><br><span class="line"></span><br><span class="line">启动“nginx.service”需要认证。</span><br><span class="line">Multiple identities can be used for authentication:</span><br><span class="line"> 1.  ,,, (pi)</span><br><span class="line"> 2.  root</span><br><span class="line">Choose identity to authenticate as (1-2): 2</span><br><span class="line">Password:  #树莓派密码</span><br></pre></td></tr></table></figure><p>浏览器访问 树莓派IP</p><p><img src="/2019/09/06/树莓派搭建服务器/nginx.png" alt="nginx">      </p><h2 id="自定义网页"><a href="#自定义网页" class="headerlink" title="自定义网页"></a><font size="3px">自定义网页</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/html</span><br></pre></td></tr></table></figure><p>新建文件夹test</p><p>新建文件 index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">Hello World!</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><p>浏览器访问 树莓派IP/test</p><p><img src="/2019/09/06/树莓派搭建服务器/hello.png" alt="hello"></p><h1 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a><font size="4px"><a href="http://www.ngrok.cc/" target="_blank" rel="noopener">ngrok</a></font></h1><h2 id="开通隧道"><a href="#开通隧道" class="headerlink" title="开通隧道"></a><font size="3px">开通隧道</font></h2><p>隧道管理 -&gt; 开通隧道 -&gt; 选择一个服务器</p><p>隧道名称：自定义</p><p>域名类型：使用前置域名  |  使用自定义域名</p><p>前置域名：自定义</p><p>自定义域名：需要CNAME解析</p><p>http验证用户名：可以不设置</p><p>http验证密码：</p><p>本地端口：树莓派IP:80</p><h2 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a><font size="3px">下载软件</font></h2><p>隧道管理界面</p><p><img src="/2019/09/06/树莓派搭建服务器/software.png" alt="software"></p><p>下载解压后，得到sunny.app</p><p>终端cd到sunny.app所在文件夹备用</p><h1 id="Dnspod"><a href="#Dnspod" class="headerlink" title="Dnspod"></a><font size="4px">Dnspod</font></h1><p>添加一条CNAME记录 记录值 free.idcfengye.com.  主机记录自定–&gt; 需要跟ngrok中的自定义域名一致</p><h1 id="内网配置"><a href="#内网配置" class="headerlink" title="内网配置"></a><font size="4px">内网配置</font></h1><h2 id="访问192-168-0-1"><a href="#访问192-168-0-1" class="headerlink" title="访问192.168.0.1"></a><font size="3px">访问192.168.0.1</font></h2><p> 虚拟服务器 应用</p><p>添加映射 </p><table><thead><tr><th>常用服务器</th><th>外部端口</th><th>内部端口</th><th>IP地址</th><th>协议类型</th></tr></thead><tbody><tr><td>HTTP</td><td>80</td><td>80</td><td>树莓派IP</td><td>TCP</td></tr></tbody></table><h2 id="回到树莓派"><a href="#回到树莓派" class="headerlink" title="回到树莓派"></a><font size="3px">回到树莓派</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sites-available</span><br><span class="line">sudo nano default</span><br></pre></td></tr></table></figure><p>配置监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name xx.xx.com;</span><br><span class="line">        </span><br><span class="line">ctrl+o ctrl+x 保存退出</span><br></pre></td></tr></table></figure><p>终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure><h2 id="sunny启动"><a href="#sunny启动" class="headerlink" title="sunny启动"></a><font size="3px">sunny启动</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sunny clientid 隧道id  在隧道管理界面可得</span><br></pre></td></tr></table></figure><p><img src="/2019/09/06/树莓派搭建服务器/ngrok.png" alt="ngrok"></p><p>访问xx.xx.com </p><p><img src="/2019/09/06/树莓派搭建服务器/hello-8091852.png" alt="hello"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;tomcat mysql nginx php&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://www.runaccpeted.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://www.runaccpeted.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>玩转树莓派(-)树莓派配置</title>
    <link href="https://www.runaccpeted.com/2019/09/06/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <id>https://www.runaccpeted.com/2019/09/06/树莓派/</id>
    <published>2019-09-06T09:58:57.000Z</published>
    <updated>2019-09-13T13:03:26.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Raspberry Pi3</blockquote><a id="more"></a><h1 id="烧录系统"><a href="#烧录系统" class="headerlink" title="烧录系统"></a><font size="4px">烧录系统</font></h1><p>用SD Card Formatter进行格式化SD卡，Quick format</p><h2 id="查看驱动器列表"><a href="#查看驱动器列表" class="headerlink" title="查看驱动器列表"></a><font size="3px">查看驱动器列表</font></h2><p>diskutil list</p><p>/dev/disk2 (external, physical):</p><p>   #:                       TYPE NAME                    SIZE       IDENTIFIER</p><p>   0:     FDisk_partition_scheme                        *7.9 GB     disk2</p><p>   1:                 DOS_FAT_32 NO NAME                 7.9 GB     disk2s1</p><h2 id="取消SD卡挂载"><a href="#取消SD卡挂载" class="headerlink" title="取消SD卡挂载"></a><font size="3px">取消SD卡挂载</font></h2><p>diskutil unmountDisk /dev/disk2</p><h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a><font size="3px">烧录</font></h2><p>sudo dd if=img文件路径 of=/dev/disk2 bs=4m;sync</p><p>img镜像 <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/raspbian/</a></p><h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a><font size="4px">成功</font></h2><p>1261+0 records in</p><p>1261+0 records out</p><p>5289017344 bytes transferred in 725.169614 secs (7293490 bytes/sec)</p><h2 id="推出设备"><a href="#推出设备" class="headerlink" title="推出设备"></a><font size="3px">推出设备</font></h2><p>diskutil eject /dev/disk2</p><h1 id="树莓派上有关配置"><a href="#树莓派上有关配置" class="headerlink" title="树莓派上有关配置"></a><font size="4px">树莓派上有关配置</font></h1><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a><font size="3px">ssh</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>重置密码</p><p>桌面Preferences -&gt; Raspberry Pi Configuration -&gt; Interface -&gt; enable–ssh / vnc</p><p>本电脑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 192.168.0.103 -l pi</span><br></pre></td></tr></table></figure><p>提示输入密码即为配置成功</p><p>IP通过树莓派终端sudo ifconfig得到</p><h2 id="树莓派使用固定IP"><a href="#树莓派使用固定IP" class="headerlink" title="树莓派使用固定IP"></a><font size="3px">树莓派使用固定IP</font></h2><p>网站 192.168.1.1 路由器中设置IP与MAC绑定</p><h2 id="vnc"><a href="#vnc" class="headerlink" title="vnc"></a><font size="3px">vnc</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install tightvncserver</span><br><span class="line"></span><br><span class="line">vncserver :1 设置密码</span><br></pre></td></tr></table></figure><p>本机安装vnc viewer <a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">https://www.realvnc.com/en/connect/download/viewer/</a></p><p>输入ip，密码(刚设置的vnc密码)即可查看</p><h2 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a><font size="3px">共享文件</font></h2><p>Transmit软件 </p><p><a href="https://pan.baidu.com/s/1KH-8RmVu8nwc9ivsxqhtXg" target="_blank" rel="noopener">https://pan.baidu.com/s/1KH-8RmVu8nwc9ivsxqhtXg</a> 密码：o101</p><p>输入ip 用户名 密码即可访问</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Raspberry Pi3&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://www.runaccpeted.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://www.runaccpeted.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级题型总结</title>
    <link href="https://www.runaccpeted.com/2019/09/06/PAT%E7%94%B2%E7%BA%A7%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <id>https://www.runaccpeted.com/2019/09/06/PAT甲级题型总结/</id>
    <published>2019-09-06T05:48:52.000Z</published>
    <updated>2019-09-06T06:33:05.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">A1001-A1155总结</blockquote><a id="more"></a><table><thead><tr><th align="center">题号</th><th align="center">题目</th><th align="center">题型</th><th align="center">题型</th></tr></thead><tbody><tr><td align="center">A1001</td><td align="center"><a href="https://www.runaccpeted.com/2019/09/03/A1001">A+B Format</a></td><td align="center">20</td><td align="center">数学问题</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;A1001-A1155总结&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1001 A+B Format (20 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1001/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1001/</id>
    <published>2019-09-03T04:36:39.000Z</published>
    <updated>2019-09-05T18:44:39.376Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">a+b和按要求输出</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains a pair of integers <em>a</em> and <em>b</em> where −106≤<em>a</em>,<em>b</em>≤106. The numbers are separated by a space.</p><p><strong>output Specification:</strong></p><p>For each test case, you should output the sum of <em>a</em> and <em>b</em> in one line. The sum must be written in the standard format.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1000000 9</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-999，991</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">int</span> sum=a+b;</span><br><span class="line"><span class="keyword">if</span> (sum&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">sum=-sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sum)&#123;</span><br><span class="line">num[idx++]=sum%<span class="number">10</span>;</span><br><span class="line">sum/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; idx ; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans+=(num[i]+<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span> (cnt%<span class="number">3</span>==<span class="number">0</span>&amp;&amp;i!=idx<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans+=<span class="string">','</span>;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = ans.length()<span class="number">-1</span>; i &gt;=<span class="number">0</span> ; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;a+b和按要求输出&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1002 A+B for Polynomials (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1002/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1002/</id>
    <published>2019-09-03T04:36:36.000Z</published>
    <updated>2019-09-05T18:42:18.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">多项式相加</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>This time, you are supposed to find <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p><em>K</em> $N_1$ $a_{N1}$ $N_2$  $a_{N2}$ … $N_K$ $a_{NK}$</p><p>where <em>K</em> is the number of nonzero terms in the polynomial, $N_i$ and $a_{Ni}$ (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10，0≤$N_K$&lt;⋯&lt;$N_2$&lt;$N_1$≤1000.</p><p><strong>output Specification:</strong></p><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2 1.5 1 2.9 0 3.2</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">double</span> num[maxn]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">double</span> b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;a,&amp;b);</span><br><span class="line">num[a]+=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;a,&amp;b);</span><br><span class="line">num[a]+=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,cnt);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxn<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>,i,num[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;多项式相加&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1003 Emergency (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1003/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1003/</id>
    <published>2019-09-03T04:36:33.000Z</published>
    <updated>2019-09-05T18:38:34.369Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Dijskstra</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each test case, the first line contains 4 positive integers: <em>N</em> (≤500) - the number of cities (and the cities are numbered from 0 to <em>N</em>−1), <em>M</em> - the number of roads, <em>C</em>1 and <em>C</em>2 - the cities that you are currently in and that you must save, respectively. The next line contains <em>N</em> integers, where the <em>i</em>-th integer is the number of rescue teams in the <em>i</em>-th city. Then <em>M</em> lines follow, each describes a road with three integers <em>c</em>1, <em>c</em>2 and <em>L</em>, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from <em>C</em>1 to <em>C</em>2.</p><p><strong>output Specification:</strong></p><p>For each test case, print in one line two numbers: the number of different shortest paths between <em>C</em>1 and <em>C</em>2, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5 6 0 2</span><br><span class="line">1 2 1 5 3</span><br><span class="line">0 1 1</span><br><span class="line">0 2 2</span><br><span class="line">0 3 1</span><br><span class="line">1 2 1</span><br><span class="line">2 4 1</span><br><span class="line">3 4 1</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 4</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Inf=<span class="number">312312312</span>;</span><br><span class="line"><span class="keyword">int</span> graph[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> weight[<span class="number">510</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> num[maxn]=&#123;&#125;;</span><br><span class="line"><span class="keyword">int</span> w[maxn]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(graph[<span class="number">0</span>],graph[<span class="number">0</span>]+maxn*maxn,Inf);</span><br><span class="line"><span class="keyword">int</span> n,m,c1,c2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;c1,&amp;c2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;weight[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;graph[a][b]);</span><br><span class="line">graph[b][a]=graph[a][b];</span><br><span class="line">&#125;</span><br><span class="line">fill(dis,dis+maxn,Inf);</span><br><span class="line">dis[c1]=<span class="number">0</span>;</span><br><span class="line">w[c1]=weight[c1];</span><br><span class="line">num[c1]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">-1</span>; <span class="keyword">int</span> min=Inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (visit[j]==<span class="literal">false</span>&amp;&amp;min&gt;dis[j])</span><br><span class="line">&#123;</span><br><span class="line">u=j;</span><br><span class="line">min=dis[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">visit[u]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n; ++v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (visit[v]==<span class="literal">false</span>&amp;&amp;graph[u][v]!=Inf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (dis[u]+graph[u][v]&lt;dis[v])</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=dis[u]+graph[u][v];</span><br><span class="line">w[v]=w[u]+weight[v];</span><br><span class="line">num[v]=num[u];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(dis[v]==dis[u]+graph[u][v])&#123;</span><br><span class="line"><span class="keyword">if</span> (w[v]&lt;w[u]+weight[v])</span><br><span class="line">&#123;</span><br><span class="line">w[v]=w[u]+weight[v];</span><br><span class="line">&#125;</span><br><span class="line">num[v]+=num[u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,num[c2],w[c2]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Dijskstra&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1004 Counting Leaves (30 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1004/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1004/</id>
    <published>2019-09-03T04:36:30.000Z</published>
    <updated>2019-09-05T18:37:10.990Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">每层叶结点数</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 0&lt;<em>N</em>&lt;100, the number of nodes in a tree, and <em>M</em> (&lt;<em>N</em>), the number of non-leaf nodes. Then <em>M</em> lines follow, each in the format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID K ID[1] ID[2] ... ID[K]</span><br></pre></td></tr></table></figure><p>where <code>ID</code> is a two-digit number representing a given non-leaf node, <code>K</code> is the number of its children, followed by a sequence of two-digit <code>ID</code>‘s of its children. For the sake of simplicity, let us fix the root ID to be <code>01</code>.</p><p>The input ends with <em>N</em> being 0. That case must NOT be processed.</p><p><strong>output Specification:</strong></p><p>For each test case, you are supposed to count those family members who have no child <strong>for every seniority level</strong> starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p><p>The sample case represents a tree with only 2 nodes, where <code>01</code> is the root and <code>02</code> is its only child. Hence on the root <code>01</code> level, there is <code>0</code> leaf node; and on the next level, there is <code>1</code> leaf node. Then we should output <code>0 1</code> in a line.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">01 1 02</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[<span class="number">110</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; level[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> maxdeep=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root,<span class="keyword">int</span> deep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (deep&gt;maxdeep)</span><br><span class="line">&#123;</span><br><span class="line">maxdeep=deep;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v[root].size()==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[deep].push_back(root);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[root].size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line">dfs(v[root][i],deep+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k,id,kid;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;id,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;kid);</span><br><span class="line">v[id].push_back(kid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxdeep; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (key&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">key++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,(<span class="keyword">int</span>)level[i].size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;每层叶结点数&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1005 Spell It Right (20 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1005/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1005/</id>
    <published>2019-09-03T04:36:28.000Z</published>
    <updated>2019-09-05T18:33:16.441Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">数字各位相加和转字符</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤$10^{100}$).</p><p><strong>output Specification:</strong></p><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12345</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one five</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">110</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">char</span> ans[][<span class="number">7</span>]=&#123;<span class="string">"zero"</span>,<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>,<span class="string">"four"</span>,<span class="string">"five"</span>,<span class="string">"six"</span>,<span class="string">"seven"</span>,<span class="string">"eight"</span>,<span class="string">"nine"</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i] != <span class="string">'\0'</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">sum+=str[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,ans[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d\n",sum);</span></span><br><span class="line"><span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sum)&#123;</span><br><span class="line">num[idx++]=sum%<span class="number">10</span>;</span><br><span class="line">sum/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,ans[num[idx<span class="number">-1</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx<span class="number">-2</span>; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %s"</span>,ans[num[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;数字各位相加和转字符&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1006 Sign In and Sign Out (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1006/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1006/</id>
    <published>2019-09-03T04:36:25.000Z</published>
    <updated>2019-09-05T18:30:56.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">排序，取最早(小)时间，最晚时间</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID_number Sign_in_time Sign_out_time</span><br></pre></td></tr></table></figure><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><p><strong>output Specification:</strong></p><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">CS301111 15:30:28 17:00:10</span><br><span class="line">SC3021234 08:00:00 11:25:25</span><br><span class="line">CS301133 21:45:00 21:58:40</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SC3021234 CS301133</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> id,intime,outime;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.intime&lt;b.intime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.outime&gt;b.outime;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">node temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp.id&gt;&gt;temp.intime&gt;&gt;temp.outime;</span><br><span class="line">v.push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line">sort(v.begin(), v.end(),cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v[<span class="number">0</span>].id&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">sort(v.begin(), v.end(),cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;v[<span class="number">0</span>].id&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;排序，取最早(小)时间，最晚时间&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1007 Maximum Subsequence Sum (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1007/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1007/</id>
    <published>2019-09-03T04:36:22.000Z</published>
    <updated>2019-09-05T18:29:02.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">最大子序列和</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>Given a sequence of <em>K</em> integers { $N_1$, $N_2$, …, $N_K$ }. A continuous subsequence is defined to be { $N_i$, $N_i$+1, …, $N_j$ } where 1≤<em>i</em>≤<em>j</em>≤<em>K</em>. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer <em>K</em> (≤10000). The second line contains <em>K</em> numbers, separated by a space.</p><p><strong>output Specification:</strong></p><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices <em>i</em> and <em>j</em> (as shown by the sample case). If all the <em>K</em> numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">-10 1 2 3 4 -5 -23 3 7 -21</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 1 4</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10010</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> left,right,sum,dp,temp;</span><br><span class="line">dp=<span class="number">0</span>; sum=<span class="number">-1</span>; left=<span class="number">0</span>;</span><br><span class="line">    right=n<span class="number">-1</span>; temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">num[i]=a;</span><br><span class="line">dp+=a;</span><br><span class="line"><span class="keyword">if</span> (dp&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp=<span class="number">0</span>;</span><br><span class="line">temp=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dp&gt;sum)</span><br><span class="line">&#123;</span><br><span class="line">sum=dp;</span><br><span class="line">left=temp;</span><br><span class="line">right=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,sum,num[left],num[right]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;最大子序列和&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1008 Elevator (20 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1008/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1008/</id>
    <published>2019-09-03T04:36:19.000Z</published>
    <updated>2019-09-05T18:25:58.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">简单推理，电梯上加，下减</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>The highest building in our city has only one elevator. A request list is made up with <em>N</em> positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.</p><p>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains a positive integer <em>N</em>, followed by <em>N</em> positive numbers. All the numbers in the input are less than 100.</p><p><strong>output Specification:</strong></p><p>For each test case, print the total time on a single line.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2 3 1</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">41</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>; <span class="keyword">int</span> idx=<span class="number">0</span>; <span class="keyword">int</span> sub=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">sub=a-idx;</span><br><span class="line"><span class="keyword">if</span> (sub&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum+=sub*<span class="number">6</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">sub=-sub;</span><br><span class="line">sum+=sub*<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum+=<span class="number">5</span>;</span><br><span class="line">idx=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;简单推理，电梯上加，下减&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1009 Product of Polynomials (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1009/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1009/</id>
    <published>2019-09-03T04:36:16.000Z</published>
    <updated>2019-09-05T18:24:23.953Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">多项式相乘</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>This time, you are supposed to find <em>A</em>×<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p>K $N_1$ $a_{N1}$ $N_2$ $a_{N2}$ … $N_K$ $a_{NK}$</p><p>where <em>K</em> is the number of nonzero terms in the polynomial, $N_i$ and $a_{Ni}$ (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10, 0≤$N_K$&lt;⋯&lt;$N_2$&lt;$N_1$≤1000.</p><p><strong>output Specification:</strong></p><p>For each test case you should output the product of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be <strong>NO</strong> extra space at the end of each line. Please be accurate up to 1 decimal place.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 3 3.6 2 6.0 1 1.6</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2020</span>;</span><br><span class="line"><span class="keyword">double</span> num[<span class="number">1010</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">double</span> ans[maxn]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">double</span> b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;a,&amp;b);</span><br><span class="line">num[a]+=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lf"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1010</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line">ans[j+a]+=b*num[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ans[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,cnt);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxn<span class="number">-1</span>; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ans[i]!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>,i,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;多项式相乘&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1010 Radix (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1010/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1010/</id>
    <published>2019-09-03T04:36:12.000Z</published>
    <updated>2019-09-05T18:19:50.111Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">进制转换</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p><p>Now for any pair of positive integers <em>N</em>1 and <em>N</em>2, your task is to find the radix of one number while that of the other is given.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N1 N2 tag radix</span><br></pre></td></tr></table></figure><p>Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p><p><strong>output Specification:</strong></p><p>For each test case, print in one line the radix of the other number so that the equation <code>N1</code> = <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p><p> <strong>Sample Input 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 110 1 10</span><br></pre></td></tr></table></figure><p> <strong>Sample output 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p> <strong>Sample Input 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 ab 1 2</span><br></pre></td></tr></table></figure><p> <strong>Sample output 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Impossible</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> radix;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getIndex</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> radix)</span></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p=<span class="number">1l</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = str.length()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">num+=(str[i]-<span class="string">'0'</span>)*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]&gt;=<span class="string">'a'</span>&amp;&amp;str[i]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">num+=((str[i]-<span class="string">'a'</span>)+<span class="number">10</span>)*p;</span><br><span class="line">&#125;</span><br><span class="line">p=p*radix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (str[i]&gt;=<span class="string">'0'</span>&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num=str[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (num&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[i]&gt;=<span class="string">'a'</span>&amp;&amp;str[i]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> num=(str[i]-<span class="string">'a'</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (num&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">answer</span><span class="params">(<span class="built_in">string</span> n1,<span class="built_in">string</span> n2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left,right;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a=getIndex(n1,radix);</span><br><span class="line"><span class="keyword">int</span> max=getMax(n2);</span><br><span class="line">left=max+<span class="number">1</span>;</span><br><span class="line">right=a+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=getIndex(n2,mid);</span><br><span class="line"><span class="keyword">if</span> (ans==a)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; mid&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ans&gt;a||ans&lt;<span class="number">0</span>)&#123;</span><br><span class="line">right=mid<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">left=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Impossible\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> n1,n2;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n1&gt;&gt;n2&gt;&gt;tag&gt;&gt;radix;</span><br><span class="line"><span class="keyword">if</span> (tag==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">answer(n1,n2);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(tag==<span class="number">2</span>)&#123;</span><br><span class="line">answer(n2,n1);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Impossible"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;进制转换&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1011 World Cup Betting (20 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1011/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1011/</id>
    <published>2019-09-03T04:36:08.000Z</published>
    <updated>2019-09-05T18:17:21.650Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">比较大小</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited as the best players from the best teams doing battles for the World Cup trophy in South Africa. Similarly, football betting fans were putting their money where their mouths were, by laying all manner of World Cup bets.</p><p>Chinese Football Lottery provided a “Triple Winning” game. The rule of winning was simple: first select any three of the games. Then for each selected game, bet on one of the three possible results – namely <code>W</code> for win, <code>T</code> for tie, and <code>L</code> for lose. There was an odd assigned to each result. The winner’s odd would be the product of the three odds times 65%.</p><p>For example, 3 games’ odds are given as the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> W    T    L</span><br><span class="line">1.1  2.5  1.7</span><br><span class="line">1.2  3.1  1.6</span><br><span class="line">4.1  1.2  1.1</span><br></pre></td></tr></table></figure><p>To obtain the maximum profit, one must buy <code>W</code> for the 3rd game, <code>T</code> for the 2nd game, and <code>T</code> for the 1st game. If each bet takes 2 yuans, then the maximum profit would be (4.1×3.1×2.5×65%−1)×2=39.31 yuans (accurate up to 2 decimal places).</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains the betting information of 3 games. Each game occupies a line with three distinct odds corresponding to <code>W</code>, <code>T</code> and <code>L</code>.</p><p><strong>output Specification:</strong></p><p>For each test case, print in one line the best bet of each game, and the maximum profit accurate up to 2 decimal places. The characters and the number must be separated by one space.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.1 2.5 1.7</span><br><span class="line">1.2 3.1 1.6</span><br><span class="line">4.1 1.2 1.1</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T T W 39.31</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c[]=&#123;<span class="string">"WTL"</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> idx=<span class="number">-1</span>; <span class="keyword">double</span> temp=<span class="number">-1</span>; <span class="keyword">double</span> a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a);</span><br><span class="line"><span class="keyword">if</span> (a&gt;temp)</span><br><span class="line">&#123;</span><br><span class="line">temp=a;</span><br><span class="line">idx=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,c[idx]);</span><br><span class="line">ans*=temp;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">2</span>*(ans*<span class="number">0.65</span><span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;比较大小&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1012 The Best Rank (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1012/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1012/</id>
    <published>2019-09-03T04:36:05.000Z</published>
    <updated>2019-09-05T18:15:53.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">排序</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p><p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StudentID  C  M  E  A</span><br><span class="line">310101     98 85 88 90</span><br><span class="line">310102     70 95 88 84</span><br><span class="line">310103     82 87 94 88</span><br><span class="line">310104     91 91 91 91</span><br></pre></td></tr></table></figure><p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p><p><strong>output Specification:</strong></p><p>For each of the <em>M</em> students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p><p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p><p>If a student is not on the grading list, simply output <code>N/A</code>.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5 6</span><br><span class="line">310101 98 85 88</span><br><span class="line">310102 70 95 88</span><br><span class="line">310103 82 87 94</span><br><span class="line">310104 91 91 91</span><br><span class="line">310105 85 90 90</span><br><span class="line">310101</span><br><span class="line">310102</span><br><span class="line">310103</span><br><span class="line">310104</span><br><span class="line">310105</span><br><span class="line">999999</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 C</span><br><span class="line">1 M</span><br><span class="line">1 E</span><br><span class="line">1 A</span><br><span class="line">3 A</span><br><span class="line">N/A</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,best,index;</span><br><span class="line"><span class="keyword">int</span> course[<span class="number">4</span>],rank[<span class="number">4</span>];</span><br><span class="line">node()&#123;</span><br><span class="line">index=best=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;stu[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.course[flag]&gt;b.course[flag];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">node temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp.id);</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp.course[j]);</span><br><span class="line">sum+=temp.course[j];</span><br><span class="line">&#125;</span><br><span class="line">temp.course[<span class="number">0</span>]=(<span class="number">1.0</span>)*sum/<span class="number">3</span>+<span class="number">0.5</span>;</span><br><span class="line">stu[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (flag = <span class="number">0</span>; flag &lt; <span class="number">4</span>; ++flag)</span><br><span class="line">&#123;</span><br><span class="line">sort(stu,stu+n,cmp);</span><br><span class="line">stu[<span class="number">0</span>].rank[flag]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">stu[i].rank[flag]=stu[i<span class="number">-1</span>].rank[flag];</span><br><span class="line"><span class="keyword">if</span> (stu[i].course[flag]!=stu[i<span class="number">-1</span>].course[flag])</span><br><span class="line">&#123;</span><br><span class="line">stu[i].rank[flag]=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> best=stu[i].rank[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[i].rank[j]&lt;best)</span><br><span class="line">&#123;</span><br><span class="line">best=stu[i].rank[j];</span><br><span class="line">stu[i].index=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stu[i].best=best;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">char</span> c[]=&#123;<span class="string">"ACME"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (stu[j].id==a)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %c\n"</span>,stu[j].best,c[stu[j].index]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N/A\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;排序&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1013 Battle Over Cities (25 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1013/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1013/</id>
    <published>2019-09-03T04:35:58.000Z</published>
    <updated>2019-09-05T18:14:12.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">DFS求连通图</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly.</p><p>For example, if we have 3 cities and 2 highways connecting $city_1$-$city_2$ and $city_1$-$city_3$. Then if $city_1$ is occupied by the enemy, we must have 1 highway repaired, that is the highway $city_2$-$city_3$.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 3 numbers <em>N</em> (&lt;1000), <em>M</em> and <em>K</em>, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then <em>M</em> lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to <em>N</em>. Finally there is a line containing <em>K</em> numbers, which represent the cities we concern.</p><p><strong>output Specification:</strong></p><p>For each of the <em>K</em> cities, output in a line the number of highways need to be repaired if that city is lost.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 2 3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visit[root]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[root].size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (visit[v[root][i]]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(v[root][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">v[a].push_back(b);</span><br><span class="line">v[b].push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">fill(visit,visit+maxn,<span class="literal">false</span>);</span><br><span class="line">visit[a]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (visit[j]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">dfs(j);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;DFS求连通图&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1014 Waiting in Line (30 point(s))</title>
    <link href="https://www.runaccpeted.com/2019/09/03/A1014/"/>
    <id>https://www.runaccpeted.com/2019/09/03/A1014/</id>
    <published>2019-09-03T04:35:55.000Z</published>
    <updated>2019-09-05T18:10:33.911Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">queue</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>Suppose a bank has <em>N</em> windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p><ul><li>The space inside the yellow line in front of each window is enough to contain a line with <em>M</em> customers. Hence when all the <em>N</em> lines are full, all the customers after (and including) the (NM+1)st one will have to wait in a line behind the yellow line.</li><li>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number.</li><li>$customer_i$ will take $T_i$ minutes to have his/her transaction processed.</li><li>The first <em>N</em> customers are assumed to be served at 8:00am.</li></ul><p>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p><p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, $customer_1$ is served at $window_1$ while $customer_2$ is served at $window_2$.  $customer_3$ will wait in front of $window_1$ and $customer_4$ will wait in front of $window_2$. $Customer_5$ will wait behind the yellow line.</p><p>At 08:01, $customer_1$ is done and $customer_5$ enters the line in front of $window_1$ since that line seems shorter now. $Customer_2$will leave at 08:02, $customer_4$ at 08:06, $customer_3$  at 08:07, and finally $customer_5$ at 08:10.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: <em>N</em> (≤20, number of windows), <em>M</em> (≤10, the maximum capacity of each line inside the yellow line), <em>K</em> (≤1000, number of customers), and <em>Q</em> (≤1000, number of customer queries).</p><p>The next line contains <em>K</em> positive integers, which are the processing time of the <em>K</em> customers.</p><p>The last line contains <em>Q</em> positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to <em>K</em>.</p><p><strong>output Specification:</strong></p><p>For each of the <em>Q</em> customers, print in one line the time at which his/her transaction is finished, in the format <code>HH:MM</code> where <code>HH</code> is in [08, 17] and <code>MM</code> is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output <code>Sorry</code> instead.</p><p> <strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2 7 5</span><br><span class="line">1 2 6 4 3 534 2</span><br><span class="line">3 4 5 6 7</span><br></pre></td></tr></table></figure><p> <strong>Sample output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">08:07</span><br><span class="line">08:06</span><br><span class="line">08:10</span><br><span class="line">17:00</span><br><span class="line">Sorry</span><br></pre></td></tr></table></figure><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="4px">解析</font></h1><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a><font size="4px">AC代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> poptime, endtime;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, q, index = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;k, &amp;q);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; time(k + <span class="number">1</span>), result(k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;time[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;node&gt; window(n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; sorry(k + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(index &lt;= k) &#123;</span><br><span class="line">                window[j].q.push(time[index]);</span><br><span class="line">                <span class="keyword">if</span>(window[j].endtime &gt;= <span class="number">540</span>)</span><br><span class="line">                    sorry[index] = <span class="literal">true</span>;</span><br><span class="line">                window[j].endtime += time[index];</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">                    window[j].poptime = window[j].endtime;</span><br><span class="line">                result[index] = window[j].endtime;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(index &lt;= k) &#123;</span><br><span class="line">        <span class="keyword">int</span> tempmin = window[<span class="number">1</span>].poptime, tempwindow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(window[i].poptime &lt; tempmin) &#123;</span><br><span class="line">                tempwindow = i;</span><br><span class="line">                tempmin = window[i].poptime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        window[tempwindow].q.pop();</span><br><span class="line">        window[tempwindow].q.push(time[index]);</span><br><span class="line">        window[tempwindow].poptime +=  window[tempwindow].q.front();</span><br><span class="line">        <span class="keyword">if</span>(window[tempwindow].endtime &gt;= <span class="number">540</span>)</span><br><span class="line">            sorry[index] = <span class="literal">true</span>;</span><br><span class="line">        window[tempwindow].endtime += time[index];</span><br><span class="line">        result[index] = window[tempwindow].endtime;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> query, minute;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;query);</span><br><span class="line">        minute = result[query];</span><br><span class="line">        <span class="keyword">if</span>(sorry[query] == <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Sorry\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>,(minute + <span class="number">480</span>) / <span class="number">60</span>, (minute + <span class="number">480</span>) % <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;queue&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccpeted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccpeted.com/tags/PAT/"/>
    
  </entry>
  
</feed>

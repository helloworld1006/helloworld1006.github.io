<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W.T.的博客</title>
  
  <subtitle>Every day to be a little better</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.runaccpeted.com/"/>
  <updated>2019-10-14T12:47:07.883Z</updated>
  <id>https://www.runaccpeted.com/</id>
  
  <author>
    <name>Wang Ting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构学习</title>
    <link href="https://www.runaccpeted.com/2019/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.runaccpeted.com/2019/10/13/数据结构学习/</id>
    <published>2019-10-12T20:56:38.000Z</published>
    <updated>2019-10-14T12:47:07.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">时间复杂度，链表，树，图，查找，排序</blockquote><a id="more"></a><h1 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a><font size="4px">数据结构三要素</font></h1><h2 id="1-逻辑结构-设计"><a href="#1-逻辑结构-设计" class="headerlink" title="1. 逻辑结构 - 设计"></a><font size="3px">1. 逻辑结构 - 设计</font></h2><p>数据元素之间的逻辑关系，独立于计算机设计</p><p>线性结构：串，栈，队列，数组，线性表</p><p>非线性结构：集合，树，图</p><h2 id="2-存储结构-实现"><a href="#2-存储结构-实现" class="headerlink" title="2. 存储结构 - 实现"></a><font size="3px">2. 存储结构 - 实现</font></h2><p>计算机中的表示，依赖于计算机语言</p><p>顺序结构：相邻物理位置，可能产生较多外部碎片</p><p>链式结构：存储指针占用额外存储空间，只支持顺序存放</p><p>索引结构：附加索引表，(关键字，地址)</p><p>散列结构：存储冲突</p><h2 id="3-算法的实现"><a href="#3-算法的实现" class="headerlink" title="3. 算法的实现"></a><font size="3px">3. 算法的实现</font></h2><p>包括算法的定义和实现</p><h1 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a><font size="4px">算法特性</font></h1><p>有穷性，确定性，可行性，输入，输出</p><p>好的算法：健壮性【非法输入】，可读性，正确性【正确求解】，效率与低存储需求</p><h1 id="栈Stack"><a href="#栈Stack" class="headerlink" title="栈Stack"></a><font size="4px">栈Stack</font></h1><p>先进后出原则</p><p>初始 top=-1</p><p>进栈 ++top</p><p>出栈 top–</p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><h1 id="原文-1"><a href="#原文-1" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><h1 id="原文-2"><a href="#原文-2" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><h1 id="原文-3"><a href="#原文-3" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2019/10/13/数据结构学习/ac.png" class="full-image"><div class="note warning"><p>使 </p></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;时间复杂度，链表，树，图，查找，排序&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://www.runaccpeted.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.runaccpeted.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot</title>
    <link href="https://www.runaccpeted.com/2019/10/07/SpringBoot/"/>
    <id>https://www.runaccpeted.com/2019/10/07/SpringBoot/</id>
    <published>2019-10-07T14:22:13.000Z</published>
    <updated>2019-10-20T08:42:57.763Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">SpringBoot入门</blockquote><a id="more"></a><p><a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/documentation-overview.html#boot-documentation" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/documentation-overview.html#boot-documentation</a></p><h1 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a><font size="4px">Maven配置</font></h1><p>下载maven3.3.9 <a href="http://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/" target="_blank" rel="noopener">http://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/</a></p><p>解压进入setting.xml添加插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--国内镜像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jdk --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IntelliJ IDEA中配置</p><p><img src="/2019/10/07/SpringBoot/maven.png" alt></p><h1 id="第一个SpringBoot项目"><a href="#第一个SpringBoot项目" class="headerlink" title="第一个SpringBoot项目"></a><font size="4px">第一个SpringBoot项目</font></h1><p>新建Maven project</p><p>在pom.xml下配置springboot</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建Application.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.runaccpeted"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//得到所有bean name</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">getBeans</span><span class="params">(ApplicationContext ac)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            String[] str = ac.getBeanDefinitionNames();</span><br><span class="line">            <span class="keyword">for</span> (String s : str) &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello!!!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.1.6.RELEASE)</span><br><span class="line"> </span><br><span class="line"> Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br></pre></td></tr></table></figure><p>运行</p><p><img src="/2019/10/07/SpringBoot/localhost.png" alt></p><h1 id="SpringBootApplication自动配置"><a href="#SpringBootApplication自动配置" class="headerlink" title="@SpringBootApplication自动配置"></a><font size="4px">@SpringBootApplication自动配置</font></h1><p>注解标注为自动配置</p><p>@SpringBootConfiguration 注明为配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类也是容器中的一个组件@Component</p><p>@EnableAutoConfiguration 开启自动配置功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.TypeExcludeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan.Filter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class</span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EnableAutoConfiguration开启自动配置"><a href="#EnableAutoConfiguration开启自动配置" class="headerlink" title="@EnableAutoConfiguration开启自动配置"></a><font size="3px">@EnableAutoConfiguration开启自动配置</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AutoConfigurationPackage自动配置包"><a href="#AutoConfigurationPackage自动配置包" class="headerlink" title="@AutoConfigurationPackage自动配置包"></a><font size="3px">@AutoConfigurationPackage自动配置包</font></h2><p>@Import({Registrar.class}) 导入注册的组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigurationPackages.Registrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Registrar.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Register-class"><a href="#Register-class" class="headerlink" title="Register.class"></a><font size="3px">Register.class</font></h3><p><font color="#f00">扫描主配置类所在包及子包</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">        Registrar() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">            AutoConfigurationPackages.register(registry, (<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata)).getPackageName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> AutoConfigurationPackages.PackageImport(metadata));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a><font size="3px">@Import({AutoConfigurationImportSelector.class})</font></h2><p>导入组件</p><p>AutoConfigurationImportSelector 组件选择器</p><p>将需要的组件以全类名的形式添加到容器中</p><p>给容器导入大量自动配置类xxxAutoConfiguration，给容器中导入场景所需组件并配置</p><p>如何知道配置类？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br></pre></td></tr></table></figure><p>SpringFactoriesLoader内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LoadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line"> Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ?  classLoader.getResources(<span class="string">"META-INF/spring.factories"</span>) : ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring-boot-autoconfigure-2.1.6.RELEASE.jar下/META-INF/spring.factories</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>写明了配置类全路径名</p><p><font color="#f00">Spring Boot在启动时从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定值，作为自动配置类路径，进行自动配置</font></p><p>所有的配置声明在 org/springframework/boot/autoconfigure</p><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a><font size="3px">自动配置原理</font></h2><p>xxxxAutoConfiguration 对应 xxxxProperties</p><p><strong>SpringDataWebAutoConfiguration.java</strong></p><p>@EnableConfigurationProperties({SpringDataWebProperties.class})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//启动自动配置</span></span><br><span class="line"><span class="meta">@EnableSpringDataWebSupport</span> </span><br><span class="line"><span class="comment">//底层为@Conditional，判断是否满足指定条件，整个配置类里面的配置根据判断生效@Conditional(&#123;OnWebApplicationCondition.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(</span><br><span class="line">    type = Type.SERVLET</span><br><span class="line">)</span><br><span class="line"><span class="comment">//判断当前项目中是否有这个类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;PageableHandlerMethodArgumentResolver.class, WebMvcConfigurer.class&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(&#123;PageableHandlerMethodArgumentResolver.class&#125;)</span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能，将配置文件中的值和SpringDataWebProperties绑定起来，将SpringDataWebProperties加载到类中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;SpringDataWebProperties.class&#125;)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123;RepositoryRestMvcAutoConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataWebAutoConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="comment">//properties已经和springboot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringDataWebProperties properties;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SpringDataWebAutoConfiguration</span><span class="params">(SpringDataWebProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//容器中添加组件，某些值从properties中获取</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageableHandlerMethodArgumentResolverCustomizer <span class="title">pageableCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (resolver) -&gt; &#123;</span><br><span class="line">            Pageable pageable = <span class="keyword">this</span>.properties.getPageable();</span><br><span class="line">            resolver.setPageParameterName(pageable.getPageParameter());</span><br><span class="line">            resolver.setSizeParameterName(pageable.getSizeParameter());</span><br><span class="line">            resolver.setOneIndexedParameters(pageable.isOneIndexedParameters());</span><br><span class="line">            resolver.setPrefix(pageable.getPrefix());</span><br><span class="line">            resolver.setQualifierDelimiter(pageable.getQualifierDelimiter());</span><br><span class="line">            resolver.setFallbackPageable(PageRequest.of(<span class="number">0</span>, pageable.getDefaultPageSize()));</span><br><span class="line">            resolver.setMaxPageSize(pageable.getMaxPageSize());</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>SpringDataWebProperties.java</p><p>这里实际表明可以配置的值 spring.data.web.x=?</p><p>所有配置文件中能配置的属性都在xxxxProperties类中封装，配置文件能配置什么就可以参照所需功能对应的属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.data.web"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataWebProperties</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a><font size="3px">精髓</font></h2><ol><li>SpringBoot启动加载大量自动配置类</li><li>需要的功能有没有springboot默认写好的自动配置类</li><li>看自动配置类中到底配置了那些组件</li><li>容器中自动配置类添加组件时，从properties类中获取属性，指定属性值</li></ol><p>AutoConfiguration –&gt; 添加组件 –&gt; Properties封装配置文件相关属性</p><h2 id="自动配置报告"><a href="#自动配置报告" class="headerlink" title="自动配置报告"></a><font size="3px">自动配置报告</font></h2><p>debug=true</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   DispatcherServletAutoConfiguration matched:</span><br><span class="line">      - @ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet' (OnClassCondition)</span><br><span class="line">      - found 'session' scope (OnWebApplicationCondition)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Negative matches:</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - @ConditionalOnClass did not find required class 'org.aspectj.lang.annotation.Aspect' (OnClassCondition)</span><br></pre></td></tr></table></figure><h1 id="Spring-Initializer创建SpringBoot"><a href="#Spring-Initializer创建SpringBoot" class="headerlink" title="Spring Initializer创建SpringBoot"></a><font size="4px">Spring Initializer创建SpringBoot</font></h1><p>new – &gt; project –&gt; Spring Initializr</p><p><img src="/2019/10/07/SpringBoot/springInit.png" alt></p><p><img src="/2019/10/07/SpringBoot/springInit2.png" alt></p><p><img src="/2019/10/07/SpringBoot/springInit3.png" alt></p><p>直接联网生成一个初步的完备的springboot项目</p><p><img src="/2019/10/07/SpringBoot/springbootInit.png" alt></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.runaccpeted<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resources文件夹</p><p>—- static 保存静态资源 js css images</p><p>—- templates 保存所有模板页面，springboot默认jar包使用嵌入式tomcat，不支持jsp页面，支持模板引擎freemarker，thymeleaf</p><p>—- application.properties 配置文件</p><p>​      eg. server.port=8081</p><h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a><font size="4px">SpringBoot配置文件</font></h1><p>有两种方式，文件名固定</p><ul><li><p>applicaton.properities</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br></pre></td></tr></table></figure></li><li><p>application.yml </p><p>YAML Ain’t Markup Language</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a><font size="3px">application.yml</font></h2><p>键值对</p><p>空格缩进控制层级，左对齐的是一级</p><p>大小写敏感</p><ul><li><p>字面量：</p><p>k: v: 字面量直接写，不加引号</p><p>双引号：不会转义字符串中的特殊字符，特殊字符作为本身想表示的意思</p><p>name: “zhang \n” == “zhang 换行”</p><p>单引号：会转义字符串中的特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>name: ‘zhang \n’ == ‘zhang \n’</p></li><li><p>对象：</p><p>k: v: 值</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span><span class="string">&#123;age:18,name:zhangsan&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>数组</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span><span class="string">&#123;cat,dog,pig&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置springboot"><a href="#配置springboot" class="headerlink" title="配置springboot"></a><font size="3px">配置springboot</font></h3><p>  application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">  id:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  uname:</span> <span class="string">wt</span></span><br><span class="line"><span class="attr">  pwd:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>在pom.xml中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User.java</p><p>配置@ConfigurationProperties  让springboot将application.yml中的配置项对应给User的bean</p><p>User 注册为一个bean @Component</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUname</span><span class="params">(String uname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uname = uname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", uname='"</span> + uname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加单元测试依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloworldApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Out: User{id=1, uname=’wt’, pwd=’123’}</p><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a><font size="3px">application.properties</font></h2><h3 id="配置SpringBoot"><a href="#配置SpringBoot" class="headerlink" title="配置SpringBoot"></a><font size="4px">配置SpringBoot</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.id=1</span><br><span class="line">user.uname=wt</span><br><span class="line">user.pwd=123</span><br></pre></td></tr></table></figure><h2 id="Value-VS-ConfigurationProperities"><a href="#Value-VS-ConfigurationProperities" class="headerlink" title="@Value VS @ConfigurationProperities"></a><font size="3px">@Value VS @ConfigurationProperities</font></h2><p>Value直接添加到变量上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;user.id&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;user.uname&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String uname;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;user.pwd&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br></pre></td></tr></table></figure><p>ConfigurationProperities添加到类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>比较</p><table><thead><tr><th></th><th>@ConfigurationProperities</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的值</td><td>一一对应</td></tr><tr><td>松散语法</td><td>支持，user.uname name 可以对应</td><td>一一对应</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据检验</td><td>@Size(min = 0) 支持</td><td>@Size(min = 0)</td></tr><tr><td>复杂类型注入</td><td>支持map，list，set</td><td>不支持</td></tr></tbody></table><h2 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a><font size="3px">@PropertySource</font></h2><p>User.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user.id=1</span><br><span class="line">user.uname=wt</span><br><span class="line">user.pwd=123456</span><br></pre></td></tr></table></figure><p>指定特定配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:User.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="ImportSource"><a href="#ImportSource" class="headerlink" title="@ImportSource"></a><font size="3px">@ImportSource</font></h2><p>导入Spring 配置文件，让内容生效</p><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"u"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">value</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解</p><p>@ImportResource(locations= {“classpath:beans.xml”})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations= &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloworldApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ac;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = ac.getBean(User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多个profile环境"><a href="#多个profile环境" class="headerlink" title="多个profile环境"></a><font size="4px">多个profile环境</font></h1><h2 id="application-properties-1"><a href="#application-properties-1" class="headerlink" title="application.properties"></a><font size="3px">application.properties</font></h2><p>新建多个配置文件</p><p>application-{环境}.properties</p><p>application-dev.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8082</span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=8081</span><br><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p> Tomcat started on port(s): 8082 (http) with context path ‘’</p><h2 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a><font size="3px">application.yml</font></h2><p>多个代码块</p><p>— 分割文档</p><p>spring.profiles.active 指定哪个profiles被激活，默认为8081</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure><p>Tomcat started on port(s): 8082 (http) with context path ‘’</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a><font size="3px">命令行</font></h2><p>–spring.profiles.active=dev</p><p>-Dsping.profiles.active=dev</p><h1 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a><font size="4px">配置文件加载位置</font></h1><p>file:./config/</p><p>file:./</p><p>classpath:/config/</p><p>classpath:/</p><p>优先级从高到低，高优先级会覆盖低优先级内容</p><p>springboot会从4个位置全部加载配置文件，可以实现互补配置</p><p><strong>config/application.properties</strong> 下配置 server.port=8081</p><p><strong>src/main/resources/application.properties</strong> 下配置 server.servlet.context-path=/boot 项目根目录</p><p>实现 访问 <a href="http://localhost:8081/boot/test" target="_blank" rel="noopener">http://localhost:8081/boot/test</a></p><h2 id="命令行-1"><a href="#命令行-1" class="headerlink" title="命令行"></a><font size="3px">命令行</font></h2><p>打包项目</p><p>maven projects –&gt; package –&gt; target下生成一个jar文件</p><p><img src="/2019/10/07/SpringBoot/package1.png" alt></p><p><img src="/2019/10/07/SpringBoot/package2.png" alt></p><p>命令行</p><p> –spring.config.location=/Users/Learning/application.properties</p><p><img src="/2019/10/07/SpringBoot/terminal.png" alt></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a><font size="4px">日志</font></h1><p>日志门面(抽象)SLF4j和日志实现(实现类)logback</p><p> <a href="http://www.slf4j.org/" target="_blank" rel="noopener">Simple Logging Facade for Java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slf4j-api.jar – slf4j-xx.jar – xx.jar</p><p>抽象类 – 适配层 – 实现类</p><p><img src="/2019/10/07/SpringBoot/slf4j.png" alt></p><p>统一所有日志:</p><p>排除其他日志框架</p><p>用中间包替换原有的日志框架</p><p>导入实现包</p><p><img src="/2019/10/07/SpringBoot/legacy.png" alt></p><p>SpringBoot中的log引入</p><p><img src="/2019/10/07/SpringBoot/springlog.png" alt></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; --&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;artifactId&gt;log4j-to-slf4j&lt;/artifactId&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a><font size="3px">实践</font></h2><p>日志级别 trace &lt; debug &lt; info &lt; warn &lt; error</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line">Logger logger= LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">logger.trace(<span class="string">"trace"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug"</span>);</span><br><span class="line">logger.info(<span class="string">"info"</span>);</span><br><span class="line">logger.warn(<span class="string">"warn"</span>);</span><br><span class="line">logger.error(<span class="string">"error"</span>);</span><br></pre></td></tr></table></figure><p>默认日志级别info</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.com.runaccpeted=trace</span><br></pre></td></tr></table></figure><p>设定日志级别</p><p><img src="/2019/10/07/SpringBoot/logresult.png" alt></p><p>指定日志文件名和路径</p><p>不指定默认为控制台</p><p>生成在项目根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging.file.name=spring.log</span><br><span class="line">logging.file.path=/log #好像没什么用</span><br></pre></td></tr></table></figure><p><img src="/2019/10/07/SpringBoot/logpath.png" alt></p><p>日志格式</p><p>%d 日期时间</p><p>%thread 线程</p><p>%-5level 级别从左显示5个字符宽度</p><p>%logger{50} logger名字最长50个字符，否则按照句点分割</p><p>%msg 日志消息</p><p>%n 换行符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#控制台日志格式</span><br><span class="line">logging.pattern.console=%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; &#123;%thread&#125; %-5level %logger&#123;50&#125; - %msg%n</span><br><span class="line"></span><br><span class="line">#文件日志格式</span><br><span class="line">logging.pattern.file=%d&#123;yyyy-MM-dd&#125; &#123;%thread&#125; %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure><p>e.g.</p><p>2019-10-07 16:46:47.726 {main} INFO  c.r.helloworld.HelloworldApplicationTests - Started HelloworldApplicationTests in 5.292 seconds (JVM running for 8.207)</p><p><strong>默认配置</strong></p><p>spring-boot-2.2.0.RELEASE</p><p>org.springframework.boot.logging.logback.defaults.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.validator.internal.util.Version"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指定配置"><a href="#指定配置" class="headerlink" title="指定配置"></a><font size="3px">指定配置</font></h2><p>给类路径下放每个日志框架自己的配置文件</p><table><thead><tr><th align="left">Logging System</th><th align="left">Customization</th></tr></thead><tbody><tr><td align="left">Logback</td><td align="left"><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td></tr><tr><td align="left">Log4j2</td><td align="left"><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td align="left">JDK (Java Util Logging)</td><td align="left"><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接被日志框架识别</p><p>logback-spring.xml 日志框架不直接加载日志配置项，SpringBoot解析日志配置，使用SpringBoot高级profile功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.properties中配置spring.profiles.active=staging</p><h2 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a><font size="3px">切换日志框架</font></h2><h3 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a><font size="3px">log4j</font></h3><p>剔除原有</p><p>log4j-to-slf4j</p><p>ch.qos.logback</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加log4j</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/10/07/SpringBoot/log4j.png" alt></p><p>添加log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># set log levels</span><br><span class="line">log4j.rootLogger=debug,stdout,D</span><br><span class="line"></span><br><span class="line"># 输出到控制台</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.Target=System.out</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;ABSOLUTE&#125; ---&gt; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line"># 输出到日志文件</span><br><span class="line">log4j.appender.D=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line"># 项目根目录开始</span><br><span class="line">log4j.appender.D.File=logs/log.log </span><br><span class="line">log4j.appender.D.Append=true</span><br><span class="line">log4j.appender.D.Threshold=DEBUG</span><br><span class="line">log4j.appender.D.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.D.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] - [%p] %m%n</span><br></pre></td></tr></table></figure><p>切换记录类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line">Logger logger = Logger.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">logger.trace(<span class="string">"trace"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug"</span>);</span><br><span class="line">logger.info(<span class="string">"info"</span>);</span><br><span class="line">logger.warn(<span class="string">"warn"</span>);</span><br><span class="line">logger.error(<span class="string">"error"</span>);</span><br></pre></td></tr></table></figure><p>记录日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main:7073] - [DEBUG] debug</span><br><span class="line">[main:7073] - [INFO] info</span><br><span class="line">[main:7074] - [WARN] warn</span><br><span class="line">[main:7074] - [ERROR] error</span><br></pre></td></tr></table></figure><p>❌不推荐❌</p><h3 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a><font size="3px">log4j2</font></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SpringBoot与Web开发"><a href="#SpringBoot与Web开发" class="headerlink" title="SpringBoot与Web开发"></a><font size="4px">SpringBoot与Web开发</font></h1><h2 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a><font size="3px">静态资源映射</font></h2><p>WebMvcAutoConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//静态资源配置 </span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line"><span class="comment">//配置webjar</span></span><br><span class="line">      customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line"><span class="comment">//配置自定义静态资源</span></span><br><span class="line">      customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/webjars/** 映射到/META-INF/resources/webjars/</p><p><a href="https://www.webjars.org/" target="_blank" rel="noopener">webjar</a></p><p>将js，css以jar的形式加载到项目中</p><p><img src="/2019/10/07/SpringBoot/webjar.png" alt></p><p>导入jquery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入的maven依赖</p><p><img src="/2019/10/07/SpringBoot/jquery.png" alt></p><p>访问路径：localhost:8080/webjars/jquery/3.3.1/jquery.js</p><h2 id="文件自定义静态资源"><a href="#文件自定义静态资源" class="headerlink" title="文件自定义静态资源"></a><font size="3px">文件自定义静态资源</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.resources"</span>, ignoreUnknownFields = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceProperties</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line"><span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认在下列路径找静态资源</p><p>/ == 项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;</span><br><span class="line">&quot;classpath:/resources/&quot;</span><br><span class="line">&quot;classpath:/static/&quot; </span><br><span class="line">&quot;classpath:/public/</span><br></pre></td></tr></table></figure><p>resources/resources/a.txt == Hello</p><p><img src="/2019/10/07/SpringBoot/resources.png" alt></p><p>resources/static/a.txt == hello world</p><p>显示的还是Hello</p><h2 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a><font size="3px">欢迎页</font></h2><p>WebMvcAutoConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line"><span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line"><span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line"><span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebMvcProperties.java</p><p>getStaticPathPattern() 静态资源文件夹下所有index.html页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcProperties</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String staticPathPattern = <span class="string">"/**"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resources/public/index.html == index</p><p><img src="/2019/10/07/SpringBoot/index.png" alt></p><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a><font size="3px">图标</font></h2><p>静态资源文件夹下所有favicon.ico</p><h1 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a><font size="4px">Thymeleaf模板引擎</font></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 更换版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.11.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- layout-dialect  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;thymeleaf-layout-dialect.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ThymeleafAutoConfiguration"><a href="#ThymeleafAutoConfiguration" class="headerlink" title="ThymeleafAutoConfiguration"></a><font size="3px">ThymeleafAutoConfiguration</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ThymeleafProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="ThymeleafProperties"><a href="#ThymeleafProperties" class="headerlink" title="ThymeleafProperties"></a><font size="3px">ThymeleafProperties</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br></pre></td></tr></table></figure><h2 id="TestController"><a href="#TestController" class="headerlink" title="TestController"></a><font size="3px">TestController</font></h2><p>对应 classpath:/templates/ 下 .html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hello.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello """"</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2019/10/07/SpringBoot/thymeleaf.png" alt></p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a><font size="3px">语法规则</font></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="th"><a href="#th" class="headerlink" title="th:"></a><font size="3px">th:</font></h3><p>th:text 改变当前元素里面的文本内容</p><p>th: 改变组件任意属性</p><p><img src="/2019/10/07/SpringBoot/th.png" alt></p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a><font size="3px">表达式</font></h3><ul><li><p>Simple expressions表达式语法: </p><ul><li><p>VariableExpressions获取变量值: ${…} </p><ul><li><p>获取对象属性，调用方法</p><ul><li><p>使用内置基本对象：</p><p><code>#ctx: the context object.</code></p><p><code>#vars: the context variables.</code></p><p>  <code>#locale: the context locale.#request: (only in Web Contexts) the HttpServletRequest object.</code></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  $&#123;foo&#125;</span><br><span class="line">  $&#123;param.foo&#125;</span><br><span class="line">  $&#123;param.size()&#125;</span><br><span class="line">  $&#123;param.isEmpty()&#125;</span><br><span class="line">$&#123;param.containKey('foo')&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><pre><code>    `#response: (only in Web Contexts) the HttpServletResponse object.    `    `#session: (only in Web Contexts) the HttpSession object.`    ​        ${session.foo}     `#servletContext: (only in Web Contexts) the **ServletContext** object.`    ​        ${application.foo}- 内置工具对象            `#execInfo: information about the template being processed.`     `#messages: methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{...} syntax. `    `#uris: methods for escaping parts of URLs/URIs`    `#conversions: methods for executing the configured conversion service (if any).`    `#dates: methods for java.util.Date objects: formatting, component extraction, etc.`    `#calendars: analogous to #dates , but for java.util.Calendar objects.`    `#numbers: methods for formatting numeric objects.`          `#strings: methods for String objects: contains, startsWith, prepending/appending, etc.`    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;#strings.toString(obj)&#125;</span><br></pre></td></tr></table></figure>    `#objects: methods for objects in general.`    `#bools: methods for boolean evaluation.`    `#arrays: methods for arrays.`    `#lists: methods for lists.`    `#sets: methods for sets.`    `#maps: methods for maps.`    `#aggregates: methods for creating aggregates on arrays or collections.`    `#ids: methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).`</code></pre><ul><li><p>SelectionVariableExpressions选择表达式，功能同${}: *{…} </p><p>配合th:object使用，对象成员变量    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;age&#125;?: '(no age specified)'"</span>&gt;</span>27<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>MessageExpressions获取国际化内容: #{…} </p></li><li><p>LinkURLExpressions定义URL: @{…} </p><pre><code>th:href=&quot;@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}</code></pre></li><li><p>Fragment Expressions 片段引用表达式: ~{…}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons :: main&#125;"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Literals 字面量</p><ul><li>Text literals: ‘one text’ , ‘Another one!’ ,… </li><li>Number literals: 0 , 34 , 3.0 , 12.3 ,… </li><li>Boolean literals: true , false</li><li>Nullliteral: null</li><li>Literal tokens: one , sometext , main ,… </li></ul></li><li><p>Text operations: 文本</p><ul><li>Stringconcatenation: +</li><li>Literal substitutions: |The name is ${name}|</li></ul></li><li><p>Arithmetic operations:  数学运算</p><ul><li>Binaryoperators: +, -, *, /, %</li><li>Minussign(unaryoperator): - </li></ul></li><li><p>Boolean operations: 布尔运算</p><ul><li>Binary operators: and , or</li><li>Boolean negation (unary operator): ! , not</li></ul></li><li><p>Comparisons and equality: 比较运算</p><ul><li>Comparators: &gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</li><li>Equality operators: == , != ( eq , ne ) </li></ul></li><li><p>Conditional operators: 条件运算符 三元</p><ul><li>If-then: (if) ? (then)</li><li>If-then-else: (if) ? (then) : (else) </li><li>Default: (value) ?: (defaultvalue)</li></ul></li><li><p>Special tokens: 不作为</p><ul><li>No-Operation: _ </li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a><font size="3px" color="#f00"><strong>实例</strong></font></h3><p>值来自map</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span></span><br><span class="line">   文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>TestController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HashMap&lt;String,String&gt; map)</span></span>&#123;           map.put(<span class="string">"hello"</span>,<span class="string">"您好"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现前后端分离</p><p><img src="/2019/10/07/SpringBoot/th-text.png" alt></p><h3 id="实例2-th-each"><a href="#实例2-th-each" class="headerlink" title="实例2 th:each"></a><font size="3px">实例2 th:each</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(HashMap&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     map.put(<span class="string">"hello"</span>,<span class="string">"&lt;h1&gt;您好&lt;/h1&gt;"</span>);</span><br><span class="line">     map.put(<span class="string">"user"</span>, Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>));</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 转义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不转义 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- [[]] = th:text --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"u:$&#123;user&#125;"</span>&gt;</span>[[$&#123;u&#125;]]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"u:$&#123;user&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;u&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现</p><p><img src="/2019/10/07/SpringBoot/th-each.png" alt></p><h1 id="web自动配置"><a href="#web自动配置" class="headerlink" title="web自动配置"></a><font size="4px">web自动配置</font></h1><p><a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-webservices" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-webservices</a></p><h2 id="7-1-1-Spring-MVC-Auto-configuration"><a href="#7-1-1-Spring-MVC-Auto-configuration" class="headerlink" title="7.1.1. Spring MVC Auto-configuration"></a><font size="3px">7.1.1. Spring MVC Auto-configuration</font></h2><p><b><font color="#f00">org.springframework.boot.autoconfigure.web</font></b></p><p>Spring Boot provides auto-configuration for Spring MVC that works well with most applications. SpringBoot提供了SpringMVC的自动配置</p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p><p>自动配置添加了以下Spring配置：</p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><p>在WebMvcAutoConfiguration中实现<code>ContentNegotiatingViewResolver</code>,组合所有的视图解析器</p><p><font color="#515083"><strong>自动配置ViewResolver视图解析器，根据方法的返回值视图对象决定对视图对象的转发？重定向？</strong></font></p><p><strong><code>WebMvcAutoConfiguration.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(ViewResolver.class)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"viewResolver"</span>, value = ContentNegotiatingViewResolver.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">  resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));</span><br><span class="line"><span class="comment">// ContentNegotiatingViewResolver uses all the other view resolvers to locate</span></span><br><span class="line"><span class="comment">// a view so it should have a high precedence</span></span><br><span class="line">resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>ContentNegotiatingViewResolver</code></strong></p><p>从bean工厂加载所有视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentNegotiatingViewResolver</span> <span class="keyword">extends</span> <span class="title">WebApplicationObjectSupport</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">ViewResolver</span>, <span class="title">Ordered</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServletContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">Collection&lt;ViewResolver&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(obtainApplicationContext(), ViewResolver.class).values();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.viewResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.viewResolvers = <span class="keyword">new</span> ArrayList&lt;&gt;(matchingBeans.size());</span><br><span class="line"><span class="keyword">for</span> (ViewResolver viewResolver : matchingBeans) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != viewResolver) &#123;</span><br><span class="line"><span class="keyword">this</span>.viewResolvers.add(viewResolver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.viewResolvers.size(); i++) &#123;</span><br><span class="line">ViewResolver vr = <span class="keyword">this</span>.viewResolvers.get(i);</span><br><span class="line"><span class="keyword">if</span> (matchingBeans.contains(vr)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">String name = vr.getClass().getName() + i;</span><br><span class="line">obtainApplicationContext().getAutowireCapableBeanFactory().initializeBean(vr, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.viewResolvers);</span><br><span class="line"><span class="keyword">this</span>.cnmFactoryBean.setServletContext(servletContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>编写自定义视图解析器</code></strong></p><p>实现ViewResolver接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myView</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ViewResolver r=<span class="keyword">new</span> myViewResolver();</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">myViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">later in this document</a>)).</p></li><li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p><p><font color="#515083"><strong><code>Converter</code> 转换器，将public String test(){ return “hello”;}–&gt; hello.html</strong></font></p><p><font color="#515083"><strong><code>Formatter</code> 格式化器，将2017-10-9 –&gt; Date</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//WebMvcConfiguration</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WebConversionService conversionService = <span class="keyword">new</span> WebConversionService(<span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">addFormatters(conversionService);</span><br><span class="line"><span class="keyword">return</span> conversionService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcProperties</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Date format to use. For instance, `dd/MM/yyyy`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="#515083"><strong>自己添加的格式化转换器，只需要放在容器中</strong></font></p></li><li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">later in this document</a>).</p><p><font color="#515083"><strong>SpringMVC用来转换Http请求和响应的: User对象转为Json发送到前台</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMessageConverters</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">HttpMessageConverter</span>&lt;?&gt;&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; converters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpMessageConverters从容器中确定，获取所有的HttpMessageConverter</p><p><font color="#515083"><strong>给容器中加HttpMessageConverter，只需要将组件注册到容器中</strong></font></p></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-message-codes" target="_blank" rel="noopener">later in this document</a>).</p><p><font color="#515083"><strong>定义错误代码格式</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebMvcConfiguration</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageCodesResolver <span class="title">getMessageCodesResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getMessageCodesResolverFormat() != <span class="keyword">null</span>) &#123;</span><br><span class="line">DefaultMessageCodesResolver resolver = <span class="keyword">new</span> DefaultMessageCodesResolver();</span><br><span class="line">resolver.setMessageCodeFormatter(<span class="keyword">this</span>.mvcProperties.getMessageCodesResolverFormat());</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//DefaultMessageCodesResolver</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Format implements MessageCodeFormatter &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prefix the error code at the beginning of the generated message code. e.g.:</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> errorCode + "." + object name + "." + field&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">PREFIX_ERROR_CODE &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(String errorCode, @Nullable String objectName, @Nullable String field)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> toDelimitedString(errorCode, objectName, field);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Postfix the error code at the end of the generated message code. e.g.:</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> object name + "." + field + "." + errorCode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">POSTFIX_ERROR_CODE &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(String errorCode, @Nullable String objectName, @Nullable String field)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> toDelimitedString(objectName, field, errorCode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Static <code>index.html</code> support.</p></li><li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">later in this document</a>).</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">later in this document</a>).</p><p><font color="#515083"><strong>从容器中取Bean this.beanFactory.getBean()</strong></font> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableWebBindingInitializer <span class="title">getConfigurableWebBindingInitializer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">FormattingConversionService mvcConversionService, Validator mvcValidator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.beanFactory.getBean(ConfigurableWebBindingInitializer.class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getConfigurableWebBindingInitializer(mvcConversionService, mvcValidator);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> ConfigurableWebBindingInitializer&#125; to use for</span></span><br><span class="line"><span class="comment"> * initializing all &#123;<span class="doctag">@link</span> WebDataBinder&#125; instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> ConfigurableWebBindingInitializer <span class="title">getConfigurableWebBindingInitializer</span><span class="params">(&#125;</span></span></span><br></pre></td></tr></table></figure></li></ul><p>If you want to keep Spring Boot MVC features and you want to add additional <a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a <code>WebMvcRegistrationsAdapter</code> instance to provide such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><p>编写一个配置类 标注为@Configuration，实现<b><font color="#f00">WebMvcConfigurer</font></b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvc</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/Hello"</span>).setViewName(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a><font size="3px">原理</font></h2><p>WebMvcAutoConfiguration在做其他自动配置时导入，@Import(EnableWebMvcConfiguration.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//继承自父类DelegatingWebMvcConfiguration</span></span><br><span class="line">    <span class="comment">//从容器中获取所有配置类WebMvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//DelegatingWebMvcConfiguration.java</span></span><br><span class="line">    <span class="comment">//如需视图解析器</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addViewControllers(registry);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WebMvcConfigurerComposite configurers</span></span><br><span class="line"><span class="comment">//将所有WebMvcConfigurer相关配置都调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (WebMvcConfigurer delegate : <span class="keyword">this</span>.delegates) &#123;</span><br><span class="line">delegate.addViewControllers(registry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ViewControllerRegistry.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewControllerRegistration <span class="title">addViewController</span><span class="params">(String urlPath)</span> </span>&#123;</span><br><span class="line">ViewControllerRegistration registration = <span class="keyword">new</span> ViewControllerRegistration(urlPath);</span><br><span class="line">registration.setApplicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line"><span class="keyword">this</span>.registrations.add(registration);</span><br><span class="line"><span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>故容器中所有的WebMvcConfigurer相关配置都会被调用</p><p>自定义配置类也会被调用</p><h2 id="修改SpringBoot默认配置"><a href="#修改SpringBoot默认配置" class="headerlink" title="修改SpringBoot默认配置"></a><font size="3px">修改SpringBoot默认配置</font></h2><p>SpringBoot在自动配置组件的时候，先看容器中有没有用户自己配置的bean，没有才进行配置，还可以将用户配置的和自动配置的组合起来</p><h2 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a><font size="3px">全面接管SpringMVC</font></h2><p>@EnableWebMvc 使自动配置失效</p><p>WebMvcAutoConfiguration只有当容器中没有WebMvcConfigurationSupport时才生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a><font size="4px">index.html</font></h1><p>到templates下找 .html</p><ol><li><p>使用@RequestMapping({“/“,”index.html”})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/"</span>,<span class="string">"index.html"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用自定义配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvc</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="加载css-jquery-th-href-th-src"><a href="#加载css-jquery-th-href-th-src" class="headerlink" title="加载css,jquery th:href,th:src"></a><font size="4px">加载css,jquery th:href,th:src</font></h1><p>th:src=”@{/webjars/jquery/3.3.1/jquery.js}</p><p>th:href=”@{/webjars/bootstrap/4.0.0/css/bootstrap.css}</p><p>而且是自适应的 项目server.servlet.context-path=/web 目录改为web，js，css仍然能访问到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/webjars/jquery/3.3.1/jquery.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如传入一个json数据，用ajax异步读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setId(<span class="number">0</span>);</span><br><span class="line">        u.setUname(<span class="string">"a"</span>);</span><br><span class="line">        u.setPwd(<span class="string">"123"</span>);</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>前端</p><p>$.post(“请求映射”,”请求参数”,”返回数据”,”响应方式”);</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/webjars/jquery/3.3.1/jquery.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $.post(<span class="string">"./user"</span>,<span class="string">""</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line"><span class="javascript">            &#125;,<span class="string">"html"</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个 Bootstrap 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>重置窗口大小，查看响应式效果！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="/2019/10/07/SpringBoot/ajax.png" alt></p><h1 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a><font size="4px">国际化</font></h1><p>新建i18n文件，新建login.properties，login_en_US.properties，login_zh_CN.properties</p><p><img src="/2019/10/07/SpringBoot/i18n.png" alt></p><p>Spring中配置国际化：使用ResourceBundleMessageSource管理，fmt:message取出内容</p><p>SpringBoot：</p><p>MessageSourceAutoConfiguration中实现了注册ResourceBundleMessageSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceProperties</span> </span>&#123;</span><br><span class="line">  <span class="comment">//配置文件可以直接放在messages.properties下</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Comma-separated list of basenames (essentially a fully-qualified classpath location), each following the ResourceBundle convention with relaxed support for slash based locations. If it doesn't contain a package qualifier (such as "org.mypackage"), it will be resolved from the classpath root.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String basename = <span class="string">"messages"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">messageSource.setBasenames(StringUtils</span><br><span class="line">.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">&#125;</span><br><span class="line">messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line"><span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">&#125;</span><br><span class="line">messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line"><span class="keyword">return</span> messageSource;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>设置语言位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.messages.basename=i18n.login</span><br></pre></td></tr></table></figure><p>测试页面</p><p><code>#{}</code>就表示取message的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"application/x-www-form-urlencoded"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"#&#123;login.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:value</span>=<span class="string">"#&#123;login.tip&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>chrome中测试</p><p>设置– &gt;高级 –&gt; 语言 –&gt; 英语(美国) –&gt; 移到顶部</p><p><img src="/2019/10/07/SpringBoot/language.png" alt></p><p>测试</p><p><img src="/2019/10/07/SpringBoot/us.png" alt></p><p>设置– &gt;高级 –&gt; 语言 –&gt; 中文(简体) –&gt; 移到顶部</p><p><img src="/2019/10/07/SpringBoot/cn.png" alt></p><p>乱码问题</p><p><img src="/2019/10/07/SpringBoot/luanma.png" alt></p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a><font size="3px">原理</font></h2><p>国际化Locale区域信息对象；LocaleResolver获取区域信息对象</p><p>在WebMvcAutoConfiguration中定义区域视图解析器 LocaleResolver</p><p>区域信息来自于默认或请求头</p><p><b><font color="#f00">@ConditionalOnMissingBean 当容器中没有区域视图解析器，才自动配置</font></b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.mvc"</span>, name = <span class="string">"locale"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//request.getHeader("Accept-Language")</span></span><br><span class="line">    <span class="comment">//Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span></span><br><span class="line">AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line"><span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义LocaleResolver"><a href="#自定义LocaleResolver" class="headerlink" title="自定义LocaleResolver"></a><font size="4px">自定义LocaleResolver</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.viewresolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//index.html?local=zh_CN</span></span><br><span class="line">        String local = request.getParameter(<span class="string">"local"</span>);</span><br><span class="line">        <span class="comment">//取默认</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (local!=<span class="keyword">null</span>&amp;&amp;local!=<span class="string">""</span>)&#123;</span><br><span class="line">            String[] split=local.split(<span class="string">"_"</span>);</span><br><span class="line">            <span class="comment">//public Locale(String language, String country) &#123;&#125;</span></span><br><span class="line">            locale= <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvc</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/index.html"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> myLocaleResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thymeleaf设定链接</p><p>(local=’zh_CN’)表示请求参数 == ?local=zh_CN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(local='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index.html(local='en_US')&#125;"</span>&gt;</span>英文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现</p><p><img src="/2019/10/07/SpringBoot/localus.png" alt></p><p><img src="/2019/10/07/SpringBoot/localcn.png" alt></p><h1 id="修改后立即编译html"><a href="#修改后立即编译html" class="headerlink" title="修改后立即编译html"></a><font size="4px">修改后立即编译html</font></h1><p>禁用缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#模板缓存禁用</span><br><span class="line">spring.thymeleaf.cache=false</span><br></pre></td></tr></table></figure><h1 id="登录实例"><a href="#登录实例" class="headerlink" title="登录实例"></a><font size="4px">登录实例</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(value = <span class="string">"uname"</span>)</span> String uname,String pwd,HashMap&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (uname.equals(<span class="string">"a"</span>)&amp;&amp;pwd.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">           map.put(<span class="string">"success"</span>,<span class="string">"欢迎"</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       map.put(<span class="string">"error"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>@PostMapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PostMapping &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="th-if-优先级高于th-text"><a href="#th-if-优先级高于th-text" class="headerlink" title="th:if 优先级高于th:text"></a><font size="3px">th:if 优先级高于th:text</font></h2><p>error不为空 div才会显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;error&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(error)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>登录成功应该采用重定向，防止重复提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"uname"</span>)</span> String uname,String pwd,HashMap&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uname.equals(<span class="string">"a"</span>)&amp;&amp;pwd.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">"error"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>main.html映射到dashboard.html 这样dashboard.html内样式不会改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry.addViewController(<span class="string">"/main.html"</span>).setViewName(<span class="string">"dashboard"</span>);</span><br></pre></td></tr></table></figure><p>但这样登录就没有意义了，其他浏览器可以直接访问main.html</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a><font size="3px">拦截器</font></h2><p>请求处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"uname"</span>)</span> String uname, String pwd, HashMap&lt;String,String&gt; map, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (uname.equals(<span class="string">"a"</span>)&amp;&amp;pwd.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setUname(uname);</span><br><span class="line">        u.setPwd(pwd);</span><br><span class="line">        session.setAttribute(<span class="string">"user"</span>,u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/main.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(<span class="string">"error"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//有登录数据</span></span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//请求转发，让其登录</span></span><br><span class="line">            request.setAttribute(<span class="string">"error"</span>,<span class="string">"没有权限"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册拦截器</p><p>/** 拦截所有映射</p><p>excludePathPatterns 剔除映射 /webjars/** 静态资源也会被拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/"</span>,<span class="string">"/index.html"</span>,<span class="string">"/login"</span>,<span class="string">"/webjars/**"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Thymeleaf公共页面抽取th-fragment"><a href="#Thymeleaf公共页面抽取th-fragment" class="headerlink" title="Thymeleaf公共页面抽取th:fragment"></a><font size="4px">Thymeleaf公共页面抽取th:fragment</font></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">&amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;footer :: copy&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>~{templatename::selector}</code> <code>模板名：选择器</code></p><p><code>~{templatename::fragmentname}</code>  <code>模板名：片段名</code></p><p>例如</p><p>dashboard.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">th:fragment</span>=<span class="string">"uname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;dashboard::uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="th-insert，th-replace，th-include"><a href="#th-insert，th-replace，th-include" class="headerlink" title="th:insert，th:replace，th:include"></a><font size="3px">th:insert，th:replace，th:include</font></h2><p><strong>th:insert</strong> 将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong> 将声明引入的元素替换为公共片段</p><p><strong>th:include</strong> 将被引入的片段内容插入到元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery </span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="th-fragment传参"><a href="#th-fragment传参" class="headerlink" title="th:fragment传参"></a><font size="3px">th:fragment传参</font></h2><p><code>~{模板名:片段名(参数)}</code></p><p>dashboard.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">th:fragment</span>=<span class="string">"uname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.uname&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;value&#125;=='12'?'active':''"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;dashboard::uname(value='12')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="dates"><a href="#dates" class="headerlink" title="#dates"></a><font size="3px">#dates</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Format date with the specified pattern</span><br><span class="line">$&#123;#dates.format(date, &apos;dd/MMM/yyyy HH:mm&apos;)&#125; </span><br><span class="line"></span><br><span class="line"># Create a date (java.util.Date) object for the current date and time`</span><br><span class="line">$&#123;#dates.createNow()&#125;</span><br></pre></td></tr></table></figure><h1 id="ThymeleafProperties-1"><a href="#ThymeleafProperties-1" class="headerlink" title="ThymeleafProperties"></a><font size="4px">ThymeleafProperties</font></h1><img src="/2019/10/07/SpringBoot/ac.png" class="full-image"><div class="note warning"><p>使 </p></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;SpringBoot入门&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.runaccpeted.com/categories/Spring/"/>
    
    
      <category term="spring" scheme="https://www.runaccpeted.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战-SpringMVC</title>
    <link href="https://www.runaccpeted.com/2019/09/22/Spring%E5%AE%9E%E6%88%98-SpringMVC/"/>
    <id>https://www.runaccpeted.com/2019/09/22/Spring实战-SpringMVC/</id>
    <published>2019-09-21T22:53:05.000Z</published>
    <updated>2019-10-07T16:30:14.320Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">SpringMVC学习</blockquote><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a><font size="4px">简介</font></h1><p><a href="./spring-webmvc-4.1.6.RELEASE.jar">spring-webmvc-4.1.6.RELEASE</a></p><h2 id="重要组件"><a href="#重要组件" class="headerlink" title="重要组件"></a><font size="3px">重要组件</font></h2><p>DispatcherServlet 前端控制器，接收所有请求，不包含jsp</p><p>HandlerMapping 解析请求格式，判断希望执行那个具体方法</p><p>HandlerAdapter 负责调用具体方法</p><p>ViewResovler 视图解析器，准备跳转到具体的物理视图</p><p><img src="/2019/09/22/Spring实战-SpringMVC/request.jpg" alt></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a><font size="3px">原理</font></h2><p>web.xml中设置DispatcherServlet的url-pattern为/时，当用户发起请求，请求一个控制器，首先执行HandlerMapping，由DispatcherServlet调用HandlerMapping的实现类DefaultAnntationHandlerMapping解析URL，解析后调用HandlerAdapter组件的实现类AnnotationMethodHandlerAdapter调用Controller的HandlerMethod，当HandlerMethod执行完成后会返回View，被ModelAndView进行视图解析，解析后调用jsp对象的class文件并运行，最终将class文件的响应给客户端</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><font size="4px">环境搭建</font></h1><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a><font size="3px">web.xml</font></h2><p>配置DispatcherServlet前端控制器</p><p> url-pattern – 拦截除jsp以外所有映射</p><p>contextConfigLocation 加载 mvc配置文件springmvc.xml</p><p>不指定xml 会默认寻找[servlet-name]-serlvet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-webmvc.jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 加载xml文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 随tomcat加载加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /拦截除了jsp /*拦截所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a><font size="3px">springmvc.xml</font></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 控制器 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demo1"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.controller.UserController"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HandlerMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"urlMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 解析控制器逻辑名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"demo"</span> <span class="attr">value-ref</span>=<span class="string">"demo1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;entry key="list" value="list"&gt;&lt;/entry&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- HandlerAdapter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ViewResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"./"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a><font size="3px">UserController</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//默认为跳转</span></span><br><span class="line">    <span class="comment">//指定视图名 逻辑地址</span></span><br><span class="line">ModelAndView view = <span class="keyword">new</span> ModelAndView(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-–-SpringMVC"><a href="#Spring-–-SpringMVC" class="headerlink" title="Spring – SpringMVC"></a><font size="4px">Spring – SpringMVC</font></h1><h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a><font size="3px">DispatcherServlet</font></h2><p>结构</p><p><img src="/2019/09/22/Spring实战-SpringMVC/dispatcher.png" alt></p><p>所有组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initMultipartResolver(context);</span><br><span class="line">initLocaleResolver(context);</span><br><span class="line">initThemeResolver(context);</span><br><span class="line">initHandlerMappings(context);</span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">initViewResolvers(context);</span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  doDispatch(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doDispatch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"> ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    processedRequest = checkMultipart(request);</span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line">  </span><br><span class="line">  HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">  </span><br><span class="line">  mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SimpleControllerHandlerAdapter"><a href="#SimpleControllerHandlerAdapter" class="headerlink" title="SimpleControllerHandlerAdapter"></a><font size="3px">SimpleControllerHandlerAdapter</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((Controller) handler).handleRequest(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SimpleUrlHandlerMapping"><a href="#SimpleUrlHandlerMapping" class="headerlink" title="SimpleUrlHandlerMapping"></a><font size="3px">SimpleUrlHandlerMapping</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerHandlers</span><span class="params">(Map&lt;String, Object&gt; urlMap)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">urlMap.forEach((url, handler) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (!url.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">url = <span class="string">"/"</span> + url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">handler = ((String) handler).trim();</span><br><span class="line">&#125;</span><br><span class="line">registerHandler(url, handler);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HttpServletBean"><a href="#HttpServletBean" class="headerlink" title="HttpServletBean"></a><font size="3px">HttpServletBean</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException     </span>&#123;</span><br><span class="line">initServletBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FrameworkServlet</p><p><img src="/2019/09/22/Spring实战-SpringMVC/springmvc.png" alt></p><p>spring 为springmvc的父容器</p><p>springmvc能调用spring的内容</p><h1 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a><font size="4px">注解方式</font></h1><p>mvc:annotation-driven 自动配置了HandlerMapping和HandlerAdapter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mv"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 扫描注解 --&gt;</span>                                                     </span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.runaccpeted.controller"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 扫描驱动 --&gt;</span>                                                             </span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Controller-单例控制器"><a href="#Controller-单例控制器" class="headerlink" title="@Controller 单例控制器"></a><font size="3px">@Controller 单例控制器</font></h2><h2 id="RequestMapping-“-url”-映射路径"><a href="#RequestMapping-“-url”-映射路径" class="headerlink" title="@RequestMapping(“/url”)  映射路径"></a><font size="3px">@RequestMapping(“/url”)  映射路径</font></h2><p><font color="#f00">无论方法返回值是什么，都进行跳转</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="放行静态资源"><a href="#放行静态资源" class="headerlink" title="放行静态资源"></a><font size="4px">放行静态资源</font></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/files/"</span> <span class="attr">mapping</span>=<span class="string">"/files/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080/Spring9.28/js/jquery.min.js" target="_blank" rel="noopener">http://localhost:8080/Spring9.28/js/jquery.min.js</a></p><p>mapping 虚拟路径 /js/* js下所有资源* js下所有子文件</p><p>location 实地址 /js/ 在与WEB-INF同级文件下</p><p><img src="/2019/09/22/Spring实战-SpringMVC/js.png" alt></p><h1 id="字节编码过滤器"><a href="#字节编码过滤器" class="headerlink" title="字节编码过滤器"></a><font size="4px">字节编码过滤器</font></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a><font size="4px">传参</font></h1><p>参数放在方法参数中，所有参数都可以被赋值</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><font size="3px">对象</font></h2><p>传入的参数name为对象成员变量名，有get/set方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./demo"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"pwd"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(User user,HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line"><span class="comment">//User [id=0, username=张三, password=123]</span></span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数不匹配-RequestParam"><a href="#参数不匹配-RequestParam" class="headerlink" title="参数不匹配@RequestParam "></a><font size="3px">参数不匹配@RequestParam </font></h2><p>@RequestParam </p><p>value=”” 指定传入的参数</p><p>defaultValue=”” 指定默认值</p><p>required=true 必须有该参数值 == 表列 not null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span>String name,@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span>String pwd,HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">" "</span>+pwd);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="list参数"><a href="#list参数" class="headerlink" title="list参数"></a><font size="3px">list参数</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@RequestParam(<span class="string">"fav"</span>)</span> List&lt;String&gt; list）</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="peo-name"><a href="#peo-name" class="headerlink" title="peo.name"></a><font size="3px">peo.name</font></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"peo.name"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>java中.表示调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> People peo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a><font size="3px">@PathVariable</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demo/&#123;id&#125;/&#123;name&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@PathVariable String id,@PathVariable String name)</span></span>&#123;</span><br><span class="line">System.out.println(id+<span class="string">" "</span>+name);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap传值"><a href="#HashMap传值" class="headerlink" title="HashMap传值"></a><font size="3px">HashMap传值</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(HashMap&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">map.put(<span class="string">"m"</span>,<span class="string">"map传值"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用域在request</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;requestScope.m&#125;</span><br></pre></td></tr></table></figure><h2 id="Model传值"><a href="#Model传值" class="headerlink" title="Model传值"></a><font size="3px">Model传值</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">model.addAttribute(<span class="string">"model"</span>, <span class="string">"model传值"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用域在request</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;requestScope.model&#125;</span><br></pre></td></tr></table></figure><h2 id="ModelAndView传值"><a href="#ModelAndView传值" class="headerlink" title="ModelAndView传值"></a><font size="3px">ModelAndView传值</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">ModelAndView view = <span class="keyword">new</span> ModelAndView(<span class="string">"/main.jsp"</span>);</span><br><span class="line">view.addObject(<span class="string">"view"</span>, <span class="string">"view"</span>);</span><br><span class="line"><span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用域在request</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;requestScope.view&#125;</span><br></pre></td></tr></table></figure><h1 id="跳转方式"><a href="#跳转方式" class="headerlink" title="跳转方式"></a><font size="4px">跳转方式</font></h1><p>默认为请求转发</p><p>写在return的string语句中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/main.jsp"</span>;</span><br><span class="line"><span class="comment">//==return "forward:/main.jsp";</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br></pre></td></tr></table></figure><h1 id="自定义视图解析器"><a href="#自定义视图解析器" class="headerlink" title="自定义视图解析器"></a><font size="4px">自定义视图解析器</font></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加跳转方式后自定义视图解析器无效，调用默认解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return "redirect:/main";</span><br></pre></td></tr></table></figure><h1 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a><font size="4px">@ResponseBody</font></h1><p>返回值满足key-value形式 将数据转为json 以流的形式输出</p><p>响应标头 Content-Type: application/json;charset=UTF-8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo1"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"abc"</span>);</span><br><span class="line">user.setPassword(<span class="string">"123"</span>);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转不成json，以文本输出</p><p>响应标头 Content-Type: text/html 无法解决中英文乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo1"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置响应头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"demo1"</span>,produces=<span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br></pre></td></tr></table></figure><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a><font size="4px">文件下载</font></h1><p><a href="./commons-fileupload-1.3.1.jar">commons-fileupload-1.3.1</a></p><p><a href="./commons-io-2.2.jar">commons-io-2.2</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span>+file);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ServletOutputStream os = response.getOutputStream();</span><br><span class="line">String path=request.getServletContext().getRealPath(<span class="string">"files"</span>);</span><br><span class="line">File f = <span class="keyword">new</span> File(path,file);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bytes = FileUtils.readFileToByteArray(f);</span><br><span class="line">os.write(bytes);</span><br><span class="line">os.flush();</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><font size="4px">文件上传</font></h1><p>前端form设置enctype为multipart/form-data</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"下载"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file,HttpServletRequest request)</span></span>&#123;</span><br><span class="line"><span class="comment">//files文件本地路径</span></span><br><span class="line">String path=request.getServletContext().getRealPath(<span class="string">"files"</span>);</span><br><span class="line">    <span class="comment">//文件名</span></span><br><span class="line">String fileName = file.getOriginalFilename();</span><br><span class="line">    <span class="comment">//文件名后缀</span></span><br><span class="line">String suffix=fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">//生成一系列数字</span></span><br><span class="line">String name=UUID.randomUUID().toString();</span><br><span class="line">    <span class="comment">///Users/Learning/Resource/workspace/myEclipse/.metadata/.me_tcat85/webapps/Spring9.28/files/0612f926-6527-4d70-99cf-815540c0e52d.jpg</span></span><br><span class="line">System.out.println(path+<span class="string">"/"</span>+name+suffix);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">FileUtils.copyInputStreamToFile(file.getInputStream(), <span class="keyword">new</span> File(path,name+suffix));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a><font size="4px">拦截器</font></h1><p>发送请求时被拦截器拦截，在控制器前后添加额外功能</p><p>仅针对控制器，只拦截控制器</p><h2 id="implements-HandlerInterceptor"><a href="#implements-HandlerInterceptor" class="headerlink" title="implements HandlerInterceptor"></a><font size="3px">implements HandlerInterceptor</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入控制器之前执行，false则不进入控制器</span></span><br><span class="line"><span class="comment">//权限拦截</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request , HttpServletResponse response, Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器执行完成，进入到jsp之前执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response , Object obj, ModelAndView view)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//视图名</span></span><br><span class="line">String viewName=view.getViewName();</span><br><span class="line"><span class="comment">//传入的Model键值对</span></span><br><span class="line">String value=view.getModel().get(<span class="string">"key"</span>).toString();</span><br><span class="line"><span class="comment">//敏感词汇过滤</span></span><br><span class="line">value.replace(<span class="string">"国家"</span>, <span class="string">"**"</span>);</span><br><span class="line">view.getModel().put(<span class="string">"key"</span>, value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志记录</span></span><br><span class="line"><span class="comment">//jsp执行完成后执行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object object, Exception exception)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Logger logger = Logger.getLogger(DemoInterceptor.class);</span><br><span class="line">logger.info(exception.getMessage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a><font size="3px">注册拦截器</font></h2><p>mvc:interceptor 拦截一些控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/demo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.interceptor.DemoInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>拦截所有控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.interceptor.DemoInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截器栈"><a href="#拦截器栈" class="headerlink" title="拦截器栈"></a><font size="3px">拦截器栈</font></h2><p>执行顺序和springmvc.xml中配置顺序有关</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.interceptor.DemoInterceptor1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.interceptor.DemoInterceptor2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>preHandler1 –&gt; preHandler2 -&gt; controller –&gt; postHandler2 –&gt; postHandler1 –&gt; jsp –&gt; afterCompletion2 –&gt; afterCompletion1</p><h1 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a><font size="4px">登陆验证</font></h1><p>DispatcherServlet放行jsp ，为了保证jsp不被放行 </p><p>jsp放在WEB-INF –&gt; pages下</p><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"&#123;page&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">page</span><span class="params">(@PathVariable String page)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"/WEB-INF/pages/"</span>+page+<span class="string">".jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要视图解析器配置前后缀</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优先匹配最适合的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span>String uname,@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span>String pwd,HttpServletRequest request)</span>&#123;</span><br><span class="line">  User user=service.selByNamePwd(uname,pwd);</span><br><span class="line">  <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    request.getSession.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器拦截所有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入控制器之前执行，false则不进入控制器</span></span><br><span class="line"><span class="comment">//权限拦截</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request , HttpServletResponse response, Object object)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.geturi().endWith(<span class="string">"login"</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">"user"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.sendRedirect(<span class="string">"./login.jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.interceptor.DemoInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;SpringMVC学习&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.runaccpeted.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.runaccpeted.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战-SpringWeb</title>
    <link href="https://www.runaccpeted.com/2019/09/21/Spring%E5%AE%9E%E6%88%98-SpringWeb/"/>
    <id>https://www.runaccpeted.com/2019/09/21/Spring实战-SpringWeb/</id>
    <published>2019-09-21T13:16:06.000Z</published>
    <updated>2019-09-28T07:23:21.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">构建Spring Web整个过程的解析</blockquote><a id="more"></a><h1 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a><font size="4px">请求过程</font></h1><img src="/2019/09/21/Spring实战-SpringWeb/request.jpg"><h1 id="搭建Spring-MVC"><a href="#搭建Spring-MVC" class="headerlink" title="搭建Spring MVC"></a><font size="4px">搭建Spring MVC</font></h1><h2 id="配置DispatcherServlet"><a href="#配置DispatcherServlet" class="headerlink" title="配置DispatcherServlet"></a><font size="3px">配置DispatcherServlet</font></h2><p><strong>AbstractAnnotationConfigDispatcherServletInitializer</strong></p><p>在Servlet环境下，容器在类路径查找javax.servlet.ServletContainerInitializer接口实现类</p><p>Spring中实现名为SpringServletContainerInitializer类并查找WebAplicationInitializer类</p><p>AbstractAnnotationConfigDispatcherServletInitializer就是一个WebAplicationInitializer</p><p>DispatcherServlet加载包含Web组件的bean，控制器，视图解析器以及处理器映射</p><p>ContextLoaderListener 加载应用中驱动应用后端的中间层和数据层组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittrWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回带有@Configuration注解的类来配置ContextLoaderListener创建的应用上下文中的bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123;RootConfig.class&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//返回带有@Configuration注解的类用来定义DispatcherServlet应用上下文中的bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123;WebConfig.class&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//映射路径</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebConfig.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="comment">//启用Spring MVC</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.runnaccpeted.controller"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSP视图解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态资源的处理</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">configurer.enable();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RootConfig.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=&#123;<span class="string">"com.runnaccpeted"</span>&#125;,excludeFilters=&#123;<span class="meta">@Filter</span>(type=FilterType.ANNOTATION,value=EnableWebMvc.class)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置控制器</p><p>解析 /WEB-INF/views/home.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runnaccpeted.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>  <span class="comment">//=@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"home"</span>; <span class="comment">//渲染视图名</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视图 home.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.runnaccpeted.controller.HomeController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">HomeController home = <span class="keyword">new</span> HomeController();</span><br><span class="line">MockMvc mockMvc = MockMvcBuilders.standaloneSetup(home).build();</span><br><span class="line">    <span class="comment">// 对“/”执行GET请求  预期得到home视图</span></span><br><span class="line">mockMvc.perform(get(<span class="string">"/"</span>)).andExpect(view().name(<span class="string">"home"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="传递模型数据"><a href="#传递模型数据" class="headerlink" title="传递模型数据"></a><font size="4px">传递模型数据</font></h1><p>model是一个map集合，可以把集合数据传递给视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">List&lt;User&gt; list=userService.show(Long.MAX_VALUE, <span class="number">20</span>);</span><br><span class="line">model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">var</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">c:out</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="接受请求输入"><a href="#接受请求输入" class="headerlink" title="接受请求输入"></a><font size="4px">接受请求输入</font></h1><ul><li><p>查询参数 </p><p> /Users?max=230&amp;count=50</p><p>@RequestParam</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX=Long.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @RequestParam(value=<span class="string">"max"</span>,defaultValue=<span class="string">"MAX"</span>)</span> Long max, </span></span><br><span class="line"><span class="function">@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"count"</span>,defaultValue=<span class="string">"20"</span>)</span> <span class="keyword">int</span> count, Model model)</span>&#123;</span><br><span class="line">List&lt;User&gt; list=userService.show(Long.MAX_VALUE, <span class="number">20</span>);</span><br><span class="line">model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>路径参数输入 </p><p>PathVariable</p><p>/Users/123</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;userId&#125;"</span>,method=RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(@PathVariable(<span class="string">"userId"</span>)</span><span class="keyword">long</span> userId,Model model)</span>&#123;</span><br><span class="line">  model.addAttribute(<span class="string">"list"</span>,userService.findOne(userId));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"selectbyId"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>表单输入</p><p>/Users/register</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>,method=RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">  userService.save(user);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"redirect:/Users/"</span>+user.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>校验表单属性</p><p> javax.validation.constraints.*;</p><p>导入 <a href="./validation-api-1.1.0.beta1.jar">validation-api-1.1.0.beta1.jar</a></p><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>注解元素必须是Boolean类型，值为false</td></tr><tr><td>@AssertTrue</td><td>注解元素必须是Boolean类型，值为true</td></tr><tr><td>@DecimalMax(“”)</td><td>元素为数字，值小于等于给定的BigDecimalString值</td></tr><tr><td>@DecimalMin(“”)</td><td>元素为数字，值大于等于给定的BigDecimalString值</td></tr><tr><td>@Digits</td><td>元素为数字，值必须有指定的位数 @Digits(fraction = 0, integer = 0)</td></tr><tr><td>@Future</td><td>元素值必须是一个将来的日期</td></tr><tr><td>@Max</td><td>元素为数字，值小于等于给定的值 @Max(value = 0)</td></tr><tr><td>@Min</td><td>元素为数字，值大于等于给定的值 @Min(value = 0)</td></tr><tr><td>@NotNull</td><td>元素值不为null</td></tr><tr><td>@Null</td><td>元素值必须为null</td></tr><tr><td>@Past</td><td>元素值必须是一个过去的日期</td></tr><tr><td>@Pattern</td><td>元素值匹配给定的正则表达式 @Pattern(regexp = “”)</td></tr><tr><td>@Size</td><td>元素值为String，集合，数组，@Size(min=5,max=23)</td></tr></tbody></table><p>使用检验注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min=<span class="number">5</span>,max=<span class="number">23</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@Valid User user,Errors errors)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (errors.hasErrors()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;<span class="comment">//返回注册页</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"show"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="渲染Web视图"><a href="#渲染Web视图" class="headerlink" title="渲染Web视图"></a><font size="4px">渲染Web视图</font></h1><p>SpringMVC中定义了名为ViewResolver的接口,resolveViewName方法传入视图名和Locale对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewResolver</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> View <span class="title">resolveViewName</span><span class="params">(String paramString, Locale paramLocale)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中的view 接受了request，response对象，结果渲染给response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; paramMap, HttpServletRequest paramHttpServletRequest, HttpServletResponse paramHttpServletResponse)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring定义的13种视图解析器</p><table><thead><tr><th>视图解析器</th><th>描述</th></tr></thead><tbody><tr><td>BeanNameViewResolver</td><td>视图解析为Spring应用上下文的bean</td></tr><tr><td>ContentNegotiatingViewResolver</td><td>考虑客户端需要的内容类型来解析视图，委托给另外一个能够产生对应内容类型的视图解析器</td></tr><tr><td>InternalResourceViewResolver</td><td>解析为内部资源 .jsp</td></tr><tr><td>JasperReportViewResolver</td><td>解析为JasperReport定义</td></tr><tr><td>ResourceBundleViewResolver</td><td>资源bundle 属性文件</td></tr><tr><td>TitlesViewResolver</td><td>解析为Apache Title定义</td></tr><tr><td>UrlBasedViewResolver</td><td>根据视图的名称解析视图</td></tr><tr><td>VelocityLayoutViewResolver</td><td>解析为Velocity布局</td></tr><tr><td>VelocityViewResolver</td><td>解析为Velocity模版</td></tr><tr><td>XmlViewResolver</td><td>解析为xml特定xml文件中的bean定义</td></tr><tr><td>XsltViewResolvet</td><td>解析为XSLT转换后的结果</td></tr></tbody></table><p><strong>InternalResourceViewResolver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSP视图解析器</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">InternalResourceViewResolver resolver = <span class="keyword">new</span> InternalResourceViewResolver();</span><br><span class="line">resolver.setPrefix(<span class="string">"/WEB-INF/views/"</span>);</span><br><span class="line">resolver.setSuffix(<span class="string">".jsp"</span>);</span><br><span class="line">resolver.setExposeContextBeansAsAttributes(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-的jsp标签库"><a href="#Spring-的jsp标签库" class="headerlink" title="Spring 的jsp标签库"></a><font size="3px">Spring 的jsp标签库</font></h2><p>commandName构建模型对象上下文信息 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">  model.addAttribute(<span class="keyword">new</span> User());</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"form"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input的value属性值会设置为模型对象中path属性对应的值</p><p>&lt;sf:input path=”id”/&gt; == &lt; input name=”id” value=”0” type=”text”/&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span> <span class="attr">prefix</span>=<span class="string">"sf"</span> %&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;<span class="name">sf:form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">commandName</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"id"</span>/&gt;</span>   <span class="comment">&lt;!-- &lt; input name="id" value="0" type="text"/&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sf:password</span> <span class="attr">path</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sf:form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误展示</p><p>path设定对象中的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">==</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"user.errors"</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加样式</p><p>*表示所有属性 </p><p>element 表示错误渲染在div上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"*"</span> <span class="attr">element</span>=<span class="string">"div"</span> <span class="attr">cssClass</span>=<span class="string">"errors"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div.errors&#123;</span><br><span class="line">    font-color:#f00;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误设置在每个属性上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sf:label</span> <span class="attr">path</span>=<span class="string">"name"</span> <span class="attr">cssErrorClass</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">sf:label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  label.error&#123;</span><br><span class="line">    color:red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="错误信息展示"><a href="#错误信息展示" class="headerlink" title="错误信息展示"></a><font size="3px">错误信息展示</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@NotNull</span></span><br><span class="line"><span class="meta">@Size</span>(min=<span class="number">5</span>,max=<span class="number">23</span>,message=<span class="string">"&#123;name.size&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>在根目录下创建 ValidationMessages.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name.size=Last name must be between &#123;min&#125; and &#123;max&#125; characters long.</span><br></pre></td></tr></table></figure><h1 id="spring通用标签库"><a href="#spring通用标签库" class="headerlink" title="spring通用标签库"></a><font size="3px">spring通用标签库</font></h1><p><strong>&lt;s:message /&gt;</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span>%&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--根据给定的编码获取信息，进行渲染行为 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">s:message</span> <span class="attr">code</span>=<span class="string">"login.welcome"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>实现MessageSource接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ReloadableResourceBundleMessageSource;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">ReloadableResourceBundleMessageSource messageSource = <span class="keyword">new</span> ReloadableResourceBundleMessageSource();</span><br><span class="line">    <span class="comment">//服务器文件系统目录下查找信息基于“messages”的文件名 messagesXXX.properties</span></span><br><span class="line">messageSource.setBasename(<span class="string">"file:///etc/messages"</span>); </span><br><span class="line">    messageSource.setCacheSeconds(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>messages.properites</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login.welcome=Welcome!</span><br></pre></td></tr></table></figure><p><strong>&lt;s:url /&gt;</strong></p><p>htmlEscape=”true” 展现 url内容到web页面上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">href</span>=<span class="string">"/Users/register"</span> <span class="attr">var</span>=<span class="string">"register"</span> <span class="attr">scope</span>=<span class="string">"request"</span> <span class="attr">htmlEscape</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"wt"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;register&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>&lt;s:escapeBody /&gt;</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:escapeBody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    Hello</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:escapeBody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;构建Spring Web整个过程的解析&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.runaccpeted.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.runaccpeted.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战-面向切面的Spring</title>
    <link href="https://www.runaccpeted.com/2019/09/21/Spring%E5%AE%9E%E6%88%98-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%9A%84Spring/"/>
    <id>https://www.runaccpeted.com/2019/09/21/Spring实战-面向切面的Spring/</id>
    <published>2019-09-21T08:03:51.000Z</published>
    <updated>2019-09-27T13:15:32.142Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">切面的创建方法，使用</blockquote><a id="more"></a><h1 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a><font size="4px">相关术语</font></h1><ul><li><p><strong>Advice</strong> </p><p>通知 ：用于多个应用对象的行为 before，after，afterReturning，afterThrowing，around</p></li><li><p><strong>Pointcut</strong> </p><p>切点 ：通知应用的具体位置，哪些连接点得到通知</p></li><li><p><strong>Join Point</strong> </p><p>连接点：潜在目标，能够应用通知的所有点</p></li><li><p><strong>Aspect</strong> </p><p>切面：通知+切点</p></li></ul><p><strong>spring仅支持方法级连接点</strong></p><h1 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a><font size="4px">切点表达式</font></h1><table><thead><tr><th>AspectJ指示器</th><th>描述</th></tr></thead><tbody><tr><td>arg()</td><td>匹配参数为指定类型</td></tr><tr><td>@args()</td><td>匹配参数由指定注解标注</td></tr><tr><td>execution()</td><td>匹配执行方法</td></tr><tr><td>this()</td><td>匹配AOP代理的bean引用</td></tr><tr><td>target</td><td>匹配目标对象</td></tr><tr><td>@target()</td><td>匹配特定的执行对象</td></tr><tr><td>within()</td><td>匹配指定类型</td></tr><tr><td>@within()</td><td>匹配指定注解类型</td></tr><tr><td>@annotation</td><td>匹配带有指定注解的连接点</td></tr></tbody></table><p>execution</p><img src="/2019/09/21/Spring实战-面向切面的Spring/execution.jpg" style="zoom:50%;"><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Aspect</td><td>声明为切面类</td></tr><tr><td>@Pointcut</td><td>切点定义</td></tr><tr><td>@before</td><td>目标方法调用之前执行</td></tr><tr><td>@after</td><td>目标方法调用之后或抛出异常后执行</td></tr><tr><td>@afterReturning</td><td>目标方法返回后执行，后于after</td></tr><tr><td>@beforeThrowing</td><td>目标方法抛出异常后</td></tr><tr><td>@Around</td><td>将目标方法封装起来</td></tr></tbody></table><h1 id="创建切面-实战"><a href="#创建切面-实战" class="headerlink" title="创建切面 - 实战"></a><font size="4px">创建切面 - 实战</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"create....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面使用需要导入</p><p><a href="./aspectjweaver.jar">aspectjweaver.jar</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* Method.method(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Before...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"After...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AfterReturning...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AfterThrowing...."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Around("performance()")</span></span><br><span class="line"><span class="comment">//public void around() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println("Around....");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扫描Component </p><p>切面代理需要设置自动代理启用 </p><p>@EnableAspectJAutoProxy | &lt;aop:aspectj-autoproxy &gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes=Config.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Method method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">AopTest aopTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">method.method();</span><br><span class="line">assertNotNull(method);</span><br><span class="line">assertNotNull(aopTest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Before....</span><br><span class="line">create.....</span><br><span class="line">After....</span><br><span class="line">AfterReturning....</span><br></pre></td></tr></table></figure><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a><font size="3px">环绕通知</font></h2><p>包装目标方法 相当于 同时设置前置通知+后置通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"performance()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Around before...."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">jp.proceed();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Around after...."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p>Around before….</p><p>create…..</p><p>Around after….</p></blockquote><h1 id="处理参数"><a href="#处理参数" class="headerlink" title="处理参数"></a><font size="4px">处理参数</font></h1><p>目标方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"create....."</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面 限定参数类型及参数名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* Method.method(int)) &amp;&amp; args(a)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"performance(a)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Before...."</span>+a);</span><br></pre></td></tr></table></figure><h1 id="引入新功能"><a href="#引入新功能" class="headerlink" title="引入新功能"></a><font size="4px">引入新功能</font></h1><p>@DeclareParents 将Shopping接口引入到实现People接口的bean中。</p><p>value 所有实现People的类</p><p>defalutImpl 引入功能提供实现的类,实现了Shopping接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.DeclareParents;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeclareParents</span>(value=<span class="string">"People+"</span>,defaultImpl=children.class)</span><br><span class="line"><span class="keyword">public</span> Shopping shopping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="XML中声明切面"><a href="#XML中声明切面" class="headerlink" title="XML中声明切面"></a><font size="4px">XML中声明切面</font></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动代理AspectJ注解通知类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aopTest"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"performance"</span> <span class="attr">experssion</span>=<span class="string">"execution(* Method.method(..)"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"before"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"after"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">method</span>=<span class="string">"around"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>aop:declare-parents</p><p>此声明所通知的bean要在它的对象层次结构中拥有新的父类型。</p><p>类型匹配的People接口的那些bean在父类型结构中会增加Shopping接口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:declare-parents</span></span></span><br><span class="line"><span class="tag">     <span class="attr">types-matching</span>=<span class="string">"People+"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">implements-interface</span>=<span class="string">"Shopping"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">delegate-ref</span>=<span class="string">"children"</span> </span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;切面的创建方法，使用&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.runaccpeted.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.runaccpeted.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战-装配Bean三种方法</title>
    <link href="https://www.runaccpeted.com/2019/09/21/Spring%E5%AE%9E%E6%88%98-%E8%A3%85%E9%85%8DBean/"/>
    <id>https://www.runaccpeted.com/2019/09/21/Spring实战-装配Bean/</id>
    <published>2019-09-21T05:12:31.000Z</published>
    <updated>2019-09-28T14:49:42.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Spring-Bean的装配的三种方式</blockquote><a id="more"></a><h1 id="自动化装配"><a href="#自动化装配" class="headerlink" title="自动化装配"></a><font size="4px">自动化装配</font></h1><h1 id="创建被发现的bean"><a href="#创建被发现的bean" class="headerlink" title="创建被发现的bean"></a><font size="3px">创建被发现的bean</font></h1><p>@Component 告知Spring为这个类创建bean</p><p>org.springframework.stereotype.Component; 在spring-content-4.1.6.RELEASE.jar中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="启动组件扫描"><a href="#启动组件扫描" class="headerlink" title="启动组件扫描"></a><font size="3px">启动组件扫描</font></h1><p>@Configuration 声明为配置类</p><p>@ComponentScan默认扫描与配置类相同的包及子包 </p><p>可以添加属性值 basePackages={“people”}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">build</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="测试组件"><a href="#测试组件" class="headerlink" title="测试组件"></a><font size="3px">测试组件</font></h1><p>SpringJUnit4ClassRunner 自动创建Spring应用上下文</p><p>@ContextConfiguration 加载配置</p><p>@Autowired 自动装配</p><p>自动满足bean依赖，自动注入适配bean，required=false 让这个bean处于未装配状态，如果有多个bean满足依赖关系，@Qualifer(“..”) 缩小范围，达到只有一个bean满足规定的限制条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes=build.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">User user;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">assertNotNull(user);</span><br><span class="line">System.out.println(user.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>❌错误：</p><p><font color="#f00">java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory</font></p><p>导入 <a href="./commons-logging-1.2.jar">commons-logging-1.2.jar</a></p><p><font color="#f00">java.lang.NoClassDefFoundError: org/aopalliance/aop/Advice</font></p><p>导入 <a href="./aopalliance-1.0.jar">aopalliance-1.0.jar</a> </p><p>最终输出</p><p>User [id=0, name=null] </p><h1 id="接口装配bean"><a href="#接口装配bean" class="headerlink" title="接口装配bean"></a><font size="4px">接口装配bean</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而实现类实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">implements</span> <span class="title">People</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"create....."</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法可以得到实现类结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes=Config.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">People people;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">people.method(<span class="number">3</span>); <span class="comment">//create.....3</span></span><br><span class="line">assertNotNull(people);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="java代码装配"><a href="#java代码装配" class="headerlink" title="java代码装配"></a><font size="4px">java代码装配</font></h1><p>@Bean 创建一个bean实例并将其注入到Spring应用上下文中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">setUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="xml装配"><a href="#xml装配" class="headerlink" title="xml装配"></a><font size="4px">xml装配</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">build</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">User user;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">build</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">build</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">user.setId(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.test.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.test.build"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当构造器参数注入集合时</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"build"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.test.Build"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>set方法注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"build"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.test.Build"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">ref</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</span><br><span class="line">build b = context.getBean(build.class);</span><br><span class="line">System.out.println(b.user.toString());</span><br><span class="line">context.close();</span><br></pre></td></tr></table></figure><h1 id="混合装配bean"><a href="#混合装配bean" class="headerlink" title="混合装配bean"></a><font size="4px">混合装配bean</font></h1><p>javaConfig+xml</p><p>@Import(User.class) xml中拥有User的beanID </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.test.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(User.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> build <span class="title">setBuild</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> build(user);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bean的scope"><a href="#bean的scope" class="headerlink" title="bean的scope"></a><font size="4px">bean的scope</font></h1><p>spring中bean创建默认是单例的 scope=”singleton”</p><p>prototype 每次调用创建新实例</p><p>request 每个请求重新实例化</p><p>session 每个会话</p><p>application </p><p>global session Spring中的对象，依赖于spring-webmvc-portlet.jar</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Spring-Bean的装配的三种方式&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.runaccpeted.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.runaccpeted.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring实战-overview</title>
    <link href="https://www.runaccpeted.com/2019/09/21/Spring%E5%AE%9E%E6%88%98-overview/"/>
    <id>https://www.runaccpeted.com/2019/09/21/Spring实战-overview/</id>
    <published>2019-09-20T22:52:55.000Z</published>
    <updated>2019-10-07T17:23:14.245Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Spring框架总览</blockquote><a id="more"></a><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a><font size="4px">框架</font></h1><p><img src="/2019/09/21/Spring实战-overview/README.png" alt></p><p>Spring当作一个 大容器</p><p>ApplicationContex接口承接所有BeanFactory功能</p><ul><li>Test 单元测试</li><li>Core Container 核心容器。Spring启动基本条件<ul><li>Beans 创建类对象并管理对象</li><li>Core 核心类</li><li>Context 上下文参数，获取外部资源或管理注解</li><li>SpEL experssion.jar</li></ul></li><li>AOP AOP功能需要依赖</li><li>Aspects 切面AOP依赖包</li><li>Data Access/Integration 封装数据访问层内容<ul><li>JDBC：对JDBC封装后代码</li><li>ORM 封装持久层框架代码 e.g. Hibernate</li><li>transactions 声明式事务使用</li></ul></li><li>Web 完成web相关功能<ul><li>tomcat 相关业务</li></ul></li></ul><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a><font size="4px">核心功能</font></h1><h2 id="IoC-Inversion-of-Control-控制反转"><a href="#IoC-Inversion-of-Control-控制反转" class="headerlink" title="IoC Inversion of Control  控制反转"></a><font size="3px">IoC Inversion of Control  控制反转</font></h2><p>IoC Inversion of Control </p><p>实例化对象转交给Spring负责，实现对象的 解耦 </p><h2 id="DI-Depency-Inject-依赖注入"><a href="#DI-Depency-Inject-依赖注入" class="headerlink" title="DI Depency Inject 依赖注入"></a><font size="3px">DI Depency Inject 依赖注入</font></h2><p>一个类依赖于另一个类的对象时，把对象传递给需求类</p><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP 面向切面编程"></a><font size="3px">AOP 面向切面编程</font></h2><p>Aspect-Oriented Programming</p><p>在程序有纵向执行流程中，针对某一个或某一些<strong>方法</strong>添加通知形成横切面过程，构造器无用</p><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a><font size="3px">声明式事务</font></h2><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><font size="4px">环境搭建</font></h1><ol><li><p>new -&gt; web project</p></li><li><p>WebRoot -&gt; WEB-INF -&gt; lib -&gt;导入jar包 依赖包<a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">下载</a></p><p>基本包</p><p>beans ，context，core，experssion，<a href="./commons-logging-1.2.jar">logging</a> </p></li><li><p>在src下创建applicationContext.xml 使内容最终存储在ApplicationContext容器中</p></li><li><p>spring配置文件基于schema</p><p>schema文件命名为.xsd</p><p>每次引入一个xsd文件是一个namespace</p></li><li><p>创建一个bean</p><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>  applicationContext.xml</p><p>  &lt; bean&gt;</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  是否创建对象成功</p><p>  文件被加载时对象被创建</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">beanTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加载配置文件</span></span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//得到对象</span></span><br><span class="line">User user=context.getBean(User.class);</span><br><span class="line">System.out.println(user.toString());</span><br><span class="line"><span class="comment">//得到spring应用上下文中存在的所有bean</span></span><br><span class="line"><span class="keyword">for</span>(String str:context.getBeanDefinitionNames())&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a><font size="4px">源码解析</font></h1><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a><font size="4px">ApplicationContext</font></h2><p><img src="/2019/09/21/Spring实战-overview/applicationcontext.png" alt></p><p>ApplicationContext context = new ClassPathXmlApplicationContext(“applicationContext.xml”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, ApplicationContext parent)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>(parent);</span><br><span class="line">setConfigLocations(configLocations);</span><br><span class="line"><span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ApplicationContext初始化主要有refresh()方法实现。</p><p>在spring中，构建容器的过程都是同步的，保证线程安全性。</p><p>beanFactory是AplicationContext父接口，是spring框架中的顶级容器工厂对象，只管理bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">       <span class="comment">//加载配置中BeanFactory无法处理的内容，property的placehodler加载</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">       <span class="comment">//上一步加载的内容作为一个容器可以管理的beanFactory对象注册到ApplicationContext中，底层将postProcessBeanFactory中加载的内容包装成容器ApplicationContext可以管理的bean对象</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">       <span class="comment">//继续完成注册操作。配置文件中配置的bean对象创建并注册完成</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize message source for this context.</span></span><br><span class="line">       <span class="comment">//初始化国际化消息源</span></span><br><span class="line">initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">       <span class="comment">//注册事件多播监听。ApplicationEvent Spring中观察者模式实现机制</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">       <span class="comment">//初始化主题资源，视图主题信息</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">       </span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">       <span class="comment">//初始化所有bean对象</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">       <span class="comment">//声明周期监听事件spring容器定义了生命周期接口Lifecycle，实现容器启动调用初始化，容器销毁之前调用回收资源。</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - cancelling refresh attempt"</span>, ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建对象三种方式"><a href="#创建对象三种方式" class="headerlink" title="创建对象三种方式"></a><font size="4px">创建对象三种方式</font></h1><h2 id="构造方法创建"><a href="#构造方法创建" class="headerlink" title="构造方法创建"></a><font size="3px">构造方法创建</font></h2><ul><li><p>无参构造</p></li><li><p>有参构造</p><p>index 参数索引</p><p>name 参数名</p><p>type 参数类型 基本数据类型不同于其包装类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>工厂设计模式，一个工厂生产多个对象</p><h2 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a><font size="3px">实例工厂</font></h2><p>先创建工厂对象，再创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置工厂对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.factory.UserFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a><font size="3px">静态工厂</font></h2><p>不需要创建工厂对象 直接调用factory.newInstance()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">newInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要创建对象bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.factory.UserFactory"</span> <span class="attr">factory-method</span>=<span class="string">"newInstance"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="bean赋值"><a href="#bean赋值" class="headerlink" title="bean赋值"></a><font size="4px">bean赋值</font></h1><p>对应于set方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"A"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当属性有list时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>"A"<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>"B"<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>"C"<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>"D"<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"A"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"B"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"C"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"login.id"</span>&gt;</span>value<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="bean的scope属性"><a href="#bean的scope属性" class="headerlink" title="bean的scope属性"></a><font size="4px">bean的scope属性</font></h1><p>bean默认为单例模式singleton，整个应用中存在一个对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span> <span class="attr">scope</span>=<span class="string">".."</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>singleton 单例</li><li>prototype 多例</li><li>request 每次请求</li><li>session 每个会话</li></ul><h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a><font size="4px">整合MyBatis</font></h1><p><a href="./mybatis-spring-1.3.1.jar">mybatis-spring-1.3.1.jar</a></p><p><a href="./mysql-connector-java-8.0.11.jar">mysql-connector-java-8.0.11.jar</a></p><p><a href="./spring-jdbc-4.1.6.RELEASE.jar">spring-jdbc-4.1.6.RELEASE.jar</a></p><p><a href="./spring-tx-4.1.6.RELEASE.jar">spring-tx-4.1.6.RELEASE.jar</a></p><p><a href="./mybatis-3.5.0.jar">mybatis-3.5.0</a></p><p>db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/login?useSSL=false</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=mysql123//</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 整合mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.runaccpeted.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.service.Impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userMapper"</span> <span class="attr">ref</span>=<span class="string">"userMapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>com.runaccpeted.mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于service中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.service.Impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.runaccpeted.service.UserSrevice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserSrevice</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserMapper <span class="title">getUserMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMapper;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMapper</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMapper.selAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">UserServiceImpl service =context.getBean(UserServiceImpl.class);</span><br><span class="line">List&lt;User&gt; user= service.selectAll();</span><br><span class="line"><span class="keyword">for</span>(User u:user)&#123;</span><br><span class="line">System.out.println(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部署到tomcat"><a href="#部署到tomcat" class="headerlink" title="部署到tomcat"></a><font size="3px">部署到tomcat</font></h2><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 上下文监听器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>应用到servlet</p><p>使用WebApplicationContextUtils.getRequiredWebApplicationContext(ServletContext);</p><p>得到ApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">ServletContext sc = config.getServletContext();</span><br><span class="line">WebApplicationContext ac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc);</span><br><span class="line">    userService=ac.getBean(UserServiceImpl.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a><font size="4px"><a href="./2019/09/21/Spring实战-面向切面的Spring">AOP</a></font></h1><h2 id="schema-based"><a href="#schema-based" class="headerlink" title="schema-based"></a><font size="3px">schema-based</font></h2><p>每个通知对应一个bean 实现接口</p><p>在aop:config中配置aop:advisor</p><p>前置通知</p><p>before - MethodBeforeAdvice接口</p><p>Method m 方法对象– public void com.runaccpeted.pojo.User.method()</p><p>Object[] obj1切点方法参数</p><p>Object obj 方法所在对象 User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Before</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method m, Object[] obj1, Object obj)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"构建方法前"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置通知</p><p>after-AfterReturningAdvice接口</p><p>Object returnobj返回值</p><p>Method m方法对象</p><p>Object[] obj2 方法参数</p><p>Object obj 方法所在对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">After</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnobj, Method m, Object[] obj2, Object obj)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"方法执行后"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环绕通知</p><p>around – MethodInterceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Around</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation m)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">return</span> m.proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><p>execution(* com.runaccpeted.pojo.User.method(..) )针对User类中method方法，不限参数，不限返回值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"before"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.aspect.Before"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"after"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.aspect.After"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.runaccpeted.pojo.User.method(..))"</span> <span class="attr">id</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a><font size="3px">AspectJ</font></h2><p>在aop:config中配置aop:aspect</p><p>普通类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runaccpeted.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Advice</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"构建方法前"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"构建方法后"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><p>类–&gt;切面  &lt;aop:aspect ref=”aop”&gt;</p><p>&lt;aop:before method=”before” /&gt;对应before方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;aop:aspectj-autoproxy proxy-target-class="true"&gt;&lt;/aop:aspectj-autoproxy&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aop"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.aspect.Advice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aop"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.runaccpeted.pojo.User.method(..))"</span> <span class="attr">id</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>异常通知，当异常在原方法中被try-catch捕获时，异常通知不出现</p><p>&lt;aop:after-throwing method=”throwing” pointcut-ref=”performance”/&gt;</p><p>输出异常信息  throwing=”e”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"throwing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwing</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"出错了"</span>+e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环绕通知</p><p>&lt;aop:around &gt;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint p)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"前"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">p.proceed();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"后"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a><font size="4px">自动注入</font></h1><p>自动查找所有装配了的bean，当类调用其他类时，bean ID存在则自动注入对象</p><p>autowire</p><p>no 不注入</p><p>byName 跟bean id值相同</p><p>byType 跟bean id类型相同</p><p>default 跟全局default-autowire同步</p><p>constructor 构造方法注入，底层使用byName</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span> <span class="attr">autowire</span>=<span class="string">"default"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="加载properties-文件"><a href="#加载properties-文件" class="headerlink" title="加载properties 文件"></a><font size="4px">加载properties 文件</font></h1><p>在src下新建db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/login?useSSL=false</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=mysql123//</span><br></pre></td></tr></table></figure><p>applicationContext.xml </p><p>引入xmlns:context，加载db文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>取数据${login.id}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="comment">xsi:schemaLocation="http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="comment">http://www.springframework.org/schema/context/spring-context.xsd"--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.pojo.User"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"$&#123;login.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bean 装配 org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0</p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a><font size="3px">注解方式</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param.name=name</span><br></pre></td></tr></table></figure><p>加载文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties,classpath:param.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>成员变量添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;param.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>注册注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.runaccpeted.service.Impl"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="声明式事务-1"><a href="#声明式事务-1" class="headerlink" title="声明式事务"></a><font size="4px">声明式事务</font></h1><ul><li><p>编程式事务 程序员自己实现控制，rollback(), commit()</p></li><li><p>声明式事务 spring已写好控制代码，只需要声明哪里需要进行事务控制和如何进行事务控制</p></li></ul><p>主要针对ServiceImp类</p><p>事务管理器基于通知advice</p><p>管理的是与数据库的交互 – dataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties,classpath:param.properties"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span> <span class="attr">scope</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.runaccpeted.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事务声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-jdbc.jar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>针对aop</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 哪些方法需要事务控制</span></span><br><span class="line"><span class="comment"> 支持通配符 ins* </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"ins*"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"upd*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"del*"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">readonly</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aop"</span> <span class="attr">class</span>=<span class="string">"com.runaccpeted.aspect.Advice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aop"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.runaccpeted.service.Impl.*(..))"</span> <span class="attr">id</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"after"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"throwing"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">          </span><br><span class="line">    <span class="comment">&lt;!-- 针对tx:advice的id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"performance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="tx-method"><a href="#tx-method" class="headerlink" title="tx:method"></a><font size="3px">tx:method</font></h2><ul><li><p>name 需要事务控制的方法名</p></li><li><p>read-only=”true” 只读事务，优化数据库查找效率</p></li></ul><p>false 事务需要提交</p><ul><li><p>propagation 当一个具有事务控制的方法被另一个有事务控制的方法调用时，需要如何管理事务(新增事务，在事务中执行，挂起事务，报异常)</p><ul><li>REQUIRED 当前有事务，在事务中执行，当前没有事务，新建事务</li><li>SUPPORTS 当前有事务，在事务中执行，当前没有事务，非事务状态下执行</li><li>MANDATORY  必须在事务内部执行，当前有事务，在事务中执行，当前没有事务，报错</li><li>REQUIRES_NEW 必须在事务内部执行，当前有事务，将事务挂起，当前没有事务，新建事务</li><li>NOT_SUPPORTED 必须在非事务下执行，当前有事务，将事务挂起，当前没有事务，正常执行</li><li>NEVER 必须在非事务下执行，当前有事务，报错，当前没有事务，正常执行</li><li>NESTED 必须在事务下执行，当前有事务，将创建一个嵌套事务，当前没有事务，新建事务</li></ul></li><li><p>isolation 事务隔离级别</p><p>多线程或并发访问下如何保证访问到数据具有完整性</p><ul><li><p><strong>脏读</strong></p><p>一个事务读取另一个事务中未提交的事务中数据可能进行了改变，此时事务读取的数据可能和数据库中数据是不一致的，此时认为数据是脏数据，读取脏数据的过程叫脏读</p></li><li><p><strong>不可重复读</strong></p><p>针对某行数据</p><p>针对操作修改操作</p><p>事务第一次读取，另一个事务对事务读取的数据进行了修改，事务再次读取的数据和之前读取的数据不一致，过程不可重复读</p></li><li><p><strong>幻读</strong></p><p>针对新增，删除</p><p>两次事务结果</p><p>事务按照特定条件查询结果，另一个事务新增数据，导致查询数据不一致，事务出现幻读</p></li><li><p>DEFAULT 由底层数据库自动判断应该使用什么隔离界别</p></li><li><p>READ_UNCOMMITTED 读取未提交数据，可能出现脏读，不重复读，幻读，效率最高</p></li><li><p>READ_COMMITTED 只能读取其他事务已提交的事务，可以防止脏读，可能出现不可重复读和幻读</p></li><li><p>REPEATABLE_READ 读取的数据被添加锁，防止其他事务修改此数据，防止不可重复读，脏读，可能出现幻读</p></li><li><p>SERIALIZABLE 排队操作，对整个表添加锁，一个事务在操作数据时，另一个事务等待事务操作完成后才能操作这个表，最安全，效率最低</p></li></ul></li><li><p>rollback-for  异常类型全限定路径</p><p>出现什么异常时需要进行回滚</p><p>手动抛异常时需要添加该属性</p></li><li><p>no-rollback-for</p><p>出现什么异常时不需要进行回滚</p></li><li><p>timeout=”-1”</p></li></ul><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a><font size="4px">注解</font></h1><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a><font size="3px">@Component</font></h2><p>创建类对象，相当于bean</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a><font size="3px">@Service</font></h2><p>写在ServiceImpl类上 ，相当于@Component</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a><font size="3px">@Repository</font></h2><p>写在数据访问层上，相当于@Component</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a><font size="3px">@Controller</font></h2><p>写在控制器上，相当于@Component<font size="3px">@Controller</font></p><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><font size="3px">@Resource</font></h2><p>不需要写set/get</p><p>java中的注解</p><p>默认按照byName注入，如果没有名称对象，按照byType注入</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><font size="3px">@Autowired</font></h2><p>不需要写set/get</p><p>spring注解</p><p>默认按照byType注入</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a><font size="3px">@Value</font></h2><p>获取properties中的值</p><h2 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect"></a><font size="3px">@Aspect</font></h2><p>@Pointcut</p><p>@Before</p><p>@After</p><p>@AfterReturning</p><p>@Around</p><p>@AfterThrowing</p><h1 id="ajax-–-jquery"><a href="#ajax-–-jquery" class="headerlink" title="ajax – jquery"></a><font size="4px">ajax – jquery</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">response.getWriter().write(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a><font size="3px">$.ajax()</font></h2><p>data 参数</p><p>dataType 响应返回类型</p><p>success 响应返回数据 –&gt; hello</p><p>type 请求方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">url:<span class="string">'./list'</span>,</span></span><br><span class="line"><span class="javascript">data:&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>&#125;,</span></span><br><span class="line"><span class="javascript">dataType:<span class="string">'html'</span>,</span></span><br><span class="line"><span class="javascript">error:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//alert(data);</span></span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line">alert(data);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="javascript">type:<span class="string">'POST'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./list"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="$.get()"></a><font size="3px">$.get()</font></h2><p>$.get(url,data,success,dataType);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('./list',&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(data);</span><br><span class="line">&#125;,<span class="string">'html'</span>);</span><br></pre></td></tr></table></figure><h2 id="post"><a href="#post" class="headerlink" title="$.post()"></a><font size="3px">$.post()</font></h2><p>$.post(url,data,success,dataType);</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'./list'</span>,&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">alert(data);</span><br><span class="line">&#125;,<span class="string">'html'</span>);</span><br></pre></td></tr></table></figure><h2 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON()"></a><font size="3px">$.getJSON()</font></h2><p>$.getJSON(url,data,success) </p><p>相当于$.get的dataType为json</p><h2 id="getScript"><a href="#getScript" class="headerlink" title="$.getScript()"></a><font size="3px">$.getScript()</font></h2><p>$.getScript(url,data,success)</p><p>相当于$.get的dataType为script</p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a><font size="4px">JSON</font></h1><p>jackson-annotations的，往下拉找到Downloads就有jar包下载了</p><p><a href="https://github.com/FasterXML/jackson-annotations/wiki" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-annotations/wiki</a></p><p>jackson-datahind的，往下拉找到Non-Maven</p><p><a href="https://github.com/FasterXML/jackson-databind" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-databind</a></p><p>core的，往下拉找到Non-Maven</p><p><a href="https://github.com/FasterXML/jackson-core" target="_blank" rel="noopener">https://github.com/FasterXML/jackson-core</a></p><h2 id="jsonObject"><a href="#jsonObject" class="headerlink" title="jsonObject"></a><font size="3px">jsonObject</font></h2><p>{</p><p>​    “key”:value,</p><p>​    “key:value”</p><p>}</p><h2 id="jsonArray"><a href="#jsonArray" class="headerlink" title="jsonArray"></a><font size="3px">jsonArray</font></h2><p>[{</p><p>​    “key”:value,</p><p>​    “key”:value    </p><p>}]</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a><font size="3px">实例</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user  = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">"abc"</span>);</span><br><span class="line">user.setPassword(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象转json工具类</span></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">String result=mapper.writeValueAsString(user);</span><br><span class="line">  <span class="comment">//&#123;"id":1,"username":"abc","password":"123"&#125;</span></span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用于服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改响应类型</span></span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String result=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result=mapper.writeValueAsString(userService.selectAll());</span><br><span class="line">&#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response.getWriter().write(result);</span><br></pre></td></tr></table></figure><p>ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.post(<span class="string">'./list'</span>,&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">    alert(data[i].id +<span class="string">" "</span>+data[i].username+<span class="string">" "</span>+data[i].password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"json"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Spring框架总览&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="https://www.runaccpeted.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://www.runaccpeted.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Servlet与JSP</title>
    <link href="https://www.runaccpeted.com/2019/09/20/Servlet%E4%B8%8EJSP/"/>
    <id>https://www.runaccpeted.com/2019/09/20/Servlet与JSP/</id>
    <published>2019-09-20T11:00:11.000Z</published>
    <updated>2019-10-07T15:34:03.460Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">开发Web应用程序技术学习</blockquote><a id="more"></a><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><font size="4px">HTTP协议</font></h1><p>概念：超文本传输协议</p><p>作用：规范服务器和客户端数据交互格式</p><p>建立在<font color="#f00">TCP/IP</font>基础上，HTTP协议使用可靠的TCP连接，端口80</p><p>特点：</p><ul><li>无连接，限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，断开连接，节省传输时间</li><li>无状态，HTTP协议对于事务处理没有记忆功能，缺少状态意味着如果后续处理需要前面的信息，必须重传，可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答较快。 </li><li><font color="#f00">HTTP/1.1 支持可持续连接</font></li></ul><p>交互流程：</p><ol><li>客户端和服务端建立连接</li><li>客户端向服务端请求数据，发送http协议</li><li>服务器处理请求的http协议，发送响应数据给客户端</li><li>客户端接受响应数据，渲染到浏览器</li></ol><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a><font size="3px">请求方式</font></h2><p>HTTP/1.0 定义三种请求方法：</p><ul><li><p>GET 请求指定页面信息，返回实体主体，请求数据以?key=value的方式拼接到URL中，不安全，请求数据不能太大(地址栏有限)</p></li><li><p>POST 提交表单等，请求数据包含在请求主体中</p></li><li><p>HEAD 返回的响应没有实体内容，用于获取报头</p></li></ul><p>HTTP/1.1 新增 </p><ul><li><p>OPTIONS 允许客户端查看服务器性能</p></li><li><p>PUT 从客户端向服务端传送的数据取代指定文档的内容</p></li><li><p>DELETE 请求服务器删除指定页面</p></li><li><p>TRACE 回退服务器收到的请求，主要用于测试或诊断</p></li><li><p>CONNECT HTTP/1.1协议预留给能够将连接改为管道方式的代理服务器</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">方法_/统一资源标识符_/协议/版本\r\n</span><br><span class="line">请求标头\r\n</span><br><span class="line">\r\n</span><br><span class="line">实体主体(post请求才有)</span><br><span class="line"></span><br><span class="line">POST /examples/default.jsp HTTP/1.1</span><br><span class="line">Accept: text/plain; test/html</span><br><span class="line">Accept-Language: en-gb</span><br><span class="line">Connection: Keep-alive  </span><br><span class="line">Host: localhost</span><br><span class="line"></span><br><span class="line">user=wt&amp;&amp;pwd=&amp;^$#@</span><br></pre></td></tr></table></figure><p>Connection: Keep-alive  持久连接，使用同一个连接来下载所有资源</p><h2 id="响应方式"><a href="#响应方式" class="headerlink" title="响应方式"></a><font size="3px">响应方式</font></h2><p>Response</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">协议 状态码 描述\r\n</span><br><span class="line">响应标头\r\n</span><br><span class="line">\r\n</span><br><span class="line">实体主体</span><br><span class="line"></span><br><span class="line">HTTP/1.1 20 OK</span><br><span class="line">Server: Apache-Coyote/1.1</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length:112</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>状态码</p><ul><li><p>200 OK 请求成功</p></li><li><p>400 Bad Request 请求有语法错误</p></li><li><p>404 Unauthorized 请求未经授权，和www-Authenticate一起使用</p></li><li><p>403 Forbidden 服务器收到请求，拒绝提供服务</p></li><li><p>404 Not Found 资源不存在 </p><ul><li>servlet别名书写错误</li><li>虚拟项目名书写错误</li></ul></li><li><p>500 Internal Server Error 服务器错误，异常</p><ul><li>servlet类class路径拼写错误</li><li>servlet类方法体代码有错误</li></ul></li><li><p>503 Server Unavailable 服务器当前不能处理客户端请求</p></li></ul><p>e.g.</p><p>HTTP基于TCP/IP</p><p>TCP用ServerSocket类实现</p><p>接收客户端 accpet() –&gt; Socket类</p><p>接收 getInputStream()</p><p>发送 getOutputStream()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>,<span class="number">1</span>, InetAddress.getByName(<span class="string">"localhost"</span>));</span><br><span class="line">    Socket client = server.accept();</span><br><span class="line">    OutputStream out = client.getOutputStream();</span><br><span class="line">    InputStream in = client.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in,<span class="string">"UTF-8"</span>));</span><br><span class="line">        </span><br><span class="line">BufferedWriter bf = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out,<span class="string">"UTF-8"</span>));</span><br><span class="line">StringBuilder string=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">string.append(<span class="string">"HTTP/1.1 200 OK\r\n"</span>);</span><br><span class="line">string.append(<span class="string">"Content-type: text/html; charset=UTF-8\r\n"</span>);</span><br><span class="line">string.append(<span class="string">"Connection: keep-alive\r\n"</span>);</span><br><span class="line">string.append(<span class="string">"\r\n"</span>);</span><br><span class="line">string.append(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;title&gt;return&lt;/title&gt;"</span>);</span><br><span class="line">string.append(<span class="string">"&lt;body&gt;Hello World"</span>+br.readLine());</span><br><span class="line">string.append(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">bf.write(string.toString());</span><br><span class="line">bf.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Main main = <span class="keyword">new</span> Main();</span><br><span class="line">main.service();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a><font size="4px"><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Tomcat</a></font></h1><p>代码编写的可以根据用户请求实时调用执行对应逻辑代码的容器。</p><p>目录：</p><p>bin 可执行文件</p><p>conf 配置文件</p><p>lib 存放库文件</p><p>logs 日志</p><p>temp 临时文件</p><p>webapps web应用</p><p>work jsp转换后的servlet文件</p><p><strong>运行</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd bin</span><br><span class="line">sudo ./startup.sh</span><br><span class="line">sudo ./shutdown.sh</span><br></pre></td></tr></table></figure><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a><font size="4px">Servlet</font></h1><p>狭义的servlet指java语言实现的一个接口，广义的servlet指任何实现了这个servlet接口的类。servlet运行于支持java的应用服务器中，用来扩展基于http协议的web服务器</p><h2 id="第一个servlet服务"><a href="#第一个servlet服务" class="headerlink" title="第一个servlet服务"></a><font size="3px">第一个servlet服务</font></h2><p>继承HttpServlet，重写service方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String username=request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String password=request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line"></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">out.write(username);</span><br><span class="line">out.write(password);</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.init(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>log<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runaccpeted.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>log<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/log<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单界面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"./log"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"pwd"</span> id=<span class="string">"pwd"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"登陆"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>流程：</p><p>url: <a href="http://localhost:8080/tomcat/log?username=wt&amp;pwd=123" target="_blank" rel="noopener">http://localhost:8080/tomcat/log?username=wt&amp;pwd=123</a></p><p>http://服务器地址:端口号/webapps下文件名/?请求数据/web.xml中配置的servlet的url-pattern?请求数据</p><h2 id="URL-URI"><a href="#URL-URI" class="headerlink" title="URL,URI"></a><font size="3px">URL,URI</font></h2><p>URI：Uniform Resource Indentifier 统一资源标识符，/tomcat/log?username=wt&amp;pwd=123</p><p>URL：Uniform Resource Location 统一资源定位器 一种具体的URI</p><p> <a href="http://localhost:8080/tomcat/log?username=wt&amp;pwd=123" target="_blank" rel="noopener">http://localhost:8080/tomcat/log?username=wt&amp;pwd=123</a></p><p>URL.openStream() == InputStream 可用于抓取网络信息</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a><font size="3px">生命周期</font></h2><p>整个tomcat中只有一个实例，第一次被调用，加载进内存init方法执行，到tomcat关闭destory方法执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>log<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runaccpeted.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在web.xml中配置load-on-startup使servlet在tomcat加载时就被初始化，数字1表示加载顺序</p><h2 id="doGet-doPost-service"><a href="#doGet-doPost-service" class="headerlink" title="doGet(),doPost(),service()"></a><font size="3px">doGet(),doPost(),service()</font></h2><p>doGet处理get请求</p><p>doPost处理post请求</p><p>service处理所有请求，存在service()，优先调用service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.service(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用父类的service方法时，它处理完本service后调用相应的doGet，doPost方法执行，不存在doGet，doPost则出现405错误</p><p>接口中包括</p><blockquote><p>void init(ServletConfig) 仅第一个请求Servlet时会调用</p><p>void service(ServletRequest request, ServletResponse response)</p><p>Void destory()</p></blockquote><p>文件结构</p><p>webapps</p><p>——FirstProject</p><p>————WEB-INF</p><p>——————classes java文件的class文件放在这里</p><p>——————lib</p><h2 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a><font size="3px">乱码</font></h2><p>String 转换字符集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(uname.getByte(<span class="string">"iso8859-1"</span>),<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><p>request编码格式 –POST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><p>tomcat文件下conf/server.xml</p><p>useBodyEncodingForURI=”true”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"utf-8"</span> <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a><font size="3px">操作流程</font></h2><p>浏览器发起请求到服务器-&gt;服务器接受浏览器请求进行解析，创建request对象存储请求数据 -&gt; 服务器调用对应的servlet进行请求处理，将response对象作为实参传递给servlet。</p><ul><li><p>设置请求编码格式</p></li><li><p>设置响应编码格式</p></li><li><p>获取请求信息</p></li><li><p>处理请求信息</p></li><li><p>响应处理结果</p></li></ul><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a><font size="3px">请求转发</font></h2><p>实现多个servlet联动操作处理请求，让servlet职责更加明确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"相对地址"</span>).forward(request, response);</span><br></pre></td></tr></table></figure><p>一次请求，地址栏信息不变</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><font size="3px">重定向</font></h2><p>解决表单重复提交问题，当前servlet无法处理的请求问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">""</span>);</span><br></pre></td></tr></table></figure><p>两次请求对象，地址栏信息改变</p><p>请求中有表单数据，数据不适合重复提交；数据无法处理，需要重定向到特定资源处理</p><h2 id="ServletRequest"><a href="#ServletRequest" class="headerlink" title="ServletRequest"></a><font size="3px">ServletRequest</font></h2><p>request对象封存当前请求的所有请求信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求编码格式</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//字节数</span></span><br><span class="line"><span class="keyword">int</span> length=request.getContentLength();</span><br><span class="line"><span class="comment">//请求主体类型</span></span><br><span class="line">String mime=request.getContentType();</span><br><span class="line"><span class="comment">//数据key不存在返回null</span></span><br><span class="line"><span class="comment">//参数值 一对一</span></span><br><span class="line">String parameter=request.getContentParameter(name);</span><br><span class="line"><span class="comment">//参数值 一对多</span></span><br><span class="line">String[] values= request.getParameterValues(<span class="string">"hobbies"</span>);</span><br><span class="line"><span class="keyword">for</span>(String str:values)&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//协议</span></span><br><span class="line">String protocol=request.getContentProtocol();</span><br><span class="line"><span class="comment">//URL</span></span><br><span class="line">String url=request.getRequestURL()</span><br><span class="line"><span class="comment">//URI</span></span><br><span class="line">String uri=request.getRequestURI();</span><br><span class="line"><span class="comment">//请求方式</span></span><br><span class="line">String method=request.getMethod();</span><br><span class="line"><span class="comment">//请求头</span></span><br><span class="line">Enumeration&lt;String&gt; heads=request.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span> (heads.hasMoreElements()) &#123;</span><br><span class="line">String key=heads.nextElement();</span><br><span class="line">String value=request.getHeader(key);</span><br><span class="line">System.out.println(key+<span class="string">" = "</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletResponse"><a href="#ServletResponse" class="headerlink" title="ServletResponse"></a><font size="3px">ServletResponse</font></h2><p>response对象用来响应客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应头</span></span><br><span class="line"><span class="comment">//同键覆盖</span></span><br><span class="line">response.setHeader(<span class="string">"Content-type"</span>,<span class="string">"text/html"</span>);</span><br><span class="line"><span class="comment">//同键不覆盖</span></span><br><span class="line">response.addHeader(<span class="string">"Content-type"</span>,<span class="string">"text/html"</span>);</span><br><span class="line"><span class="comment">//编码集</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">//响应状态码</span></span><br><span class="line">response.sendError(<span class="number">404</span>,<span class="string">"Resource Not Found"</span>);</span><br><span class="line"><span class="comment">//java.io.PrintWriter</span></span><br><span class="line">PrintWriter out = response.getWriter(); <span class="comment">//传输文本给客户端</span></span><br></pre></td></tr></table></figure><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a><font size="3px">ServletContext</font></h2><p>Servlet应用程序。每个应用程序只有一个context。</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a><font size="3px">映射</font></h2><ol><li>web.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginSerlvet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjsxt.serlvet.LoginSerlvet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginSerlvet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(name=<span class="string">"myServlet"</span>,urlPatterns=&#123;<span class="string">"/login"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><font size="4px">Cookie</font></h1><p>javax.servlet.http.Cookie;</p><p>实现跨多个页面信息的传递，数据共享</p><p>对象声明在服务端，存储在客户端</p><p>临时存储：存储在客户端内存中，浏览器关闭则cookie失效</p><p>定时存储：存储在客户端硬盘中，有效期内符合路径要求的都存在cookie中    cookie.setMaxAge(时间秒);</p><p>默认请求中都会携带cookie信息，cookie.setPath(“相对路径”);设置cookie有效路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>,request.getParameter(<span class="string">"username"</span>));</span><br><span class="line"><span class="comment">//有效期限 10s</span></span><br><span class="line">cookie.setMaxAge(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//发送给浏览器</span></span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取回数据</span></span><br><span class="line"><span class="comment">//key - getName();</span></span><br><span class="line"><span class="comment">//value - getValue();</span></span><br><span class="line">Cookie[] cookies=request.getCookies();</span><br><span class="line">Cookie recoder = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">"username"</span>))&#123;</span><br><span class="line">      recoder = cookie;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a><font size="4px">Session</font></h1><p>一个用户的不同请求处理数据共享</p><p>用户第一次访问服务器，服务器会创建一个session给此用户，并将session对象的JSESSIONID技术存储到浏览器中，保证用户的其他请求能够获取到同一个session对象，保证不同请求能够获取到共享的数据。</p><p>存储在服务器端</p><p>有效范围为一次会话，在JSESSIONID和session对象不失效情况下存在于整个项目</p><p>依赖cookie技术实现，存储在cookie的临时存储空间中，浏览器关闭则失效，默认失效时间30分钟</p><h2 id="创建Session"><a href="#创建Session" class="headerlink" title="创建Session"></a><font size="3px">创建Session</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session=request.getSession();</span><br></pre></td></tr></table></figure><ul><li>请求中拥有session的标识符也就是JSESSIONID，则返回其对应的session队形</li><li>请求中没有session的标识符也就是JSESSIONID，则创建一个新的session对象，并将其JSESSIONID作为cooike数据存储在浏览器内存中</li><li>session失效则重新创建一个session对象，并将其JSESSIONID存储在浏览器内存中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//false，没有则返回null</span></span><br><span class="line">HttpSession session=request.getSession(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Cookie: JSESSIONID=23F98ACE9F815A5191E2E40044D898F9;</span></span><br><span class="line">System.out.println(session.getId());</span><br></pre></td></tr></table></figure><h2 id="Session失效"><a href="#Session失效" class="headerlink" title="Session失效"></a><font size="3px">Session失效</font></h2><p>设置失效时间 5s</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setMaxInactiveInterval(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>强制session过期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><p>所有项目 conf/web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Session使用"><a href="#Session使用" class="headerlink" title="Session使用"></a><font size="3px">Session使用</font></h2><p>存值, value可以是任意实现了Serializable的Object</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setAttribute(String name,Object value);</span><br></pre></td></tr></table></figure><p>所有key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.<span class="function">Enumeration&lt;String&gt; <span class="title">getAttributeNames</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>servlet容器会为每个HttpSession生成一个唯一标识符，并将标识符作为token JSESSIONID发送给浏览器，在后续请求中浏览器将token传回服务器使得服务器知道是哪个用户在发出请求。</p><h1 id="ServletContext-1"><a href="#ServletContext-1" class="headerlink" title="ServletContext"></a><font size="4px">ServletContext</font></h1><p>实现不同用户的数据共享</p><p>ServletContext对象由服务器创建，一个项目只有一个对象。</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a><font size="3px">创建对象</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">ServletContext c1=request.getServletContext();</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">ServletContext c2 =<span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">ServletContext c3 = request.getSession().getServletContext();</span><br></pre></td></tr></table></figure><h2 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a><font size="3px">存储数据</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1.setAttribute(String key,Object value);</span><br><span class="line">Object = c1.getAttribute(value);</span><br></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><font size="3px">应用场景</font></h2><p>配置全局数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个键</span></span><br><span class="line">c1.getInitParameter(<span class="string">"key"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有键枚举</span></span><br><span class="line">Enumeration&lt;String&gt; str =c1.getInitParameterNames();</span><br></pre></td></tr></table></figure><p>获取项目根目录下资源的绝对路径</p><p>/Users/Learning/Resource/workspace/myEclipse/.metadata/.me_tcat85/webapps/tomcat/index.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1.getRealPath(<span class="string">"index.jsp"</span>);</span><br></pre></td></tr></table></figure><p>获取流对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream in=c1.getResourceAsStream(String path);</span><br></pre></td></tr></table></figure><h1 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a><font size="4px">ServletConfig</font></h1><p>作为servlet的专属配置对象，每个servlet拥有一个ServletConfig对象，用来获取web.xml中的配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig config = <span class="keyword">this</span>.getServletConfig();</span><br><span class="line">String value = getInitParameter(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure><h1 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a><font size="4px">server.xml</font></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">URIEncoding</span>=<span class="string">"utf-8"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">useBodyEncodingForURI</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  </span></span><br><span class="line"><span class="tag">             <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">unpackWARs</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a><font size="4px">热部署</font></h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">path</span>=<span class="string">"/项目别名"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">docBase</span>=<span class="string">"项目绝对路径到项目名"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a><font size="4px">JSP</font></h1><p>java服务器页面 Java Server page。 它本质还是一个servlet</p><p>配置项 tomcat的web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写index.jsp </p><p>在work/Catalina/localhost/project/org/apache/jsp下有</p><blockquote><p>index_jsp.java</p><p>index_jsp.class</p></blockquote><p>index_jsp.java源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">index_jsp</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">HttpJspBase</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceDependent</span>,</span></span><br><span class="line"><span class="class">                 <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> javax.servlet.jsp.JspFactory _jspxFactory =</span><br><span class="line">          javax.servlet.jsp.JspFactory.getDefaultFactory();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line">    javax.servlet.http.HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">    javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">    javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">    javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">      response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line"></span><br><span class="line">      out.write(<span class="string">'\r'</span>);</span><br><span class="line">      out.write(<span class="string">'\n'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsp存在的隐式参数</p><table><thead><tr><th>对象</th><th>类型</th></tr></thead><tbody><tr><td>request</td><td>javax.servlet.HttpServletRequest</td></tr><tr><td>response</td><td>javax.servlet.HttpServletResponse</td></tr><tr><td>out</td><td>javax.servlet.jsp.JspWriter</td></tr><tr><td>session</td><td>javax.servlet.http.httpSession</td></tr><tr><td>application</td><td>javax.servlet.ServletContext</td></tr><tr><td>config</td><td>javax.servlet.ServletConfig</td></tr><tr><td>pageContext</td><td>javax.servlet.jsp.PageContext 页面上下文，封存了其他内置对象。封存了当前jsp的运行信息</td></tr><tr><td>page</td><td>javax.servlet.jsp.HttpJspPage</td></tr><tr><td>exception</td><td>java.lang.Throwable  – &lt;%@page isErrorPage=true %&gt;</td></tr></tbody></table><p>PageContext可以设定存取范围</p><blockquote><p>page 当前页</p><p>request 当前ServletRequest</p><p>session 当前HttpSession</p><p>application ServletContext</p></blockquote><p>e.g.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"> pageContext.setAttribute(<span class="string">"username"</span>,user,PageContext.REQUEST_SCOPE);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a><font size="3px">指令</font></h2><p>page</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.util.Date,java.util.List"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> session=<span class="keyword">false</span> %&gt; 则该servlet无session隐式对象</span><br><span class="line">&lt;%<span class="meta">@page</span> buffer=<span class="number">8</span> %&gt; out缓冲区大小，默认为<span class="number">8</span>kb</span><br><span class="line">&lt;%<span class="meta">@page</span> autoFlush=<span class="keyword">true</span> %&gt; 缓冲区满时自动刷新</span><br><span class="line">&lt;%<span class="meta">@page</span> is ThreadSafe=<span class="keyword">true</span> %&gt; 线程安全级别</span><br><span class="line">&lt;%<span class="meta">@page</span> info=“ %&gt; getServletInfo方法返回值</span><br><span class="line">&lt;%<span class="meta">@page</span> errorPage=<span class="string">"error.html"</span> %&gt; 错误跳转网页</span><br><span class="line">&lt;%<span class="meta">@page</span> isErrorPage=<span class="keyword">true</span> %&gt; 页面是否负责处理错误</span><br><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">"text/html"</span> %&gt; response内容类型</span><br><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt; 页面字符编码，默认ISO-<span class="number">8859</span>-<span class="number">1</span></span><br><span class="line">&lt;%<span class="meta">@page</span> isELIgnored=<span class="keyword">true</span> %&gt; 忽略EL表达式</span><br><span class="line">&lt;%<span class="meta">@page</span> language=<span class="string">"java"</span> %&gt; 页面脚本语言</span><br></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a><font size="3px">脚本</font></h2><p>java代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% System.out.println(<span class="string">"index"</span>); %&gt;</span><br></pre></td></tr></table></figure><p>表达式 </p><p>结果会嵌入out.write() 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=Hello World %&gt;</span><br></pre></td></tr></table></figure><p>全局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Date();</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line">  </span><br><span class="line">&lt;%=getDate()%&gt;</span><br></pre></td></tr></table></figure><p><strong>动作</strong></p><p>创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id = <span class="string">"today"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span>&gt;</span><br><span class="line">&lt;%=today%&gt;</span><br></pre></td></tr></table></figure><p>创建属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:setProperty name=<span class="string">"username"</span> property=<span class="string">"name"</span> value=<span class="string">"abc"</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">"username"</span> property=<span class="string">"name"</span>/&gt;</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a><font size="3px">引入</font></h2><p>被引入 的jsp不会被编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"/copyrigth.jsp"</span> %&gt;</span><br></pre></td></tr></table></figure><p>动态引入</p><p>会单独生成jsp对应的java文件，引用java文件中的方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"menu.jsp"</span>&gt;</span><br><span class="line">&lt;jsp:param name=<span class="string">"text"</span> value=<span class="string">"How are you?"</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><p>include指令发生在页面转换时，include动作发生在请求时</p><p>include指令处理的可以是静态页面，include动作处理的是jsp页面</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a><font size="3px">跳转</font></h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"/login.jsp"</span>&gt;</span><br><span class="line">&lt;jsp:param name=<span class="string">""</span> value=<span class="string">""</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a><font size="4px">ajax</font></h1><p>实现异步访问</p><p>ajax.onreadystatechange 会调用4次</p><ul><li><p>未调用open方法时</p></li><li><p>调用open方法时</p></li><li><p>调用send方法时</p></li><li><p>返回结果时</p></li></ul><p>ajax.readyState返回第几次</p><p>ajax.status 返回响应状态码  200 404 500</p><p>send() 用于post请求中，输入参数</p><p>还要添加 setRequestHeader 以键值对的方式传递数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ajax.open(<span class="string">"post"</span>,<span class="string">"ajax"</span>,<span class="literal">true</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send(<span class="string">"name=w&amp;&amp;age=3"</span>);</span><br></pre></td></tr></table></figure><p>ajax.open(“post”,”ajax”,true);</p><p>ajax.open(method,urlPattern,async);</p><p>async -  true 异步； - false 同步</p><p>应用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">#showdiv&#123;</span><br><span class="line">width:<span class="number">500</span>px;</span><br><span class="line">height:<span class="number">100</span>px;</span><br><span class="line">border:1px #000 solid;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function">function <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> ajax;</span><br><span class="line"><span class="keyword">if</span>(window.XMLHttpRequest)&#123;</span><br><span class="line">ajax=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(window.ActiveXObject)&#123;</span><br><span class="line">ajax=<span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax.onreadystatechange = function()&#123;</span><br><span class="line"><span class="keyword">if</span>(ajax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> result=ajax.responseText;</span><br><span class="line"><span class="comment">//alert(result);</span></span><br><span class="line"><span class="keyword">var</span> showdiv = document.getElementById(<span class="string">"showdiv"</span>);</span><br><span class="line">showdiv.innerHTML=result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ajax.open(<span class="string">"get"</span>, <span class="string">"ajax"</span>, <span class="keyword">true</span>);</span><br><span class="line">ajax.send(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"搜索"</span> onclick=<span class="string">"getData()"</span>/&gt;</span><br><span class="line">&lt;div id="showdiv"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="EL"><a href="#EL" class="headerlink" title="EL"></a><font size="4px">EL</font></h1><p>Experssion Language</p><p>${ } 运算结果强制为String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;user[name]&#125; == $&#123;user.name&#125;</span><br></pre></td></tr></table></figure><p>隐式对象</p><table><thead><tr><th align="left">对象</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pageContext</td><td align="left">当前页面javax.servlet.jsp.PageContext  （9大隐式对象）${pageContext.session.id}</td></tr><tr><td align="left">initParam</td><td align="left">所有context初始化参数并以参数名称为键的map</td></tr><tr><td align="left">param</td><td align="left">所有请求参数并以参数名称为键的map</td></tr><tr><td align="left">paramValues</td><td align="left">所有请求参数并以参数名称为键的map</td></tr><tr><td align="left">header</td><td align="left">所有请求标头并以标头名称为键的map $[header[“accept-language”]]</td></tr><tr><td align="left">cookie</td><td align="left">当前请求对象中所有Cookie对象的map</td></tr><tr><td align="left">applicationScope</td><td align="left">ServletContext对象中所有属性并以属性名称为键的map</td></tr><tr><td align="left">sessionScope</td><td align="left">httpSession对象中所有属性并以属性名称为键的map</td></tr></tbody></table><p>empty运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;empty x&#125;  <span class="keyword">true</span>/<span class="keyword">false</span></span><br></pre></td></tr></table></figure><h1 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a><font size="4px">JSTL</font></h1><p>JavaServer Pages Standard Tag Library标准标签类库</p><table><thead><tr><th>类别</th><th>URI</th><th>前缀</th></tr></thead><tbody><tr><td>core</td><td><a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>xml</td><td><a href="http://java.sun.com/jsp/jstl/xml" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr><tr><td>118n</td><td><a href="http://java.sun.com/jsp/jstl/fmt" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>数据库</td><td><a href="http://java.sun.com/jsp/jstl/sql" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>功能</td><td><a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td></tr></tbody></table><p>声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br></pre></td></tr></table></figure><p>通用标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">"$&#123;&#125;"</span> <span class="keyword">default</span>=<span class="string">""</span>&gt;</span><br><span class="line">&lt;/c:out&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"变量"</span> value=<span class="string">"值"</span> scope=<span class="string">"page/request/session/application"</span>/&gt;</span><br><span class="line">&lt;c:set target=<span class="string">"$&#123;address&#125;"</span> property=<span class="string">"city"</span> value=<span class="string">"Tokyo"</span>/&gt;</span><br><span class="line"><span class="comment">//Tokyo 赋给address的city属性</span></span><br><span class="line"></span><br><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">"删除变量"</span> scope=<span class="string">"page/request/session/application"</span>&gt;</span><br></pre></td></tr></table></figure><p>条件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;测试语句&#125;"</span> scope=<span class="string">"page/request/session/application"</span>&gt;</span><br><span class="line">    成功时输出</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"!测试语句"</span> scope=<span class="string">"page/request/session/application"</span>&gt;</span><br><span class="line">    条件取反时输出</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test="$&#123;测试语句&#125;"&gt; &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="$&#123;测试语句&#125;"&gt; &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt; &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>迭代</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 2 3 4 5</span></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"x"</span> begin=<span class="string">"1"</span> end=<span class="string">"5"</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;x&#125;"</span>/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"x"</span> items=<span class="string">"$&#123;param.info&#125;"</span> step=<span class="string">"2"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">  &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;status.count%2==0&#125;"</span>&gt;</span><br><span class="line">     javax.servlet.jsp.jstl.LoopTagStatus接口，返回当前迭代次数 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>...</span><br><span class="line">  &lt;/c:if&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;x&#125;"</span>/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a b c delims 分隔符</span></span><br><span class="line">&lt;c:forTokens <span class="keyword">var</span>=<span class="string">"x"</span> items=<span class="string">"a,b,c"</span> delims=<span class="string">","</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">   $&#123;x&#125;</span><br><span class="line">&lt;/c:forTokens&gt;</span><br></pre></td></tr></table></figure><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a><font size="4px">监听器</font></h1><p>监听器级别：ServletContext，HttpSession，ServletRequest</p><p>监听器的注册</p><p>1 注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span></span></span><br></pre></td></tr></table></figure><p>2 添加到web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ServletContext监听器"><a href="#ServletContext监听器" class="headerlink" title="ServletContext监听器"></a><font size="3px">ServletContext监听器</font></h2><p>javax.servlet.*;</p><p><strong>ServletContextListener</strong>对ServletContext的初始化和解构作出响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"><span class="comment">//ServletContext初始化时，所有已注册的ServletContextListener中调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent e)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">  ServletContext application=e.getServletContext();</span><br><span class="line">  application.setAttribute(<span class="string">"test"</span>,<span class="string">"1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ServletContext销毁时，所有已注册的ServletContextListener中调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ServletContextAttributeListener</strong> ServletContext添加，删除，替换属性时会收到通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">ServletContextAttributeListener</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent e)</span> </span>&#123;</span><br><span class="line">    e.getName(); <span class="comment">//属性名</span></span><br><span class="line">e.getValue();<span class="comment">//属性值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent e)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session监听器"><a href="#Session监听器" class="headerlink" title="Session监听器"></a><font size="3px">Session监听器</font></h2><p>javax.servlet.http.*;</p><p><strong>HttpSessionListener</strong></p><p>HttpSession创建或销毁，会调用所有注册的HttpSessionListener。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">     HttpSession session = e.getSession();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HttpSessionAttributeListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HttpSessionActivationListener</strong></p><p>为了节省内存将访问量少的session序列化迁移到存储设备中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionActivationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDidActivate</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;</span><br><span class="line">e.getSession();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionWillPassivate</span><span class="params">(HttpSessionEvent e)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HttpSessionBindingListener</strong></p><p>绑定HttpSession或者取消绑定时触发</p><p>类实现HttpSessionBindingListener接口，保存HttpSession时，对象值会自动更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">HttpSessionBindingListener</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;</span><br><span class="line">    String name = e.getName();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent e)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletRequest监听器"><a href="#ServletRequest监听器" class="headerlink" title="ServletRequest监听器"></a><font size="3px">ServletRequest监听器</font></h2><p><strong>ServletRequestListener</strong> 对ServletRequest的创建和销毁作出响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent e)</span> </span>&#123;</span><br><span class="line">    ServletRequest request=e.getServletRequest();</span><br><span class="line">    ServletContext context=e.getServletContext();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ServletRequestAttributeListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent e)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AsyncListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">AsyncListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(AsyncEvent e)</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(AsyncEvent e)</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartAsync</span><span class="params">(AsyncEvent e)</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">(AsyncEvent e)</span> <span class="keyword">throws</span> IOException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a><font size="4px">过滤器</font></h1><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a><font size="3px">注册</font></h1><p>/* 全拦截 </p><p>/log 特定拦截</p><p>注解方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(filterName=<span class="string">""</span>,urlPatterns=&#123;<span class="string">"/*"</span>&#125;)</span><br></pre></td></tr></table></figure><p>xml方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mappring</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mappring</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><p>init 服务器启动则启动</p><p>doFilter 核心方法 需要手动放行  chain.doFilter(request, response);</p><p>destroy  服务器关闭则关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    </span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a><font size="4px">文件上传下载</font></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"fileUp"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"filename"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Servlet</p><p>MultipartConfig限制：</p><p>maxFileSize文件容量</p><p>maxRequestSize 许多部分HTTP请求最大容量</p><p>location文件保存到磁盘指定位置</p><p>fileSizeThreshold溢出则写入磁盘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns=<span class="string">"/file"</span>)</span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">file</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">Part part = request.getPart(<span class="string">"filename"</span>);</span><br><span class="line">    <span class="comment">//form-data; name="filename"; filename="annotations-api.jar"</span></span><br><span class="line">String file = part.getHeader(<span class="string">"content-disposition"</span>);</span><br><span class="line">String[] element=file.split(<span class="string">";"</span>);</span><br><span class="line"><span class="keyword">for</span> (String str:element) &#123;</span><br><span class="line"><span class="keyword">if</span>(str.trim().startsWith(<span class="string">"filename"</span>))&#123;</span><br><span class="line">String temp=str.substring(str.indexOf(<span class="string">"="</span>)+<span class="number">1</span>);</span><br><span class="line">part.write(System.getProperty(<span class="string">"user.dir"</span>)+<span class="string">"/WebRoot/"</span>+temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">Collection&lt;Part&gt; parts = request.getParts();</span><br><span class="line">    <span class="keyword">for</span> (Part path:paths) &#123;</span><br><span class="line"><span class="keyword">if</span>(path.getContentType()!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;开发Web应用程序技术学习&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Servlet" scheme="https://www.runaccpeted.com/categories/Servlet/"/>
    
    
      <category term="Servlet" scheme="https://www.runaccpeted.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-类加载机制与反射</title>
    <link href="https://www.runaccpeted.com/2019/09/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <id>https://www.runaccpeted.com/2019/09/19/Java基础知识-类加载机制与反射/</id>
    <published>2019-09-19T14:38:57.000Z</published>
    <updated>2019-09-20T10:59:05.270Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">实现自定义类加载器，动态创建java对象</blockquote><a id="more"></a><h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a><font size="4px">类加载过程</font></h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a><font size="3px">类加载</font></h2><p>将类的class文件读入内存，并为之创建一个java.lang.Class对象</p><p>类加载由类加载器来完成，类加载器由jvm提供</p><p>可以通过<strong>extends ClassLoader</strong>实现自定义类加载器</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a><font size="3px">连接</font></h2><p>把类的二进制数据合并到JRE中</p><blockquote><p>验证</p></blockquote><p>检验被加载的类是否有正确的内部结构，与其他类协调一致</p><blockquote><p>准备</p></blockquote><p>为类的变量分配内存，设置初始值</p><blockquote><p>解析</p></blockquote><p>将类的二进制数据中的符号引用替换成直接引用</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><font size="3px">初始化</font></h2><p>初始化类变量</p><blockquote><p>声明类变量时指定初始值</p><p>使用静态初始化块为类变量指定初始值</p></blockquote><p><font color="#f00">初始化时机</font></p><blockquote><p>创建类实例</p><p>调用类方法</p><p>访问类变量</p><p>调用反射，系统未初始化类</p><p>初始化子类，jvm会先初始化父类</p><p>调用java XX</p></blockquote><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a><font size="3px">类加载器</font></h2><p>类用 【包名+类名+类加载器】 作为唯一标识</p><p> Bootstrap ClassLoader 根类加载器</p><blockquote><p>加载java核心类。由jvm自身实现。String ，System这些核心类库在/jre/lib/rt.jar中</p></blockquote><p>Extension ClassLoader 扩展类加载器</p><blockquote><p>ClassLoader extension=system.getParent(); //ExtClassLoader</p><p>加载JRE扩展目录中jar包类 /jre/lib/ext</p></blockquote><p>System ClassLoader 系统类加载器</p><blockquote><p>ClassLoader system=ClassLoader.getSystemClassLoader();  //AppClassLoader</p><p>加载环境变量所指定的类路径。</p></blockquote><p>URLClassLoader类</p><blockquote><p>作为SystemClassLoader,ExtensionClassLoader的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; URL[] urls = &#123;<span class="keyword">new</span> URL(<span class="string">"file:mysql-connector-java-bin.jar"</span>)&#125;;</span><br><span class="line">&gt; URLClassLoader loader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">&gt; Driver driver = (Driver)loader.loadClass(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstamce();</span><br><span class="line">&gt; </span><br><span class="line">&gt; Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">&gt; p.setProperty(<span class="string">"user"</span>,user);</span><br><span class="line">&gt; p.setProperty(<span class="string">"pwd"</span>,pwd);</span><br><span class="line">&gt; Connection con = driver.connect(url,p);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a><font size="3px">类加载机制</font></h2><blockquote><p>全盘负责</p></blockquote><blockquote><p>父类委托</p></blockquote><blockquote><p>缓存机制</p></blockquote><p>保证所有加载过的class都被缓存，当缓存区中不存在class对象时，系统才读取class二进制文件，转换成class对象，存入缓存区。</p><h2 id="自定义类加载"><a href="#自定义类加载" class="headerlink" title="自定义类加载"></a><font size="3px">自定义类加载</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends ClassLoader&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译java文件方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compile</span><span class="params">(String javaFile)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">  Process p = Runtime.getRuntime().exec(<span class="string">"javac "</span>+javaFile);</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    p.waitFor();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ret = p.exitValue();</span><br><span class="line">  <span class="keyword">return</span> ret==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a><font size="4px">反射</font></h1><h2 id="获得class对象"><a href="#获得class对象" class="headerlink" title="获得class对象"></a><font size="3px">获得class对象</font></h2><ul><li>Class.forName(“”)</li><li>Person.class</li><li>Person.getClass()</li></ul><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a><font size="3px">获取信息</font></h2><p>所有public构造器  getConstructors() </p><p>不论权限的构造器 getDeclaredConstructors() </p><p>带参数的方法 getMethod(“test”,String.class) 方法名，形参</p><p>所有方法 getMethods()</p><p>不论权限的所有方法 getDeclaredMethods()</p><p>成员变量 getFields()</p><p>不论权限的所有成员变量 getDeclaredFields()</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;实现自定义类加载器，动态创建java对象&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-网络编程</title>
    <link href="https://www.runaccpeted.com/2019/09/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.runaccpeted.com/2019/09/19/Java基础知识-网络编程/</id>
    <published>2019-09-19T11:17:35.000Z</published>
    <updated>2019-09-19T14:37:46.605Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">计算机网络知识及网络通信实现</blockquote><a id="more"></a><h1 id="网络协议模型"><a href="#网络协议模型" class="headerlink" title="网络协议模型"></a><font size="4px">网络协议模型</font></h1><table><thead><tr><th align="center">OSI</th><th align="center">TCP/IP</th></tr></thead><tbody><tr><td align="center">应用层</td><td align="center">应用层</td></tr><tr><td align="center">表示层</td><td align="center"></td></tr><tr><td align="center">会话层</td><td align="center"></td></tr><tr><td align="center">传输层</td><td align="center">传输层</td></tr><tr><td align="center">网络层</td><td align="center">网络层</td></tr><tr><td align="center">数据链路层</td><td align="center">物理+数据链路层</td></tr><tr><td align="center">物理层</td><td align="center"></td></tr></tbody></table><h1 id="IP及端口号"><a href="#IP及端口号" class="headerlink" title="IP及端口号"></a><font size="4px">IP及端口号</font></h1><p>ip：唯一标识网络中的一个通信实体。      –&gt; 住址</p><p>端口号：应用程序与外界交流的出入口。 –&gt; 房间号</p><h1 id="网络支持"><a href="#网络支持" class="headerlink" title="网络支持"></a><font size="4px">网络支持</font></h1><h1 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a><font size="3px">InetAddress</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InetAddress ip=InetAddress.getByName(<span class="string">"www.google.com"</span>);</span><br><span class="line"><span class="comment">//可达</span></span><br><span class="line">ip.isReachable(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//ip字符串</span></span><br><span class="line">ip.getHostAddress();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据IP地址得InetAddress</span></span><br><span class="line">ip = InetAddress.getByAddress(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">127</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a><font size="4px">URL</font></h1><p>%…. 当URL中包含非西欧字符的字符串时，字符串转为application/x-www-form-urlencoded MIME</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String keyword = URLDecoder.decode(<span class="string">"%...."</span>,<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">String urlStr = URLEncoder.encode(<span class="string">"讲义"</span>,<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><p>URL 统一资源定位器(Uniform Resource Locator) 指向网络中的资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol://host:port/resourceName</span><br></pre></td></tr></table></figure><p>URI 统一资源标识符(Uniform Resource Identifiers),URL是URI的特例</p><p>读取URL资源的InputSteam  openStream()</p><p>下载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.google.com"</span>);</span><br><span class="line">HttpURLConnection conn = (HttpURLConnection)url.openConnection();</span><br><span class="line">conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件大小</span></span><br><span class="line"><span class="keyword">int</span> fileSize = conn.getContentLength();</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line">InputStream in = conn.getInputStream();</span><br></pre></td></tr></table></figure><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a><font size="4px">TCP</font></h1><p>面向连接</p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">  Socket client = server.accpet();</span><br><span class="line">  PrintStream ps = <span class="keyword">new</span> PrintStream(client.getOutputStream());</span><br><span class="line">  ps.println(<span class="string">"Hello"</span>);</span><br><span class="line">  ps.close();</span><br><span class="line">  client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Socket client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">BufferReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(client.getInputStream()));</span><br><span class="line"></span><br><span class="line">String str = reader.readLine(); <span class="comment">//Hello</span></span><br></pre></td></tr></table></figure><p>可以建立超时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.setSoTimeout(<span class="number">1000</span>); <span class="comment">//1s</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Socket client = <span class="keyword">new</span> Socket();</span><br><span class="line">client.connect(<span class="keyword">new</span> InetAddress(host,port),<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a><font size="4px">UDP</font></h1><p>面向非连接</p><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建服务端</span></span><br><span class="line">DatagramSocket server = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">//准备接收容器</span></span><br><span class="line"><span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//包 接收数据</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,container.length);</span><br><span class="line">server.receive(packet);</span><br><span class="line"><span class="comment">//分析数据</span></span><br><span class="line"><span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line"><span class="keyword">int</span> len = packet.getLength();</span><br><span class="line">String str = <span class="keyword">new</span> String(data,<span class="number">0</span>,len);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">server.close();</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建客户端</span></span><br><span class="line">DatagramSocket client = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line">String str=<span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] container = str.getBytes();</span><br><span class="line"><span class="comment">//打包 指定端口</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,container.length，<span class="keyword">new</span> InetAddress(<span class="string">"localhost"</span>,<span class="number">6666</span>));</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line">client.send(packet);</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">client.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;计算机网络知识及网络通信实现&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-IO</title>
    <link href="https://www.runaccpeted.com/2019/09/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-IO/"/>
    <id>https://www.runaccpeted.com/2019/09/19/Java基础知识-IO/</id>
    <published>2019-09-19T03:08:35.000Z</published>
    <updated>2019-09-19T07:20:28.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">IO流，NIO</blockquote><a id="more"></a><h1 id="File"><a href="#File" class="headerlink" title="File"></a><font size="4px">File</font></h1><h2 id="访问文件名相关方法"><a href="#访问文件名相关方法" class="headerlink" title="访问文件名相关方法"></a><font size="3px">访问文件名相关方法</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"/Users/Learning/java/images/a.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件名 String</span></span><br><span class="line">file.getName();</span><br><span class="line"><span class="comment">//路径名 String</span></span><br><span class="line">file.getPath();</span><br><span class="line"><span class="comment">//绝对路径名 String</span></span><br><span class="line">file.getAbsolutePath();</span><br><span class="line"><span class="comment">//父目录名 String</span></span><br><span class="line">file.getParent();</span><br><span class="line"><span class="comment">//重命名 boolean</span></span><br><span class="line">file.renameTo(name);</span><br></pre></td></tr></table></figure><h2 id="检测文件相关方法"><a href="#检测文件相关方法" class="headerlink" title="检测文件相关方法"></a><font size="3px">检测文件相关方法</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file.exist();</span><br><span class="line">file.CanWrite();</span><br><span class="line">file.canRead();</span><br><span class="line">file.isFile();</span><br><span class="line">file.isDirectory();</span><br><span class="line">file.isAbsolute();</span><br><span class="line">file.lastModified(); <span class="comment">//最后修改时间</span></span><br><span class="line">file.length(); <span class="comment">//文件内容长度</span></span><br></pre></td></tr></table></figure><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a><font size="3px">操作方法</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">file.createNewFile();  <span class="comment">//文件不存在时</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> File <span class="title">createTempFile</span><span class="params">(prefix,suffix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> File <span class="title">createTempFile</span><span class="params">(prefix,suffix,directory)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteOnExit</span><span class="params">()</span></span>; <span class="comment">//jvm退出时删除文件及目录</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span>; <span class="comment">//创建目录，file必须是一个路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//file对象所有子文件名和路径名</span></span><br><span class="line">String[] list(); </span><br><span class="line"><span class="comment">//file对象所有子文件和路径</span></span><br><span class="line">File[] listFiles(); </span><br><span class="line"><span class="comment">//系统所有根路径</span></span><br><span class="line"><span class="keyword">static</span> File[] listRoots();</span><br></pre></td></tr></table></figure><p>文件过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file.list(FilenameFilter);</span><br><span class="line"><span class="comment">//FilenameFilter接口中的实现类</span></span><br><span class="line">accept(File dir,String name)&#123;name.endWith(<span class="string">".java"</span>);&#125;</span><br><span class="line"></span><br><span class="line">String[] files = file.list(</span><br><span class="line">  (dir,name)-&gt;name.endWith(<span class="string">"java"</span>)||<span class="keyword">new</span> File(name).isDirectory());</span><br></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a><font size="4px">IO流</font></h1><h1 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a><font size="3px">流的分类</font></h1><ul><li><p>输入流 vs 输出流</p><p>InputStream/Reader vs  OutputStream/Writer</p></li><li><p>字节流 vs 字符流</p><p>InputStream vs Reader</p><p>OutputStream vs Writer</p></li><li><p>处理流 节点流</p><p>Buffered</p><p>ByteArray</p></li></ul><h1 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a><font size="3px">输入流</font></h1><p><strong>InputStream字节输入流</strong></p><p>int read() 读取单个字节</p><p>int read(byte[] b) 最多读取b.length个字节</p><p>int read(byte[] b，int off, int len) 最多读取len个字节，下次从off位置开始读取</p><p><strong>Reader 字符输入流</strong></p><p>int read() 读取单个字符</p><p>int read(char[] b) 最多读取b.length个字符</p><p>int read(char[] b，int off, int len) 最多读取len个字符，下次从off位置开始读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InputStream in = <span class="keyword">new</span> InputStream(File);</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len=in.read(buff))!=<span class="number">0</span>)&#123;</span><br><span class="line">  String str = in.read(buff,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a><font size="3px">输出流</font></h1><p><strong>OutputStream字节输出流</strong></p><p>int write(Object obj) 单个字节</p><p>int write(byte[] b) 字节数组输出到输出流中</p><p>int read(byte[] b，int off, int len) 从off位置开始，长度为len的字节输出到输出流</p><p><strong>Writer 字符输出流</strong></p><p>int read() 单个字符</p><p>int read(char[] b) 字符数组输出到输出流中</p><p>int read(char[] b，int off, int len) 从off位置开始，长度为len的字符输出到输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OutputStream out = <span class="keyword">new</span> OutputStream(File);</span><br><span class="line">out.write(<span class="number">1</span>);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure><h1 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a><font size="3px">转换流</font></h1><p>编码 字符-&gt;字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(name)),<span class="string">"UTF-8"</span>));</span><br><span class="line">String str = br.readLine();</span><br></pre></td></tr></table></figure><p>解码 字节-&gt;字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> File(name)),<span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><font size="3px">重定向</font></h1><p>System.in –&gt; InputStream</p><p>System.err  –&gt; PrintStream(OutputStream)</p><p>System.out  –&gt; PrintStream(OutputStream).println();</p><p>重定向 输出到文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setErr</span><span class="params">(PrintStream p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setIn</span><span class="params">(InputStream p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOut</span><span class="params">(PrintStream p)</span></span>;</span><br></pre></td></tr></table></figure><p>回控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out(<span class="keyword">new</span> PrintStream(<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(FileDescriptor.out)),<span class="keyword">true</span>));</span><br></pre></td></tr></table></figure><h1 id="任意访问RandomAccessFile"><a href="#任意访问RandomAccessFile" class="headerlink" title="任意访问RandomAccessFile"></a><font size="3px">任意访问RandomAccessFile</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(File,访问模式);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getFilePointer</span><span class="params">()</span></span>; <span class="comment">//返回当前位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seek</span><span class="params">(<span class="keyword">long</span> pos)</span></span>; <span class="comment">//定位到pos位置</span></span><br></pre></td></tr></table></figure><p>访问模式可以为：</p><ul><li>r  :读</li><li>rw ：读写</li><li>rws ：读写并同步到底层存储设备</li><li>rwd ：每个更新同步到底层存储设备</li></ul><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a><font size="3px">序列化</font></h1><p>Serializable接口 仅为可序列化的标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObjectOutputStream obj = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> File(name));</span><br><span class="line">obj.writeObject(<span class="keyword">new</span> A());</span><br><span class="line">obj.flush();</span><br><span class="line">obj.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ObjectInputStream obj = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> File(name));</span><br><span class="line">A a = (A)obj.readObject();</span><br><span class="line">obj.close();</span><br></pre></td></tr></table></figure><p>序列化检查对象对象的序列号，只有对象从未被序列化过，系统才会将该对象序列化，序列号存在的情况下，仅返回序列号</p><p>transient代表该变量不被序列化，序列时忽略该实例变量</p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a><font size="4px">NIO</font></h1><p>传统的输入流在没有读取到数据时，会发生阻塞，IO流都是阻塞式输入输出，他们都依赖于字节的移动来处理数据。</p><p>新的IO采用内存映射文件的方式处理输入输出，将文件的一段区域映射到内存中。</p><p>Channel 通道，对应于传统IO，提供的map()将一块数据映射到内存中</p><p>Buffer  缓冲数组，发送到Channel的数据先放入Buffer中，从Channel中读取的数据也先放入Buffer中。</p><h1 id="Bufffer"><a href="#Bufffer" class="headerlink" title="Bufffer"></a><font size="3px">Bufffer</font></h1><ul><li><p>容量capacity</p><p>最大数据容量</p></li><li><p>界限limit</p><p>第一个不应该被操作的索引</p></li><li><p>位置position</p><p>指向下一个可操作的索引</p><p><img src="/2019/09/19/Java基础知识-IO/a.jpg" alt></p></li></ul><p>装入数据结束后，调用Buffer的flip()方法，limit设置为position所在位置，position为0</p><p>输出数据结束后，调用clear()，position为0，limit为capacity</p><h1 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a><font size="3px">Channel</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FileChannel in = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">""</span>)).getChannel();</span><br><span class="line"></span><br><span class="line">FileChannel out = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">""</span>)).getChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据映射到ByteBuffer</span></span><br><span class="line">MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY,<span class="number">0</span>,<span class="keyword">new</span> File(<span class="string">""</span>).length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建解码器</span></span><br><span class="line">Charset ch = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line">out.write(buffer);</span><br><span class="line"><span class="comment">//复原buffer</span></span><br><span class="line">buffer.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">CharsetDecoder decoder= ch.newDecoder();</span><br><span class="line">CharsetBuffer cb = decoder.decode(buffer);</span><br><span class="line">cb.toString();</span><br></pre></td></tr></table></figure><h1 id="文件锁"><a href="#文件锁" class="headerlink" title="文件锁"></a><font size="3px">文件锁</font></h1><p>FileLock 并发锁定文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileLock lock = channel.tryLock();</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">lock.release();</span><br></pre></td></tr></table></figure><p><strong>lock()</strong> 在没有得到文件锁时，一直阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span><br></pre></td></tr></table></figure><p>从position位置开始，长度为size的文件段阻塞式加锁</p><p><strong>tryLock()</strong> 尝试获取文件锁，没有则返回null，有则返回文件锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trylock(<span class="keyword">long</span> position, <span class="keyword">long</span> size, <span class="keyword">boolean</span> shared)</span><br></pre></td></tr></table></figure><p>shared为true则为共享锁，允许多进程读取文件。</p><p>为false，锁定文件的读写。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;IO流，NIO&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-注解</title>
    <link href="https://www.runaccpeted.com/2019/09/19/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%B3%A8%E8%A7%A3/"/>
    <id>https://www.runaccpeted.com/2019/09/19/Java基础知识-注解/</id>
    <published>2019-09-18T17:12:22.000Z</published>
    <updated>2019-09-18T17:54:57.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Annotation不同于注释，可以在编译，类加载时被读取，反射可以得Annotation对象，从而得元数据</blockquote><a id="more"></a><h1 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a><font size="4px">基本注解</font></h1><ul><li>@Override</li><li>@Deprecated</li><li>@SuppressWarnings</li><li>@SafeVarargs</li><li>@FunctionalInterface</li></ul><h1 id="Override-重写父类方法"><a href="#Override-重写父类方法" class="headerlink" title="@Override 重写父类方法"></a><font size="3px">@Override 重写父类方法</font></h1><p>只作为修饰方法，限定重写父类方法</p><h1 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a><font size="3px">@Deprecated</font></h1><p>已过时</p><h1 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a><font size="3px">@SuppressWarnings</font></h1><p>取消显示编译器警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(value=<span class="string">"unchecked"</span>)</span><br></pre></td></tr></table></figure><h1 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a><font size="3px">@SafeVarargs</font></h1><p>不带泛型的对象赋给一个带泛型的变量而产生堆污染，@SafeVarargs抑制警告</p><h1 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a><font size="3px">@FunctionalInterface</font></h1><p>指定某个接口必须是函数式接口。保证接口只能包含一个抽象方法。</p><h1 id="修饰元Annotation"><a href="#修饰元Annotation" class="headerlink" title="修饰元Annotation"></a><font size="4px">修饰元Annotation</font></h1><h1 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><font size="3px">@Retention</font></h1><p>修饰Annotation定义，指定Annotation保留时间。</p><ul><li><p>RetentionPolicy.CLASS 默认值</p><p>注解记录在class文件中，jvm不可获取注解信息</p></li><li><p>RetentionPolicy.RUNTIME</p><p>注解记录在class文件中，jvm可获取注解信息，程序也可以反射获取注解信息</p></li><li><p>RetentionPolicy.SOURCE</p><p>注解记录在源代码中，编译器直接丢弃该注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(value=RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test()&#123; &#125;</span><br></pre></td></tr></table></figure><h1 id="Target"><a href="#Target" class="headerlink" title="@Target"></a><font size="3px">@Target</font></h1><p>修饰注解，指定被修饰注解能用于修饰哪些程序单元</p><ul><li>ElementType.ANNOTATION_TYPE 注解</li><li>ElementType.CONSTRICTOR 构造器</li><li>ElementType.FIELD 成员变量</li><li>ElementType.LOCAL_VARIABLE 局部变量</li><li>ElementType.METHOD 方法</li><li>ElementType.PARAMETER 参数</li><li>ElementType.PACKAGE 包</li><li>ElementType.TYPE 类，接口，枚举定义</li></ul><h1 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a><font size="3px">@Documented</font></h1><p>使用该注解修饰的程序元素的API文档中会包含该注解说明。</p><h1 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a><font size="3px">@Inherited</font></h1><p>注解具有继承性，类使用@Xxx注解，子类也会自动用@Xxx</p><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a><font size="4px">自定义注解</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> mytag&#123;</span><br><span class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@mytag</span>(name=<span class="string">""</span>,age=<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>定义初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> mytag&#123;</span><br><span class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="提取注解信息–-反射"><a href="#提取注解信息–-反射" class="headerlink" title="提取注解信息– 反射"></a><font size="4px">提取注解信息– 反射</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有注解</span></span><br><span class="line">Annotation[] array = Class.forName(<span class="string">"Test"</span>).getMethod(<span class="string">"info"</span>).getAnnotations();</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接注解</span></span><br><span class="line">array = Class.forName(<span class="string">"Test"</span>).getMethod(<span class="string">"info"</span>).getDeclaredAnnotations();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Annotation不同于注释，可以在编译，类加载时被读取，反射可以得Annotation对象，从而得元数据&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="https://www.runaccpeted.com/2019/09/18/maven/"/>
    <id>https://www.runaccpeted.com/2019/09/18/maven/</id>
    <published>2019-09-17T23:27:17.000Z</published>
    <updated>2019-10-08T14:21:56.413Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Maven学习</blockquote><a id="more"></a><h1 id="Ant"><a href="#Ant" class="headerlink" title="Ant"></a><font size="4px">Ant</font></h1><p>项目构建工具</p><p>在项目运行编辑打包等过程都需要依赖于ant构建工具</p><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a><font size="4px">分布式</font></h1><p>把一个完整的项目拆分成多个项目，把拆分的项目分别部署到对应的服务器中的过程叫做分布式项目部署</p><p>将项目包换成一个单独项目</p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a><font size="4px">Maven</font></h1><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a><font size="3px">网址</font></h2><p><a href="https://mvnrepository.com/tags/maven" target="_blank" rel="noopener">https://mvnrepository.com/tags/maven</a></p><p>基于Ant的构建工具，功能更加强大</p><ul><li><p>本地仓库：计算机中的一个文件夹</p></li><li><p>中央仓库：<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a> 网上地址，下载后放到本地仓库中</p></li><li><p>保证jdk和开发环境一致</p></li><li><p>坐标</p><p>每一个jar都有一个唯一坐标</p><ul><li><p>GroupID 公司名，公司网址倒写</p></li><li><p>ArtifactID 项目名</p></li><li><p>Version 版本</p></li><li><p>Packaging 项目类型，打包类型</p><ul><li><p>jar   java项目</p></li><li><p>war  web项目</p></li><li><p>pom （project of model）项目对象模型 把项目看作对象</p><p>逻辑父项目。只要项目有子项目必须是pom类型</p></li></ul></li></ul></li></ul><h2 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a><font size="3px">配置Maven</font></h2><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p><img src="/2019/09/18/maven/internet.png" alt></p><p>解压文件</p><p>eclipse中装配maven</p><p>打开偏好设置，添加下载的maven 点击Apply</p><p><img src="/2019/09/18/maven/1.png" alt></p><p>配置settings.xml</p><p>在解压的maven文件夹下新建repository文件夹，用于承接中央仓库中下载的内容</p><p><img src="/2019/09/18/maven/2.png" alt></p><p>点击open File</p><p>配置settings.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/Learning/Resource/workspace/myEclipse/apache-maven-3.6.2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 镜像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jdk --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新建Maven项目"><a href="#新建Maven项目" class="headerlink" title="新建Maven项目"></a><font size="3px">新建Maven项目</font></h2><p><img src="/2019/09/18/maven/project.png" alt></p><p>src/main/java 真实目录的快捷目录，java代码</p><p>src/main/resources 快捷目录 存放配置文件，最终编译后放到classes文件夹中</p><p>src/test/java 测试java代码</p><p>src/test/resources 测试配置文件</p><p>pom.xml maven配置文件(最重要)</p><p>新建test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再新建一个maven项目Test2, 打开pom.xml 关联Test项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.runaccpeted<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Test2项目下自动关联Test</p><p><img src="/2019/09/18/maven/guan.png" alt></p><p>调用, 还可以查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> test t = <span class="keyword">new</span> test();</span><br><span class="line"> t.out();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="maven项目关系"><a href="#maven项目关系" class="headerlink" title="maven项目关系"></a><font size="3px">maven项目关系</font></h2><ul><li><p>依赖 </p><p>项目中自动下载另一个项目依赖的其他项目</p></li><li><p>继承 </p><p>父项目必须为pom类型，父项目中看不到子项目，只有逻辑上的父子关系</p><p>子项目为jar或war ，子项目中多了parent标签，出现警告子项目的groupId和version可以和父项目相同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.runaccpeted<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>聚合</p><p><img src="/2019/09/18/maven/p-c.png" alt></p><p>前提是继承关系，父项目包含子项目</p><p>子项目类型必须是Maven Module，但仍然是一个独立的项目</p><p>父项目中多了modules标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>children<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a><font size="3px">dependencyManagement</font></h2><p>写在父项目中</p><p>子项目只需要有坐标的groupId和artifactid，version继承自父项目</p><p>在父项目中声明properties把所有版本号进行统一管理</p><p>父项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>4.3.13.RELEASE<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建war项目"><a href="#创建war项目" class="headerlink" title="创建war项目"></a><font size="4px">创建war项目</font></h1><p>maven项目类型为war</p><p>在main/webapp 下新建META-INF和WEB-INF,web.xml,index.jsp</p><p><img src="/2019/09/18/maven/war.png" alt></p><p>在pom.xml中添加三个jar</p><p>&lt; scope&gt;provided&lt;/ scope&gt; 有效范围 provided表示编译期生效，不会打包发布到tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tomcat插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 端口号 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 映射名 /表示http:localhost:8080/--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动项目</p><p>Run As –&gt; Maven build</p><p>Goals处填写 clean tomcat7:run</p><p><img src="/2019/09/18/maven/build.png" alt></p><p>tomcat部署位置</p><p>Web/src/main/webapp/</p><h1 id="编译java文件夹的xml文件"><a href="#编译java文件夹的xml文件" class="headerlink" title="编译java文件夹的xml文件"></a><font size="4px">编译java文件夹的xml文件</font></h1><p>maven默认只把src/main/resources里面的非java文件进行编译到classes中</p><p>希望src/main/java中的xml页编译到classes需要添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="热部署–发布到树莓派tomcat"><a href="#热部署–发布到树莓派tomcat" class="headerlink" title="热部署–发布到树莓派tomcat"></a><font size="4px">热部署–发布到树莓派tomcat</font></h1><p>部署属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.0.103:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整个tomcat</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 端口号 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 映射名 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">path</span>&gt;</span>/web<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.0.103:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>部署</p><p>首次：tomcat7:deploy</p><p>以后：tomcat7:redeploy</p><p><img src="/2019/09/18/maven/deploy.png" alt></p><p>查看部署</p><p><img src="/2019/09/18/maven/webwar.png" alt></p><p>访问网址<a href="http://192.168.0.103:8080/web/demo" target="_blank" rel="noopener">http://192.168.0.103:8080/web/demo</a></p><p><img src="/2019/09/18/maven/result.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Maven学习&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://www.runaccpeted.com/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://www.runaccpeted.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识-数据库</title>
    <link href="https://www.runaccpeted.com/2019/09/16/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://www.runaccpeted.com/2019/09/16/java基础知识-数据库/</id>
    <published>2019-09-15T17:15:09.000Z</published>
    <updated>2019-10-09T05:27:12.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">数据库配置</blockquote><a id="more"></a><h1 id="mysql数据库配置"><a href="#mysql数据库配置" class="headerlink" title="mysql数据库配置"></a><font size="4px">mysql数据库配置</font></h1><p>数据库<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">下载</a> </p><p>下载解压 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd Downloads</span><br><span class="line">tar -xzvf mysql-xxx.tar.gz</span><br></pre></td></tr></table></figure><p>复制到/usr/local/目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /Downloads/mysql-xxx /usr/local/mysql</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">open -e .bash_profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加环境变量</span></span><br><span class="line">export MYSQL_HOME=/usr/local/mysql</span><br><span class="line">export PATH=$MYSQL_HOME/bin:$MYSQL_HOME/support-files:$PATH</span><br><span class="line"></span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>进入到local</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><p>看到mysql所属用户及用户组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxr-xr-x   1 root      wheel    30  9  9 11:44 mysql -&gt; mysql-8.0.17-macos10.14-x86_64</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R root:admin mysql</span><br></pre></td></tr></table></figure><p>重新查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxr-xr-x   1 root      admin    30  9  9 11:44 mysql -&gt; mysql-8.0.17-macos10.14-x86_64</span><br></pre></td></tr></table></figure><p>现在可以通过mysql进入数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br><span class="line"></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 20</span><br><span class="line">Server version: 8.0.17 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>更新密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">mysql&gt; alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;mysql123//&apos;;</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure><p>重启数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql.server restart</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>Enter password: </p><p>输入密码即可登入</p><h1 id="连接到navicat"><a href="#连接到navicat" class="headerlink" title="连接到navicat"></a><font size="4px">连接到navicat</font></h1><p><img src="/2019/09/16/java基础知识-数据库/a.png" alt></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><font size="4px">常用命令</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">create database if not exists test;</span><br><span class="line">drop database test;</span><br><span class="line">use test;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><h2 id="DDL-create-alter-drop-truncate"><a href="#DDL-create-alter-drop-truncate" class="headerlink" title="DDL create/alter/drop/truncate"></a><font size="3px">DDL create/alter/drop/truncate</font></h2><blockquote><p><strong>数据库对象</strong></p></blockquote><table><thead><tr><th align="center">对象名称</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">表</td><td align="center">table</td></tr><tr><td align="center">视图</td><td align="center">view</td></tr><tr><td align="center">索引</td><td align="center">index</td></tr><tr><td align="center">函数</td><td align="center">function</td></tr><tr><td align="center">存储过程</td><td align="center">procedure</td></tr><tr><td align="center">触发器</td><td align="center">trigger</td></tr><tr><td align="center">约束</td><td align="center">constraint</td></tr></tbody></table><blockquote><p>列类型</p></blockquote><table><thead><tr><th align="left">列类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">tinyint/int/mediunint/int/bigint</td><td align="left">整数</td></tr><tr><td align="left">float/double</td><td align="left">浮点数，存在精度丢失</td></tr><tr><td align="left">decimal</td><td align="left">不存在精度丢失</td></tr><tr><td align="left">date</td><td align="left">对应java.util.Date</td></tr><tr><td align="left">time</td><td align="left">对应java.util.Date</td></tr><tr><td align="left">timestamp</td><td align="left">时间戳</td></tr><tr><td align="left">char</td><td align="left">定长字符</td></tr><tr><td align="left">varchar</td><td align="left">可变字符</td></tr><tr><td align="left">blob</td><td align="left">二进制大对象，存储图片等</td></tr><tr><td align="left">text</td><td align="left">文本</td></tr><tr><td align="left">enum(‘’,’’,….)</td><td align="left">枚举中的一个</td></tr><tr><td align="left">set(‘’,’’,…..)</td><td align="left">集合中的几个</td></tr></tbody></table><blockquote><p>create table [表名] </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table test(</span><br><span class="line"> id int primary key auto_increment,</span><br><span class="line"> name varchar(20) not null</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p> 表约束 constraint 约束名 属性(列名);</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">constraint id_con unique(id);</span><br><span class="line"></span><br><span class="line">constraint fk foreign key(teacherid) references teacher(id);</span><br><span class="line"></span><br><span class="line">drop foreign key fk;</span><br></pre></td></tr></table></figure><blockquote><p>索引 create index 索引名 on 表名(列名);</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create index idIndex on test(id);</span><br><span class="line"></span><br><span class="line">drop inIndx on test;</span><br></pre></td></tr></table></figure><blockquote><p>视图 create view 视图名 as select语句;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create view testview as select * from test;</span><br><span class="line">drop view testview；</span><br></pre></td></tr></table></figure><blockquote><p>alter table [expression] </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alter table modify name char;</span><br><span class="line"></span><br><span class="line">alter table add age int;</span><br><span class="line"></span><br><span class="line">alter table drop name;</span><br><span class="line"></span><br><span class="line">alter table rename to Test;</span><br></pre></td></tr></table></figure><blockquote><p>drop</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table test;</span><br></pre></td></tr></table></figure><blockquote><p>truncate 表名  一次性删除整个表</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate test;</span><br></pre></td></tr></table></figure><h2 id="DDL-insert-update-delete-select"><a href="#DDL-insert-update-delete-select" class="headerlink" title="DDL insert/update/delete/select"></a><font size="3px">DDL insert/update/delete/select</font></h2><blockquote><p>insert</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into test (name) values(&apos;A&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>update</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test set name=&apos;B&apos; where id=1;</span><br></pre></td></tr></table></figure><blockquote><p>delete</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from test where id=1;</span><br></pre></td></tr></table></figure><blockquote><p>select</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test where id=1;</span><br></pre></td></tr></table></figure><p>别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select name as &quot;姓名&quot; from test where id=1;</span><br><span class="line"></span><br><span class="line">select name 姓名 from test where id=1;</span><br></pre></td></tr></table></figure><p>去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct(name) from test where id=1;</span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name from test order by id desc; 降序</span><br><span class="line">select name from test order by id; 升序</span><br></pre></td></tr></table></figure><p>模糊查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from test where name like &apos;王%&apos;; %多个字符，_单个字符</span><br></pre></td></tr></table></figure><p>区间查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select name from test where id between 1 and 3  [1,3]</span><br><span class="line">select name from test where id in(1,3)  1 or 3</span><br><span class="line"></span><br><span class="line">select count(*) from test group by id having count(*)&gt;2</span><br></pre></td></tr></table></figure><h1 id="JDBC用法"><a href="#JDBC用法" class="headerlink" title="JDBC用法"></a><font size="4px">JDBC用法</font></h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><font size="3px">初始化</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">  prop.load(<span class="keyword">new</span> FIleInputStream(db.properties));</span><br><span class="line">  driver=prop.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">  url=prop.getProperty(<span class="string">"url"</span>);</span><br><span class="line">  user=prop.getProperty(<span class="string">"user"</span>);</span><br><span class="line">  pass=prop.getProperty(<span class="string">"pass"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册驱动"><a href="#注册驱动" class="headerlink" title="注册驱动"></a><font size="3px">注册驱动</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a><font size="3px">建立连接</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn=DriverManager.getConnection(url,user,pass);</span><br></pre></td></tr></table></figure><h2 id="执行语句"><a href="#执行语句" class="headerlink" title="执行语句"></a><font size="3px">执行语句</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Statement</span></span><br><span class="line">Statement ment = conn.createStatement();</span><br><span class="line"><span class="comment">//PrepareStatement 使用通配符</span></span><br><span class="line">PrepareStatement ment = conn.prepareStatement(<span class="string">"insert into test(name) values (?)"</span>);</span><br><span class="line">ment.setString(<span class="number">1</span>,<span class="string">'a'</span>);</span><br><span class="line">ment.executeUpdate();</span><br><span class="line"><span class="comment">//CallableStatement</span></span><br><span class="line"><span class="comment">/*存储过程</span></span><br><span class="line"><span class="comment">create procedure add_pro(a int,b int,out sum int)</span></span><br><span class="line"><span class="comment">  begin</span></span><br><span class="line"><span class="comment">  set sum=a+b;</span></span><br><span class="line"><span class="comment">  end</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">CallableStatement ment=conn.perpareCall(<span class="string">"&#123;call add_pro(?,?,?)&#125;"</span>);</span><br><span class="line">ment.setInt(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">ment.setInt(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">ment.registerOutParameter(<span class="number">3</span>,Types.INTEGER);</span><br><span class="line">ment.execute();</span><br><span class="line">ment.getInt(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a><font size="3px">返回结果</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = ment.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">  re.getString(<span class="number">1</span>); <span class="comment">//第1列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a><font size="3px">关闭连接</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rs.close();</span><br><span class="line">ment.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="存储图片"><a href="#存储图片" class="headerlink" title="存储图片"></a><font size="3px">存储图片</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(path);</span><br><span class="line">PrepareStatement ment = <span class="keyword">new</span> PrepareStatement(<span class="string">"insert into test(img) values(?)"</span>);</span><br><span class="line">ment.setBinaryStream(<span class="number">1</span>,<span class="keyword">new</span> FileInputStream(file),(<span class="keyword">int</span>)file.length());</span><br></pre></td></tr></table></figure><h2 id="取图片"><a href="#取图片" class="headerlink" title="取图片"></a><font size="3px">取图片</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Blob blob = rs.getBlob(<span class="number">1</span>);</span><br><span class="line">ImageIcon icon = <span class="keyword">new</span> ImageIcon(blob.getBytes(<span class="number">1L</span>,(<span class="keyword">int</span>)blob.length()));</span><br></pre></td></tr></table></figure><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a><font size="3px">表结构</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = ment.executeQuery();</span><br><span class="line">ResultSetMetaData data= rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> column = data.getColumnCount(); <span class="comment">//列数量</span></span><br><span class="line">String name = data.getColumnName(<span class="number">1</span>); <span class="comment">//索引列名</span></span><br><span class="line">Object obj= data.getColumnType(<span class="number">1</span>); <span class="comment">//索引列类型</span></span><br><span class="line"></span><br><span class="line">DatabaseMetaData data= conn.getMetaData();</span><br><span class="line">ResultSet rs = data.getTableTypes(); <span class="comment">//表类型</span></span><br><span class="line"><span class="comment">//全部数据表</span></span><br><span class="line">rs = data.getTables(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">"%"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"TABLE"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//test表的主键</span></span><br><span class="line">rs = data.getPrimaryKeys(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure><h1 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a><font size="4px">事务处理</font></h1><ul><li>原子性 ：最小逻辑执行体</li><li>一致性： 从一个一致性状态到另一个一致性状态</li><li>隔离性： 各个事务执行互不干扰</li><li>持续性：改变永久存储 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">执行语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Expection e)&#123;</span><br><span class="line">  conn.rollback();</span><br><span class="line">&#125;</span><br><span class="line">conn.commit();</span><br></pre></td></tr></table></figure><p>批量处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Statement st = conn.createStatement();</span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//收集语句</span></span><br><span class="line">st.addBatch(sql);</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"></span><br><span class="line">st.executeBatch();</span><br><span class="line">conn.commit();</span><br></pre></td></tr></table></figure><h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a><font size="4px">连接池</font></h1><p>DBCP数据源</p><p>C3PO数据源</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;数据库配置&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>挑战10道超难Java面试题</title>
    <link href="https://www.runaccpeted.com/2019/09/15/%E6%8C%91%E6%88%9810%E9%81%93%E8%B6%85%E9%9A%BEJava%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://www.runaccpeted.com/2019/09/15/挑战10道超难Java面试题/</id>
    <published>2019-09-15T04:28:11.000Z</published>
    <updated>2019-09-20T10:59:34.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">来自Java核心部分的10个最棘手的Java面试问题列表</blockquote><a id="more"></a><p><a href="https://www.java67.com/2012/09/top-10-tough-core-java-interview-questions-answers.html" target="_blank" rel="noopener">原文 </a></p><h1 id="为什么-wait，notify-和-notifyAll-是在-Object-类中定义的而不是在-Thread-类中定义？"><a href="#为什么-wait，notify-和-notifyAll-是在-Object-类中定义的而不是在-Thread-类中定义？" class="headerlink" title=" 为什么 wait，notify 和 notifyAll 是在 Object 类中定义的而不是在 Thread 类中定义？"></a><font size="4px"> 为什么 wait，notify 和 notifyAll 是在 Object 类中定义的而不是在 Thread 类中定义？</font></h1><p><strong>1) wait 和 notify 不仅仅是普通方法或同步工具，更重要的是它们是 Java 中两个线程之间的通信机制。</strong>对语言设计者而言, 如果不能通过 Java 关键字(例如 synchronized)实现通信此机制，同时又要确保这个机制对每个对象可用, 那么 Object 类则是的正确声明位置。记住同步和等待通知是两个不同的领域，不要把它们看成是相同的或相关的。同步是提供互斥并确保 Java 类的线程安全，而 wait 和 notify 是两个线程之间的通信机制。</p><p><strong>2) 每个对象都可上锁，这是在 Object 类而不是 Thread 类中声明 wait 和 notify 的另一个原因。</strong></p><p><strong>3) 在 Java 中为了进入代码的临界区，线程需要锁定并等待锁定</strong>，他们不知道哪些线程持有锁，而只是知道锁被某个线程持有， 并且他们应该等待取得锁, 而不是去了解哪个线程在同步块内，并请求它们释放锁定。</p><p><strong>4) Java 是基于 Hoare 的监视器的思想。</strong>在Java中，所有对象都有一个监视器。</p><p>线程在监视器上等待，为执行等待，我们需要2个参数：</p><ul><li>一个线程</li><li>一个监视器(任何对象)</li></ul><p>在 Java 设计中，线程不能被指定，它总是运行当前代码的线程。但是，我们可以指定监视器(这是我们称之为等待的对象)。这是一个很好的设计，因为如果我们可以让任何其他线程在所需的监视器上等待，这将导致“入侵”，导致在设计并发程序时会遇到困难。请记住，在 Java 中，所有在另一个线程的执行中侵入的操作都被弃用了(例如 stop 方法)。</p><h1 id="为什么Java中不支持多重继承？"><a href="#为什么Java中不支持多重继承？" class="headerlink" title="为什么Java中不支持多重继承？"></a><font size="4px">为什么Java中不支持多重继承？</font></h1><p><strong>1)第一个原因是围绕钻石形继承问题产生的歧义</strong>，考虑一个类 A 有 foo() 方法, 然后 B 和 C 派生自 A, 并且有自己的 foo() 实现，现在 D 类使用多个继承派生自 B 和C，如果我们只引用 foo(), 编译器将无法决定它应该调用哪个 foo()。这也称为 Diamond 问题，因为这个继承方案的结构类似于菱形，见下图:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">          A foo()    </span><br><span class="line">         / \    </span><br><span class="line">       /     \    </span><br><span class="line">foo()  B      C foo()    </span><br><span class="line">       \     /    </span><br><span class="line">         \ /    </span><br><span class="line">         D  foo()</span><br></pre></td></tr></table></figure><p>即使我们删除钻石的顶部 A 类并允许多重继承，我们也将看到这个问题含糊性的一面。如果你把这个理由告诉面试官，他会问为什么 C++ 可以支持多重继承而 Java不行。嗯，在这种情况下，我会试着向他解释我下面给出的第二个原因，它不是因为技术难度, 而是更多的可维护和更清晰的设计是驱动因素, 虽然这只能由 Java 言语设计师确认，我们只是推测。维基百科链接有一些很好的解释，说明在使用多重继承时，由于钻石问题，不同的语言地址问题是如何产生的。</p><p>2)对我来说第二个也是更有说服力的理由是，<strong>多重继承确实使设计复杂化并在转换、构造函数链接等过程中产生问题。</strong>假设你需要多重继承的情况并不多，简单起见，明智的决定是省略它。此外，Java 可以通过使用接口支持单继承来避免这种歧义。由于接口只有方法声明而且没有提供任何实现，因此只有一个特定方法的实现，因此不会有任何歧义。</p><h1 id="为什么Java不支持运算符重载？"><a href="#为什么Java不支持运算符重载？" class="headerlink" title="为什么Java不支持运算符重载？"></a><font size="4px">为什么Java不支持运算符重载？</font></h1><p>与 C++ 不同，Java 不支持运算符重载。Java 不能为程序员提供自由的标准算术运算符重载，例如+， - ，*和/等。如果你以前用过 C++，那么 Java 与 C++ 相比少了很多功能，例如 Java 不支持多重继承，Java中没有指针，Java中没有引用传递。另一个类似的问题是关于 Java 通过引用传递，这主要表现为 Java 是通过值还是引用传参。虽然我不知道背后的真正原因，但我认为以下说法有些道理，为什么 Java 不支持运算符重载。</p><p><strong>1)简单性和清晰性。</strong>清晰性是Java设计者的目标之一。设计者不是只想复制语言，而是希望拥有一种清晰，真正面向对象的语言。添加运算符重载比没有它肯定会使设计更复杂，并且它可能导致更复杂的编译器, 或减慢 JVM，因为它需要做额外的工作来识别运算符的实际含义，并减少优化的机会, 以保证 Java 中运算符的行为。</p><p><strong>2)避免编程错误。</strong>Java 不允许用户定义的运算符重载，因为如果允许程序员进行运算符重载，将为同一运算符赋予多种含义，这将使任何开发人员的学习曲线变得陡峭，事情变得更加混乱。据观察，当语言支持运算符重载时，编程错误会增加，从而增加了开发和交付时间。由于 Java 和 JVM 已经承担了大多数开发人员的责任，如在通过提供垃圾收集器进行内存管理时，因为这个功能增加污染代码的机会, 成为编程错误之源, 因此没有多大意义。</p><p><strong>3)JVM复杂性。</strong>从JVM的角度来看，支持运算符重载使问题变得更加困难。通过更直观，更干净的方式使用方法重载也能实现同样的事情，因此不支持 Java 中的运算符重载是有意义的。与相对简单的 JVM 相比，复杂的 JVM 可能导致 JVM 更慢，并为保证在 Java 中运算符行为的确定性从而减少了优化代码的机会。</p><p><strong>4)让开发工具处理更容易。</strong>这是在 Java 中不支持运算符重载的另一个好处。省略运算符重载使语言更容易处理，这反过来又更容易开发处理语言的工具，例如 IDE 或重构工具。Java 中的重构工具远胜于 C++。</p><h1 id="为什么-String-在-Java-中是不可变的？"><a href="#为什么-String-在-Java-中是不可变的？" class="headerlink" title="为什么 String 在 Java 中是不可变的？"></a><font size="4px">为什么 String 在 Java 中是不可变的？</font></h1><p>字符串在 Java 中是不可变的，因为 String 对象缓存在 String 池中。由于缓存的字符串在多个客户之间共享，因此始终存在风险，其中一个客户的操作会影响所有其他客户。例如，如果一段代码将 String “Test” 的值更改为 “TEST”，则所有其他客户也将看到该值。由于 String 对象的缓存性能是很重要的一方面，因此通过使 String 类不可变来避免这种风险。</p><p>同时，String 是 final 的，因此没有人可以通过扩展和覆盖行为来破坏 String 类的不变性、缓存、散列值的计算等。String 类不可变的另一个原因可能是由于 HashMap。</p><p>由于把字符串作为 HashMap 键很受欢迎。对于键值来说，重要的是它们是不可变的，以便用它们检索存储在 HashMap 中的值对象。由于 HashMap 的工作原理是散列，因此需要具有相同的值才能正常运行。如果在插入后修改了 String 的内容，可变的 String将在插入和检索时生成两个不同的哈希码，可能会丢失 Map 中的值对象。</p><p>如果你是印度板球迷，你可能能够与我的下一句话联系起来。字符串是Java的 VVS Laxman，即非常特殊的类。我还没有看到一个没有使用 String 编写的 Java 程序。这就是为什么对 String 的充分理解对于 Java 开发人员来说非常重要。</p><p>String 作为数据类型，传输对象和中间人角色的重要性和流行性也使这个问题在 Java 面试中很常见。</p><p><strong>1)想象字符串池没有使字符串不可变，它根本不可能</strong>，因为在字符串池的情况下，一个字符串对象/文字，例如 “Test” 已被许多参考变量引用，因此如果其中任何一个更改了值，其他参数将自动受到影响，即假设</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String A=<span class="string">"Test"</span>;</span><br><span class="line">String B=<span class="string">"Test"</span>;</span><br></pre></td></tr></table></figure><p>现在字符串 B 调用 “Test”.toUpperCase(), 将同一个对象改为“TEST”，所以 A 也是 “TEST”，这不是期望的结果。</p><p>下图显示了如何在堆内存和字符串池中创建字符串。</p><p><img src="/2019/09/15/挑战10道超难Java面试题/string.png" alt="img"></p><p><strong>2)字符串已被广泛用作许多 Java 类的参数</strong>，例如，为了打开网络连接，你可以将主机名和端口号作为字符串传递，你可以将数据库 URL 作为字符串传递, 以打开数据库连接，你可以通过将文件名作为参数传递给 File I/O 类来打开 Java 中的任何文件。如果 String 不是不可变的，这将导致严重的安全威胁，我的意思是有人可以访问他有权授权的任何文件，然后可以故意或意外地更改文件名并获得对该文件的访问权限。由于不变性，你无需担心这种威胁。这个原因也说明了，为什么 String 在 Java 中是最终的，通过使 java.lang.String final，Java设计者确保没有人覆盖 String 类的任何行为。</p><p><strong>3)由于 String 是不可变的，它可以安全地共享许多线程，这对于多线程编程非常重要. 并且避免了 Java 中的同步问题，不变性也使得String 实例在 Java 中是线程安全的，这意味着你不需要从外部同步 String 操作。</strong>关于 String 的另一个要点是由截取字符串 SubString 引起的内存泄漏，这不是与线程相关的问题，但也是需要注意的。</p><p><strong>4)为什么 String 在 Java 中是不可变的另一个原因是允许 String 缓存其哈希码，Java 中的不可变 String 缓存其哈希码，并且不会在每次调用 String 的 hashcode 方法时重新计算，这使得它在 Java 中的 HashMap 中使用的 HashMap 键非常快。</strong>简而言之，因为 String 是不可变的，所以没有人可以在创建后更改其内容，这保证了 String 的 hashCode 在多次调用时是相同的。</p><p><strong>5)String 不可变的绝对最重要的原因是它被类加载机制使用，因此具有深刻和基本的安全考虑。</strong>如果 String 是可变的，加载“java.io.Writer” 的请求可能已被更改为加载 “mil.vogoon.DiskErasingWriter”. 安全性和字符串池是使字符串不可变的主要原因。顺便说一句，上面的理由很好回答另一个Java面试问题: “为什么String在Java中是最终的”。要想是不可变的，你必须是最终的，这样你的子类不会破坏不变性。你怎么看？</p><h1 id="为什么-char-数组比-Java-中的-String-更适合存储密码？"><a href="#为什么-char-数组比-Java-中的-String-更适合存储密码？" class="headerlink" title="为什么 char 数组比 Java 中的 String 更适合存储密码？"></a><font size="4px">为什么 char 数组比 Java 中的 String 更适合存储密码？</font></h1><p>字符串：</p><p><strong>1)</strong>由于字符串在 Java 中是不可变的，如果你将密码存储为纯文本，它将在内存中可用，直到垃圾收集器清除它. 并且为了可重用性，会存在 String 在字符串池中, 它很可能会保留在内存中持续很长时间，从而构成安全威胁。</p><p>由于任何有权访问内存转储的人都可以以明文形式找到密码，这是另一个原因，你应该始终使用加密密码而不是纯文本。由于字符串是不可变的，所以不能更改字符串的内容，因为任何更改都会产生新的字符串，而如果你使用char[]，你就可以将所有元素设置为空白或零。因此，在字符数组中存储密码可以明显降低窃取密码的安全风险。</p><p><strong>2)</strong>Java 本身建议使用 JPasswordField 的 getPassword() 方法，该方法返回一个 char[] 和不推荐使用的getTex() 方法，该方法以明文形式返回密码，由于安全原因。应遵循 Java 团队的建议, 坚持标准而不是反对它。</p><p><strong>3)</strong>使用 String 时，总是存在在日志文件或控制台中打印纯文本的风险，但如果使用 Array，则不会打印数组的内容而是打印其内存位置。虽然不是一个真正的原因，但仍然有道理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String strPassword =“Unknown”; </span><br><span class="line"><span class="keyword">char</span> [] charPassword = <span class="keyword">new</span> <span class="keyword">char</span> [] &#123;<span class="string">'U'</span>，<span class="string">'n'</span>，<span class="string">'k'</span>，<span class="string">'w'</span>，<span class="string">'o'</span>，<span class="string">'n'</span>&#125;; </span><br><span class="line">System.out.println(“字符密码：”+ strPassword);</span><br><span class="line">System.out.println(“字符密码：”+ charPassword);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字符串密码：Unknown</span><br><span class="line">字符密码：[C @<span class="number">110</span>b053</span><br></pre></td></tr></table></figure><p>我还建议使用散列或加密的密码而不是纯文本，并在验证完成后立即从内存中清除它。因此,在Java中,用字符数组用存储密码比字符串是更好的选择。虽然仅使用char[]还不够，还你需要擦除内容才能更安全。</p><h1 id="如何使用双重检查锁定在-Java-中创建线程安全的单例？"><a href="#如何使用双重检查锁定在-Java-中创建线程安全的单例？" class="headerlink" title="如何使用双重检查锁定在 Java 中创建线程安全的单例？"></a><font size="4px">如何使用双重检查锁定在 Java 中创建线程安全的单例？</font></h1><p>这个 Java 问题也常被问: <strong>什么是线程安全的单例，你怎么创建它</strong>。好吧，在Java 5之前的版本, 使用双重检查锁定创建单例 Singleton 时，如果多个线程试图同时创建 Singleton 实例，则可能有多个 Singleton 实例被创建。从 Java 5 开始，使用 Enum 创建线程安全的Singleton很容易。但如果面试官坚持双重检查锁定，那么你必须为他们编写代码。记得使用volatile变量。</p><p><strong>为什么枚举单例在 Java 中更好</strong></p><p>枚举单例是使用一个实例在 Java 中实现单例模式的新方法。虽然Java中的单例模式存在很长时间,但枚举单例是相对较新的概念,在引入Enum作为关键字和功能之后,从Java5开始在实践中。本文与之前关于 Singleton 的内容有些相关, 其中讨论了有关 Singleton 模式的面试中的常见问题, 以及 10 个 Java 枚举示例, 其中我们看到了如何通用枚举可以。这篇文章是关于为什么我们应该使用Eeame作为Java中的单例,它比传统的单例方法相比有什么好处等等。</p><p><strong>Java 枚举和单例模式</strong></p><p>Java 中的枚举单例模式是使用枚举在 Java 中实现单例模式。单例模式在 Java 中早有应用, 但使用枚举类型创建单例模式时间却不长. 如果感兴趣, 你可以了解下构建者设计模式和装饰器设计模式。</p><p><strong>1) 枚举单例易于书写</strong></p><p>这是迄今为止最大的优势,如果你在Java 5之前一直在编写单例, 你知道, 即使双检查锁定, 你仍可以有多个实例。虽然这个问题通过 Java 内存模型的改进已经解决了, 从 Java 5 开始的 volatile 类型变量提供了保证, 但是对于许多初学者来说, 编写起来仍然很棘手。与同步双检查锁定相比,枚举单例实在是太简单了。如果你不相信, 那就比较一下下面的传统双检查锁定单例和枚举单例的代码:</p><p><strong>在 Java 中使用枚举的单例</strong></p><p>这是我们通常声明枚举的单例的方式,它可能包含实例变量和实例方法,但为了简单起见,我没有使用任何实例方法,只是要注意,如果你使用的实例方法且该方法能改变对象的状态的话, 则需要确保该方法的线程安全。默认情况下,创建枚举实例是线程安全的,但 Enum 上的任何其他方法是否线程安全都是程序员的责任。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 使用 Java 枚举的单例模式示例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过EasySingleton.INSTANCE来处理它,这比在单例上调用getInstance()方法容易得多。</p><p> <strong>具有双检查锁定的单例示例</strong></p><p>下面的代码是单例模式中双重检查锁定的示例,此处的 getInstance() 方法检查两次,以查看 INSTANCE 是否为空,这就是为什么它被称为双检查锁定模式,请记住,双检查锁定是代理之前Java 5,但Java5内存模型中易失变量的干扰,它应该工作完美。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 单例模式示例,双重锁定检查</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckedLockingSingleton</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">volatile</span> DoubleCheckedLockingSingleton INSTANCE;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckedLockingSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> DoubleCheckedLockingSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(DoubleCheckedLockingSingleton.class)&#123;</span><br><span class="line">                <span class="comment">//double checking Singleton instance</span></span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> DoubleCheckedLockingSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> INSTANCE;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以调用DoubleCheckedLockingSingleton.getInstance() 来获取此单例类的访问权限。</p><p>现在,只需查看创建延迟加载的线程安全的 Singleton 所需的代码量。使用枚举单例模式, 你可以在一行中具有该模式, 因为创建枚举实例是线程安全的, 并且由 JVM 进行。</p><p>人们可能会争辩说,有更好的方法来编写 Singleton 而不是双检查锁定方法, 但每种方法都有自己的优点和缺点, 就像我最喜欢在类加载时创建的静态字段 Singleton, 如下面所示, 但请记住, 这不是一个延迟加载单例:</p><p> <strong>单例模式用静态工厂方法</strong></p><p>这是我最喜欢的在 Java 中影响 Singleton 模式的方法之一,因为 Singleton 实例是静态的,并且最后一个变量在类首次加载到内存时初始化,因此实例的创建本质上是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 单例模式示例与静态工厂方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//initailzed during class loading</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//to prevent creating another instance of Singleton</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以调用 Singleton.getSingleton() 来获取此类的访问权限。</p><p><strong>2) 枚举单例自行处理序列化</strong></p><p>传统单例的另一个问题是,一旦实现可序列化接口,它们就不再是 Singleton, 因为 readObject() 方法总是返回一个新实例, 就像 Java 中的构造函数一样。通过使用 readResolve() 方法, 通过在以下示例中替换 Singeton 来避免这种情况:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//readResolve to prevent another instance of Singleton</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Singleton 类保持内部状态, 这将变得更加复杂, 因为你需要标记为 transient(不被序列化),但使用枚举单例, 序列化由 JVM 进行。</p><p><strong>3) 创建枚举实例是线程安全的</strong></p><p>如第 1 点所述,因为 Enum 实例的创建在默认情况下是线程安全的, 你无需担心是否要做双重检查锁定。</p><p>总之, 在保证序列化和线程安全的情况下,使用两行代码枚举单例模式是在 Java 5 以后的世界中创建 Singleton 的最佳方式。你仍然可以使用其他流行的方法, 如你觉得更好, 欢迎讨论</p><h1 id="编写-Java-程序时-如何在-Java-中创建死锁并修复它？"><a href="#编写-Java-程序时-如何在-Java-中创建死锁并修复它？" class="headerlink" title="编写 Java 程序时, 如何在 Java 中创建死锁并修复它？"></a><font size="4px">编写 Java 程序时, 如何在 Java 中创建死锁并修复它？</font></h1><p><strong>如何避免 Java 线程死锁？</strong></p><p>如何避免 Java 中的死锁？是 Java 面试的热门问题之一, 也是多线程的编程中的重口味之一, 主要在招高级程序员时容易被问到, 且有很多后续问题。尽管问题看起来非常基本, 但大多数 Java 开发人员一旦你开始深入, 就会陷入困境。</p><p><strong>面试问题总是以“什么是死锁？”开始</strong></p><p>当两个或多个线程在等待彼此释放所需的资源(锁定)并陷入无限等待即是死锁。它仅在多任务或多线程的情况下发生。</p><p><strong>如何检测 Java 中的死锁？</strong></p><p>虽然这可以有很多答案, 但我的版本是首先我会看看代码, 如果我看到一个嵌套的同步块，或从一个同步的方法调用其他同步方法, 或试图在不同的对象上获取锁, 如果开发人员不是非常小心，就很容易造成死锁。</p><p>另一种方法是在运行应用程序时实际锁定时找到它, 尝试采取线程转储,在 Linux 中,你可以通过kill -3命令执行此操作, 这将打印应用程序日志文件中所有线程的状态, 并且你可以看到哪个线程被锁定在哪个线程对象上。</p><p>你可以使用 fastthread.io 网站等工具分析该线程转储, 这些工具允许你上载线程转储并对其进行分析。</p><p>另一种方法是使用 jConsole 或 VisualVM, 它将显示哪些线程被锁定以及哪些对象被锁定。</p><p>如果你有兴趣了解故障排除工具和分析线程转储的过程, 我建议你看看 Uriah Levy 在多元视觉(PluraIsight)上《分析 Java 线程转储》课程。旨在详细了解 Java 线程转储, 并熟悉其他流行的高级故障排除工具。</p><p><strong>编写一个将导致死锁的Java程序？</strong></p><p>一旦你回答了前面的问题,他们可能会要求你编写代码,这将导致Java死锁。</p><p>这是我的版本之一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java 程序通过强制循环等待来创建死锁。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此方法请求两个锁,第一个字符串,然后整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Aquired lock on String.class object"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Aquired lock on Integer.class object"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 此方法也请求相同的两个锁,但完全</span></span><br><span class="line"><span class="comment">     * 相反的顺序,即首先整数,然后字符串。</span></span><br><span class="line"><span class="comment">     * 如果一个线程持有字符串锁,则这会产生潜在的死锁</span></span><br><span class="line"><span class="comment">     * 和其他持有整数锁,他们等待对方,永远。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Aquired lock on Integer.class object"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Aquired lock on String.class object"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 method1() 和 method2() 都由两个或多个线程调用,则存在死锁的可能性, 因为如果线程 1 在执行 method1() 时在 Sting 对象上获取锁, 线程 2 在执行 method2() 时在 Integer 对象上获取锁, 等待彼此释放 Integer 和 String 上的锁以继续进行一步, 但这永远不会发生。</p><p><img src="/2019/09/15/挑战10道超难Java面试题/thread.png" alt></p><p>此图精确演示了我们的程序, 其中一个线程在一个对象上持有锁, 并等待其他线程持有的其他对象锁。</p><p>你可以看到, Thread1 需要 Thread2 持有的 Object2 上的锁,而 Thread2 希望获得 Thread1 持有的 Object1 上的锁。由于没有线程愿意放弃, 因此存在死锁, Java 程序被卡住。</p><p>其理念是, 你应该知道使用常见并发模式的正确方法, 如果你不熟悉这些模式,那么 Jose Paumard 《应用于并发和多线程的常见 Java 模式》是学习的好起点。</p><p><strong>如何避免Java中的死锁？</strong></p><p>现在面试官来到最后一部分, 在我看来, 最重要的部分之一; 如何修复代码中的死锁？或如何避免Java中的死锁？</p><p>如果你仔细查看了上面的代码,那么你可能已经发现死锁的真正原因不是多个线程, 而是它们请求锁的方式, 如果你提供有序访问, 则问题将得到解决。</p><p>下面是我的修复版本,它通过避免循环等待，而避免死锁, 而不需要抢占, 这是需要死锁的四个条件之一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockFixed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两种方法现在都以相同的顺序请求锁,首先采用整数,然后是 String。</span></span><br><span class="line"><span class="comment">     * 你也可以做反向,例如,第一个字符串,然后整数,</span></span><br><span class="line"><span class="comment">     * 只要两种方法都请求锁定,两者都能解决问题</span></span><br><span class="line"><span class="comment">     * 顺序一致。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Aquired lock on Integer.class object"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Aquired lock on String.class object"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Aquired lock on Integer.class object"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Aquired lock on String.class object"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在没有任何死锁,因为两种方法都按相同的顺序访问 Integer 和 String 类文本上的锁。因此,如果线程 A 在 Integer 对象上获取锁, 则线程 B 不会继续, 直到线程 A 释放 Integer 锁, 即使线程 B 持有 String 锁, 线程 A 也不会被阻止, 因为现在线程 B 不会期望线程 A 释放 Integer 锁以继续。</p><h1 id="如果你的Serializable类包含一个不可序列化的成员，会发生什么？你是如何解决的？"><a href="#如果你的Serializable类包含一个不可序列化的成员，会发生什么？你是如何解决的？" class="headerlink" title="如果你的Serializable类包含一个不可序列化的成员，会发生什么？你是如何解决的？"></a><font size="4px">如果你的Serializable类包含一个不可序列化的成员，会发生什么？你是如何解决的？</font></h1><p>任何序列化该类的尝试都会因NotSerializableException而失败，但这可以通过在 Java中 为 static 设置瞬态(trancient)变量来轻松解决。</p><p><strong>Java 序列化相关的常见问题</strong></p><p>Java 序列化是一个重要概念, 但它很少用作持久性解决方案, 开发人员大多忽略了 Java 序列化 API。根据我的经验, Java 序列化在任何 Java核心内容面试中都是一个相当重要的话题, 在几乎所有的网面试中, 我都遇到过一两个 Java 序列化问题, 我看过一次面试, 在问几个关于序列化的问题之后候选人开始感到不自在, 因为缺乏这方面的经验。</p><p>他们不知道如何在 Java 中序列化对象, 或者他们不熟悉任何 Java 示例来解释序列化, 忘记了诸如序列化在 Java 中如何工作, 什么是标记接口, 标记接口的目的是什么, 瞬态变量和可变变量之间的差异, 可序列化接口具有多少种方法, 在 Java 中,Serializable 和 Externalizable 有什么区别, 或者在引入注解之后, 为什么不用 @Serializable 注解或替换 Serializalbe 接口。</p><p><img src="/2019/09/15/挑战10道超难Java面试题/serialization.png" alt></p><p> <strong>关于Java序列化的10个面试问题</strong></p><p>大多数商业项目使用数据库或内存映射文件或只是普通文件, 来满足持久性要求, 只有很少的项目依赖于 Java 中的序列化过程。无论如何,这篇文章不是 Java 序列化教程或如何序列化在 Java 的对象, 但有关序列化机制和序列化 API 的面试问题, 这是值得去任何 Java 面试前先看看以免让一些未知的内容惊到自己。</p><p>对于那些不熟悉 Java 序列化的人, Java 序列化是用来通过将对象的状态存储到带有.ser扩展名的文件来序列化 Java 中的对象的过程, 并且可以通过这个文件恢复重建 Java对象状态, 这个逆过程称为 deserialization。</p><p><strong>什么是 Java 序列化</strong></p><p>序列化是把对象改成可以存到磁盘或通过网络发送到其他运行中的 Java 虚拟机的二进制格式的过程, 并可以通过反序列化恢复对象状态. Java 序列化API给开发人员提供了一个标准机制, 通过 java.io.Serializable 和 java.io.Externalizable 接口, ObjectInputStream 及ObjectOutputStream 处理对象序列化. Java 程序员可自由选择基于类结构的标准序列化或是他们自定义的二进制格式, 通常认为后者才是最佳实践, 因为序列化的二进制文件格式成为类输出 API的一部分, 可能破坏 Java 中私有和包可见的属性的封装.</p><p> <strong>如何序列化</strong></p><p>让 Java 中的类可以序列化很简单. 你的 Java 类只需要实现 java.io.Serializable 接口, JVM 就会把 Object 对象按默认格式序列化. 让一个类是可序列化的需要有意为之. 类可序列会可能为是一个长期代价, 可能会因此而限制你修改或改变其实现. 当你通过实现添加接口来更改类的结构时, 添加或删除任何字段可能会破坏默认序列化, 这可以通过自定义二进制格式使不兼容的可能性最小化, 但仍需要大量的努力来确保向后兼容性。序列化如何限制你更改类的能力的一个示例是 SerialVersionUID。</p><p>如果不显式声明 SerialVersionUID, 则 JVM 会根据类结构生成其结构, 该结构依赖于类实现接口和可能更改的其他几个因素。假设你新版本的类文件实现的另一个接口, JVM 将生成一个不同的 SerialVersionUID 的, 当你尝试加载旧版本的程序序列化的旧对象时, 你将获得无效类异常 InvalidClassException。</p><p><strong>问题 1) Java 中的可序列化接口和可外部接口之间的区别是什么？</strong></p><p>这是 Java 序列化访谈中最常问的问题。下面是我的版本 Externalizable 给我们提供 writeExternal() 和 readExternal() 方法, 这让我们灵活地控制 Java 序列化机制, 而不是依赖于 Java 的默认序列化。正确实现 Externalizable 接口可以显著提高应用程序的性能。</p><p><strong>问题 2) 可序列化的方法有多少？**</strong>如果没有方法,那么可序列化接口的用途是什么？**</p><p>可序列化 Serializalbe 接口存在于java.io包中,构成了 Java 序列化机制的核心。它没有任何方法, 在 Java 中也称为标记接口。当类实现 java.io.Serializable 接口时, 它将在 Java 中变得可序列化, 并指示编译器使用 Java 序列化机制序列化此对象。</p><p><strong>问题 3) 什么是 serialVersionUID ？**</strong>如果你不定义这个, 会发生什么？**</p><p>我最喜欢的关于Java序列化的问题面试问题之一。serialVersionUID 是一个 private static final long 型 ID, 当它被印在对象上时, 它通常是对象的哈希码,你可以使用 serialver 这个 JDK 工具来查看序列化对象的 serialVersionUID。SerialVerionUID 用于对象的版本控制。也可以在类文件中指定 serialVersionUID。不指定 serialVersionUID的后果是,当你添加或修改类中的任何字段时, 则已序列化类将无法恢复, 因为为新类和旧序列化对象生成的 serialVersionUID 将有所不同。Java 序列化过程依赖于正确的序列化对象恢复状态的，并在序列化对象序列版本不匹配的情况下引发 java.io.InvalidClassException 无效类异常。</p><p><strong>问题 4) 序列化时,你希望某些成员不要序列化？**</strong>你如何实现它？**</p><p>另一个经常被问到的序列化面试问题。这也是一些时候也问, 如什么是瞬态 trasient 变量, 瞬态和静态变量会不会得到序列化等,所以,如果你不希望任何字段是对象的状态的一部分, 然后声明它静态或瞬态根据你的需要, 这样就不会是在 Java 序列化过程中被包含在内。</p><p><strong>问题 5) 如果类中的一个成员未实现可序列化接口, 会发生什么情况？</strong></p><p>关于Java序列化过程的一个简单问题。如果尝试序列化实现可序列化的类的对象,但该对象包含对不可序列化类的引用,则在运行时将引发不可序列化异常 NotSerializableException, 这就是为什么我始终将一个可序列化警报(在我的代码注释部分中), 代码注释最佳实践之一, 指示开发人员记住这一事实, 在可序列化类中添加新字段时要注意。</p><p><strong>问题 6) 如果类是可序列化的, 但其超类不是, 则反序列化后从超级类继承的实例变量的状态如何？</strong></p><p>Java 序列化过程仅在对象层次都是可序列化结构中继续, 即实现 Java 中的可序列化接口, 并且从超级类继承的实例变量的值将通过调用构造函数初始化, 在反序列化过程中不可序列化的超级类。一旦构造函数链接将启动, 就不可能停止, 因此, 即使层次结构中较高的类实现可序列化接口, 也将执行构造函数。正如你从陈述中看到的, 这个序列化面试问题看起来非常棘手和有难度, 但如果你熟悉关键概念, 则并不难。</p><p><strong>问题 7) 是否可以自定义序列化过程, 或者是否可以覆盖 Java 中的默认序列化过程？</strong></p><p>答案是肯定的, 你可以。我们都知道,对于序列化一个对象需调用 ObjectOutputStream.writeObject(saveThisObject), 并用 ObjectInputStream.readObject() 读取对象, 但 Java 虚拟机为你提供的还有一件事, 是定义这两个方法。如果在类中定义这两种方法, 则 JVM 将调用这两种方法, 而不是应用默认序列化机制。你可以在此处通过执行任何类型的预处理或后处理任务来自定义对象序列化和反序列化的行为。</p><p>需要注意的重要一点是要声明这些方法为私有方法, 以避免被继承、重写或重载。由于只有 Java 虚拟机可以调用类的私有方法, 你的类的完整性会得到保留, 并且 Java 序列化将正常工作。在我看来, 这是在任何 Java 序列化面试中可以问的最好问题之一, 一个很好的后续问题是, 为什么要为你的对象提供自定义序列化表单？</p><p><strong>问题 8) 假设新类的超级类实现可序列化接口, 如何避免新类被序列化？</strong></p><p>在 Java 序列化中一个棘手的面试问题。如果类的 Super 类已经在 Java 中实现了可序列化接口, 那么它在 Java 中已经可以序列化, 因为你不能取消接口, 它不可能真正使它无法序列化类, 但是有一种方法可以避免新类序列化。为了避免 Java 序列化,你需要在类中实现 writeObject() 和 readObject() 方法, 并且需要从该方法引发不序列化异常NotSerializableException。这是自定义 Java 序列化过程的另一个好处, 如上述序列化面试问题中所述, 并且通常随着面试进度, 它作为后续问题提出。</p><p><strong>问题 9) 在 Java 中的序列化和反序列化过程中使用哪些方法？</strong></p><p>这是很常见的面试问题, 在序列化基本上面试官试图知道: 你是否熟悉 readObject() 的用法、writeObject()、readExternal() 和 writeExternal()。Java 序列化由java.io.ObjectOutputStream类完成。该类是一个筛选器流, 它封装在较低级别的字节流中, 以处理序列化机制。要通过序列化机制存储任何对象, 我们调用 ObjectOutputStream.writeObject(savethisobject), 并反序列化该对象, 我们称之为 ObjectInputStream.readObject()方法。调用以 writeObject() 方法在 java 中触发序列化过程。关于 readObject() 方法, 需要注意的一点很重要一点是, 它用于从持久性读取字节, 并从这些字节创建对象, 并返回一个对象, 该对象需要类型强制转换为正确的类型。</p><p><strong>问题 10) 假设你有一个类,它序列化并存储在持久性中, 然后修改了该类以添加新字段。**</strong>如果对已序列化的对象进行反序列化, 会发生什么情况？**</p><p>这取决于类是否具有其自己的 serialVersionUID。正如我们从上面的问题知道, 如果我们不提供 serialVersionUID, 则 Java 编译器将生成它, 通常它等于对象的哈希代码。通过添加任何新字段, 有可能为该类新版本生成的新 serialVersionUID 与已序列化的对象不同, 在这种情况下, Java 序列化 API 将引发 java.io.InvalidClassException, 因此建议在代码中拥有自己的 serialVersionUID, 并确保在单个类中始终保持不变。</p><p><strong>11) Java序列化机制中的兼容更改和不兼容更改是什么？</strong></p><p>真正的挑战在于通过添加任何字段、方法或删除任何字段或方法来更改类结构, 方法是使用已序列化的对象。根据 Java 序列化规范, 添加任何字段或方法都面临兼容的更改和更改类层次结构或取消实现的可序列化接口, 有些接口在非兼容更改下。对于兼容和非兼容更改的完整列表, 我建议阅读 Java 序列化规范。</p><p><strong>12) 我们可以通过网络传输一个序列化的对象吗？</strong></p><p>是的 ,你可以通过网络传输序列化对象, 因为 Java 序列化对象仍以字节的形式保留, 字节可以通过网络发送。你还可以将序列化对象存储在磁盘或数据库中作为 Blob。</p><p><strong>13) 在 Java 序列化期间,哪些变量未序列化？</strong></p><p>这个问题问得不同, 但目的还是一样的, Java开发人员是否知道静态和瞬态变量的细节。由于静态变量属于类, 而不是对象, 因此它们不是对象状态的一部分, 因此在 Java 序列化过程中不会保存它们。由于 Java 序列化仅保留对象的状态,而不是对象本身。瞬态变量也不包含在 Java 序列化过程中, 并且不是对象的序列化状态的一部分。在提出这个问题之后,面试官会询问后续内容, 如果你不存储这些变量的值, 那么一旦对这些对象进行反序列化并重新创建这些变量, 这些变量的价值是多少？这是你们要考虑的。</p><h1 id="为什么Java中-wait-方法需要在-synchronized-的方法中调用"><a href="#为什么Java中-wait-方法需要在-synchronized-的方法中调用" class="headerlink" title="为什么Java中 wait 方法需要在 synchronized 的方法中调用?"></a><font size="4px">为什么Java中 wait 方法需要在 synchronized 的方法中调用?</font></h1><p>另一个棘手的核心 Java 问题，wait 和 notify。它们是在有 synchronized 标记的方法或 synchronized 块中调用的，因为 wait 和 modify 需要监视对其上调用 wait 或 notify-get 的 Object。</p><p>大多数Java开发人员都知道对象类的 wait()，notify() 和 notifyAll()方法必须在Java中的 synchronized 方法或 synchronized 块中调用, 但是我们想过多少次, 为什么在 Java 中 wait, notify 和 notifyAll 来自 synchronized 块或方法?</p><p>最近这个问题在Java面试中被问到我的一位朋友，他思索了一下，并回答说: 如果我们不从同步上下文中调用 wait() 或 notify() 方法，我们将在 Java 中收到 IllegalMonitorStateException。</p><p>他的回答从实际效果上年是正确的，但面试官对这样的答案不会完全满意，并希望向他解释这个问题。面试结束后 他和我讨论了同样的问题，我认为他应该告诉面试官关于 Java 中 wait()和 notify()之间的竞态条件，如果我们不在同步方法或块中调用它们就可能存在。</p><p>让我们看看竞态条件如何在Java程序中发生。它也是流行的线程面试问题之一，并经常在电话和面对面的Java开发人员面试中出现。因此，如果你正在准备Java面试，那么你应该准备这样的问题，并且可以真正帮助你的一本书是《Java程序员面试公式书》的。这是一本罕见的书，涵盖了Java访谈的几乎所有重要主题，例如核心Java，多线程，IO 和 NIO 以及 Spring 和 Hibernate 等框架。你可以在这里查看。</p><p><img src="/2019/09/15/挑战10道超难Java面试题/wait:noftify.png" alt="wait:noftify"></p><p>为什么要等待来自 Java中的 synchronized 方法的 wait方法为什么必须从 Java 中的 synchronized 块或方法调用 ？我们主要使用 wait()，notify() 或 notifyAll() 方法用于 Java 中的线程间通信。一个线程在检查条件后正在等待，例如，在经典的生产者 - 消费者问题中，如果缓冲区已满，则生产者线程等待，并且消费者线程通过使用元素在缓冲区中创建空间后通知生产者线程。调用notify()或notifyAll()方法向单个或多个线程发出一个条件已更改的通知，并且一旦通知线程离开 synchronized 块，正在等待的所有线程开始获取正在等待的对象锁定，幸运的线程在重新获取锁之后从 wait() 方法返回并继续进行。</p><p>让我们将整个操作分成几步，以查看Java中wait()和notify()方法之间的竞争条件的可能性，我们将使用Produce Consumer 线程示例更好地理解方案：</p><ul><li>Producer 线程测试条件(缓冲区是是否完整)并确认必须等待(找到缓冲区已满)。</li><li>Consumer 线程在使用缓冲区中的元素后设置条件。</li><li>Consumer 线程调用 notify() 方法; 这是不会被听到的，因为 Producer 线程还没有等待。</li><li>Producer 线程调用 wait() 方法并进入等待状态。</li></ul><p>因此，由于竞态条件，我们可能会丢失通知，如果我们使用缓冲区或只使用一个元素，生产线程将永远等待，你的程序将挂起。“在java同步中等待 notify 和 notifyall 现在让我们考虑如何解决这个潜在的竞态条件？</p><p>这个竞态条件通过使用 Java 提供的 synchronized 关键字和锁定来解决。为了调用 wait()，notify() 或 notifyAll(), 在Java中，我们必须获得对我们调用方法的对象的锁定。由于 Java 中的 wait() 方法在等待之前释放锁定并在从 wait() 返回之前重新获取锁定方法，我们必须使用这个锁来确保检查条件(缓冲区是否已满)和设置条件(从缓冲区获取元素)是原子的，这可以通过在 Java 中使用 synchronized 方法或块来实现。</p><p>我不确定这是否是面试官实际期待的，但这个我认为至少有意义，请纠正我如果我错了，请告诉我们是否还有其他令人信服的理由调用 wait()，notify() 或 Java 中的 notifyAll() 方法。</p><p><strong>总结一下，我们用 Java 中的 synchronized 方法或 synchronized 块调用 Java 中的 wait()，notify() 或 notifyAll() 方法来避免：</strong></p><p>1) Java 会抛出 IllegalMonitorStateException，如果我们不调用来自同步上下文的wait()，notify()或者notifyAll()方法。</p><p>2) Javac 中 wait 和 notify 方法之间的任何潜在竞争条件。</p><h1 id="编写-Java-程序时-如何在-Java-中创建死锁并修复它？-1"><a href="#编写-Java-程序时-如何在-Java-中创建死锁并修复它？-1" class="headerlink" title="编写 Java 程序时, 如何在 Java 中创建死锁并修复它？"></a><font size="4px">编写 Java 程序时, 如何在 Java 中创建死锁并修复它？</font></h1><p>不，你不能在Java中覆盖静态方法，但在子类中声明一个完全相同的方法不是编译时错误，这称为隐藏在Java中的方法。</p><p>你不能覆盖Java中的静态方法，因为方法覆盖基于运行时的动态绑定，静态方法在编译时使用静态绑定进行绑定。虽然可以在子类中声明一个具有相同名称和方法签名的方法，看起来可以在Java中覆盖静态方法，但实际上这是方法隐藏。Java不会在运行时解析方法调用，并且根据用于调用静态方法的 Object 类型，将调用相应的方法。这意味着如果你使用父类的类型来调用静态方法，那么原始静态将从父类中调用，另一方面如果你使用子类的类型来调用静态方法，则会调用来自子类的方法。简而言之，你无法在Java中覆盖静态方法。如果你使用像Eclipse或Netbeans这样的Java IDE，它们将显示警告静态方法应该使用类名而不是使用对象来调用，因为静态方法不能在Java中重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Java program which demonstrate that we can not override static method in Java.</span></span><br><span class="line"><span class="comment"> * Had Static method can be overridden, with Super class type and sub class object</span></span><br><span class="line"><span class="comment"> * static method from sub class would be called in our example, which is not the case.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanWeOverrideStaticMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Screen scrn = <span class="keyword">new</span> ColorScreen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if we can  override static , this should call method from Child class</span></span><br><span class="line">        scrn.show(); <span class="comment">//IDE will show warning, static method should be called from classname</span></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span></span>&#123; </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * public static method which can not be overridden in Java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"Static method from parent class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorScreen</span> <span class="keyword">extends</span> <span class="title">Screen</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * static method of same name and method signature as existed in super</span></span><br><span class="line"><span class="comment">     * class, this is not method overriding instead this is called</span></span><br><span class="line"><span class="comment">     * method hiding in Java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"Overridden static method in Child Class in Java"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><blockquote><p>Static method from parent class</p></blockquote><p>此输出确认你无法覆盖Java中的静态方法，并且静态方法基于类型信息而不是基于Object进行绑定。如果要覆盖静态mehtod，则会调用子类或 ColorScreen 中的方法。这一切都在讨论中我们可以覆盖Java中的静态方法。我们已经确认没有，我们不能覆盖静态方法，我们只能在Java中隐藏静态方法。创建具有相同名称和mehtod签名的静态方法称为Java隐藏方法。IDE将显示警告：”静态方法应该使用类名而不是使用对象来调用”, 因为静态方法不能在Java中重写。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;来自Java核心部分的10个最棘手的Java面试问题列表&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-线程</title>
    <link href="https://www.runaccpeted.com/2019/09/14/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E7%BA%BF%E7%A8%8B/"/>
    <id>https://www.runaccpeted.com/2019/09/14/Java基础知识-线程/</id>
    <published>2019-09-13T16:11:47.000Z</published>
    <updated>2019-09-19T11:15:57.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">多线程</blockquote><a id="more"></a><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a><font size="4px">进程</font></h1><p>处于运行过程中的程序。拥有独立性，动态性，并发性</p><p>并发指多个进程指令被快速轮换宏观上实现并发</p><p>并行指同一时刻，多条指令在多个处理器上同时执行</p><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a><font size="4px">创建线程</font></h1><h1 id="extends-Thread"><a href="#extends-Thread" class="headerlink" title="extends Thread"></a><font size="3px">extends Thread</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    test t = <span class="keyword">new</span> test;</span><br><span class="line">    t.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过new Thread()方式，创造了新的实例变量，线程之间不存在资源共享</p><h1 id="implements-Runnable"><a href="#implements-Runnable" class="headerlink" title="implements Runnable"></a><font size="3px">implements Runnable</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">Runable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    test t = <span class="keyword">new</span> test;</span><br><span class="line">    <span class="keyword">new</span> Thread(t,<span class="string">"Test"</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程之间资源共享</p><h1 id="implements-Callable"><a href="#implements-Callable" class="headerlink" title="implements Callable"></a><font size="3px">implements Callable</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> test());</span><br><span class="line">    <span class="keyword">new</span> Thread(task,<span class="string">""</span>).start();</span><br><span class="line">    Integer ans=task.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a><font size="4px">线程状态</font></h1><p><img src="/2019/09/14/Java基础知识-线程/a.jpeg" alt></p><ul><li><p>New     </p><p>jvm分配内存，初始化成员变量值，此时的线程等同于普通类</p><p>调用.start() 线程进入就绪状态，等待cpu的调度</p></li><li><p>Runnable</p><p>获得cpu，执行run()内的代码，执行时长为时间片长</p></li><li><p>Blocked</p><blockquote><p> 时间片用完</p></blockquote><blockquote><p>发生阻塞式IO</p></blockquote><blockquote><p>sleep()方法主动放弃处理器资源</p></blockquote><blockquote><p>同步资源被锁定</p></blockquote><blockquote><p>等待通知notify</p></blockquote><blockquote><p>….</p></blockquote><p>线程进入阻塞状态</p></li><li><p>Waiting</p><p>解除了阻塞原因后，线程重新进入就绪状态</p></li><li><p>Timed waiting</p></li><li><p>Terminated</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.currentThread().getState();</span><br></pre></td></tr></table></figure><h1 id="控制线程"><a href="#控制线程" class="headerlink" title="控制线程"></a><font size="4px">控制线程</font></h1><h1 id="join"><a href="#join" class="headerlink" title="join()"></a><font size="3px">join()</font></h1><p>new Thread().join() 等待该线程执行完才执行其他线程</p><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a><font size="3px">守护线程</font></h1><p>new Thread().setDeamon(true)</p><p>jvm不会等待该线程运行结束。当整个虚拟机中只有这种线程时，虚拟机选择退出</p><h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a><font size="3px">sleep()</font></h1><p>暂停当前线程进入阻塞状态，不释放资源</p><h1 id="yield"><a href="#yield" class="headerlink" title="yield()"></a><font size="3px">yield()</font></h1><p>new Thread().yield() 该线程主动让出时间片进入就绪状态</p><h1 id="改变线程优先级"><a href="#改变线程优先级" class="headerlink" title="改变线程优先级"></a><font size="3px">改变线程优先级</font></h1><p>优先级也不能保证线程执行的先后顺序</p><p>new Thread().setPriority(Priority.MIN_PRORITY) 1</p><p>Priority.MAX_PRORITY 10</p><p>Priority.NORM_PRORITY 5</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;多线程&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识-集合</title>
    <link href="https://www.runaccpeted.com/2019/09/13/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E9%9B%86%E5%90%88/"/>
    <id>https://www.runaccpeted.com/2019/09/13/Java基础知识-集合/</id>
    <published>2019-09-13T14:12:05.000Z</published>
    <updated>2019-09-15T17:09:38.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Collection HashMap</blockquote><a id="more"></a><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a><font size="4px">Collection</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"><span class="comment">//并 other元素添加到集合中</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;E&gt; other)</span></span>;</span><br><span class="line"><span class="comment">//交 删除与other中匹配的所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection other)</span></span>;</span><br><span class="line"><span class="comment">//差 删除与other不同的元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection other)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量删除符合filter条件的所有元素 Predicate对象</span></span><br><span class="line">Collection.removeIf(ele-&gt;(String)ele.length()&lt;<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h1 id="固定长度的List"><a href="#固定长度的List" class="headerlink" title="固定长度的List"></a><font size="4px">固定长度的List</font></h1><p>Arrays.ArrayList是Arrays的内部类ArrayList的实例，不可增加，删除元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Arrays.asList(Object... obj);</span><br></pre></td></tr></table></figure><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><font size="4px">LinkedList</font></h1><p>双向链表实现，只能顺序访问，故get方法效率低，可以快速插入和删除元素。</p><p>结点 prev|element|next</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>类 继承AbstractSequentialList，实现List接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>add() 采用尾插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">last = newNode;</span><br></pre></td></tr></table></figure><p>查找结点</p><p>前一半从前往后，后一半从后往前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><font size="4px">ArrayList</font></h1><p>动态数组，支持随机访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>,<span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//数组默认大小10</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_CAPACITY</span> </span>= <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>扩容 扩为1.5倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure><p>add()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elementData[size++] = e;</span><br></pre></td></tr></table></figure><p>remove()</p><p>调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,numMoved);</span><br><span class="line">elementData[--size] = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>序列化</p><p>Serializable表示可以被序列化，保存元素的数组 elementData 使用 transient 修饰，该关键字声明数组默认不会被序列化。实现 writeObject() 和 readObject() 来控制序列化数组中有元素填充那部分内容。</p><h1 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><font size="4px">Vector</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;  <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure><p>扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + oldCapacity;</span><br></pre></td></tr></table></figure><p>内部采用synchronized同步块，线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br></pre></td></tr></table></figure><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><font size="4px">HashSet</font></h1><p>内部采用HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">HashSet</span>() </span>&#123;</span><br><span class="line">     map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><font size="4px">TreeSet</font></h1><p>基于红黑树实现，有序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">TreeSet</span>(<span class="title">Comparator</span>&lt;? <span class="title">super</span> <span class="title">E</span>&gt; <span class="title">comparator</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><font size="4px">HashMap</font></h1><ul><li>HashMap 可以插入键为 null 的 Entry。</li><li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//<span class="title">table</span> 的容量大小，默认为 16。需要注意的是 <span class="title">capacity</span> 必须保证为 2 的 <span class="title">n</span> 次方</span></span><br><span class="line"><span class="class"><span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_INITIAL_CAPACITY</span> </span>= <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">//装载因子，用来确认table 数组是否需要动态扩展，threshold = (int)(newCapacity * loadFactor)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//size 的临界值，当 size 大于等于 threshold 就必须进行扩容操作，当链表长度超过 8 时，链表转换为红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>映射</p><p>hashCode() 的<strong>高 16 位异或低 16 位</strong>实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度，功效和质量来考虑的，<strong>减少系统的开销</strong>，也不会造成<strong>因为高位没有参与</strong>下标的计算，从而引起的<strong>碰撞</strong>。保证了对象的 hashCode 的 32 位值只要有一位发生改变，整个 hash() 返回值就会改变。尽可能的减少碰撞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">Node&lt;K,V&gt; next;</span><br><span class="line"><span class="keyword">do</span> &#123; </span><br><span class="line">      next = e.next;</span><br><span class="line">      <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                 loHead = e;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">       loTail = e;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                   hiHead = e;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                   hiTail.next = e;</span><br><span class="line">              hiTail = e; &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容为2倍</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a><font size="3px">工作原理</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"K1"</span>, <span class="string">"V1"</span>);</span><br><span class="line">map.put(<span class="string">"K2"</span>, <span class="string">"V2"</span>);</span><br></pre></td></tr></table></figure><ul><li>插入 &lt;K1,V1&gt; 键值对，先计算 K1 的 hashCode 为 1，使用除留余数法得到所在的下标 1%16=1。</li><li>插入 &lt;K2,V2&gt; 键值对，先计算 K2 的 hashCode 为 1，使用除留余数法得到所在的桶下标 1%16=1,插在 &lt;K1,V1&gt; 后面。</li></ul><p>HashMap采用的是尾插法。</p><p>HashMap底层采用hash数组和单向链表实现。初始数组长度为16，每个数组元素为一个Node。</p><p><strong>存储</strong>：put中传入K，V值。</p><p>1）调用hash(k)计算K的hash值，结合数组长度得到数组下标。</p><p>2)   调整数组大小当容器中的元素个数大于 capacity * loadfactor 时，容器会进行扩容resize 为 2n）；</p><p>3)   如果K的hash值在HashMap中不存在，则插入；已存在，比较两者equals，false则采用拉链法尾插到数组中，equals为true，更新V值。</p><p><strong>获取</strong>：</p><p>1)   调用 hash(K) 方法（<strong>计算 K 的 hash 值</strong>）从而<strong>获取该键值所在链表的数组下标</strong>；</p><p>2）顺序遍历链表，equals()方法查找<strong>相同 Node 链表中 K 值</strong>对应的 V 值。</p><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a><font size="3px">遍历方式</font></h2><ul><li><p><strong>for-each map.keySet()</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>for-each map.entrySet()</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    entry.getKey();</span><br><span class="line">    entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>for-each map.entrySet()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">        entry.getKey();</span><br><span class="line">        entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>for-each map.entrySet().iterator()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">        entry.getKey();</span><br><span class="line">        entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a><font size="4px">Hashtable</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;<span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">   </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Hashtable</span>(<span class="title">int</span> <span class="title">initialCapacity</span>, <span class="title">float</span> <span class="title">loadFactor</span>) </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Hashtable</span>() </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>键值对都不允许为null,线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> hash </span>= key.hashCode();</span><br><span class="line"><span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="HashMap-vs-Hashtable"><a href="#HashMap-vs-Hashtable" class="headerlink" title="HashMap vs. Hashtable"></a><font size="4px">HashMap vs. Hashtable</font></h1><table><thead><tr><th align="center"></th><th align="center">HashMap</th><th align="center">Hashtable</th></tr></thead><tbody><tr><td align="center">父类</td><td align="center">AbstractMap</td><td align="center">Dictionary</td></tr><tr><td align="center">安全性</td><td align="center">线程不安全</td><td align="center">线程安全</td></tr><tr><td align="center">键值</td><td align="center">允许一条记录键值为null，允许多条记录的值为null</td><td align="center">键值都不允许为null</td></tr><tr><td align="center">初始化数组</td><td align="center">16</td><td align="center">11</td></tr><tr><td align="center">扩容</td><td align="center">扩大2倍</td><td align="center">扩大2倍+1</td></tr><tr><td align="center">hash值</td><td align="center">采用高低16位异或计算</td><td align="center">直接使用hashCode</td></tr></tbody></table><h1 id="CurrentHashMap"><a href="#CurrentHashMap" class="headerlink" title="CurrentHashMap"></a><font size="4px">CurrentHashMap</font></h1><p>ConcurrentHashMap是 Java并发包 java.util.concurrent 中提供的一个<strong>线程安全且高效</strong>的 HashMap 实现。</p><p><strong>HashTable</strong> 使用<strong>一把锁（锁住整个链表结构）</strong>处理并发问题，多个线程竞争一把锁，容易<strong>阻塞</strong>；</p><p><strong>ConcurrentHashMap</strong><br><strong>JDK 1.7</strong> 中使用<strong>分段锁（ReentrantLock + Segment + HashEntry）</strong>，相当于把一个 HashMap 分成多个段，每段分配一把锁，这样支持多线程访问。锁粒度：<strong>基于 Segment</strong>，包含多个 HashEntry。<br><strong>JDK 1.8</strong> 中使用 <strong>CAS + synchronized + Node + 红黑树</strong>。锁粒度：<strong>Node（首结点）</strong>（实现 Map.Entry&lt;K,V&gt;）。锁粒度降低了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_CAPACITY</span> </span>= <span class="number">16</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p> 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。</p><p>并且也在链表过长时会转换为红黑树。</p><p>插入结点 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (f) &#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>jdk1.7</strong></p><p>采用<strong>分段锁</strong>的机制，实现并发的更新操作，底层采用<strong>数组+链表</strong>的存储结构，包括两个核心静态内部类 <strong>Segment 和 HashEntry</strong>。<br>①、<strong>Segment</strong> 继承 <strong>ReentrantLock（重入锁）</strong> 用来充当锁的角色，每个 Segment 对象守护每个散列映射表的若干个桶；<br>②、HashEntry 用来封装映射表的键-值对；<br>③、每个桶是由若干个 HashEntry 对象链接起来的链表。</p><p><strong>jdk 1.8</strong> </p><p>采用Node + CAS + Synchronized来保证并发安全。<strong>取消类 Segment</strong>，直接用 <strong>table 数组</strong>存储键值对；当 HashEntry 对象组成的链表长度超过 TREEIFY_THRESHOLD 时，<strong>链表转换为红黑树</strong>，提升性能。底层变更为<strong>数组 + 链表 + 红黑树</strong>。</p><p><a href="https://www.w3resource.com/java-tutorial/java-collections.php" target="_blank" rel="noopener">Java Collection Framework</a></p><p><a href="https://openhome.cc/Gossip/DesignPattern/IteratorPattern.htm" target="_blank" rel="noopener">Iterator 模式</a></p><p><a href="https://tech.meituan.com/java_hashmap.html" target="_blank" rel="noopener">Java 8 系列之重新认识 HashMap</a></p><p><a href="http://javarevisited.blogspot.hk/2010/10/difference-between-hashmap-and.html" target="_blank" rel="noopener">What is difference between HashMap and Hashtable in Java?</a></p><p><a href="http://www.zhangchangle.com/2018/02/07/Java集合之HashMap/" target="_blank" rel="noopener">Java 集合之 HashMap</a></p><p><a href="http://www.programering.com/a/MDO3QDNwATM.html" target="_blank" rel="noopener">The principle of ConcurrentHashMap analysis</a></p><p><a href="https://www.ibm.com/developerworks/cn/java/java-lo-concurrenthashmap/" target="_blank" rel="noopener">探索 ConcurrentHashMap 高并发性的实现机制</a></p><p><a href="https://www.jianshu.com/p/75adf47958a7" target="_blank" rel="noopener">HashMap 相关面试题及其解答</a></p><p><a href="http://wiki.jikexueyuan.com/project/java-enhancement/java-thirtysix.html" target="_blank" rel="noopener">Java 集合细节（二）：asList 的缺陷</a></p><p><a href="http://javaconceptoftheday.com/java-collection-framework-linkedlist-class/" target="_blank" rel="noopener">Java Collection Framework – The LinkedList Class</a></p><h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><font size="4px">TreeMap</font></h1><p>用于比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">TreeMap</span>(<span class="title">Comparator</span>&lt;? <span class="title">super</span> <span class="title">K</span>&gt; <span class="title">comparator</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a><font size="4px">LinkedHashMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结点</p><p>内部维护了一个双向链表，用来维护插入顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">   <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a><font size="4px">EnumMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumMap</span> &lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>key根据enum枚举类中的顺序排序，不允许使用key为null，允许value的null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EnumMap e = <span class="keyword">new</span> EnumMap(Season.class);</span><br><span class="line">e.put(Season.SUMMER,<span class="string">"夏天"</span>);</span><br><span class="line">e.put(Season.WINTER,<span class="string">"冬天"</span>);</span><br></pre></td></tr></table></figure><h1 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a><font size="4px">WeakHashMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>WeakHashMap 的 Entry 继承自 WeakReference，被 WeakReference 关联的对象在下一次垃圾回收时会被回收。</p><p>WeakHashMap 主要用来实现缓存，通过使用 WeakHashMap 来引用缓存对象，由 JVM 对这部分缓存进行回收。</p><p>Tomcat 中的 ConcurrentCache 使用了 WeakHashMap 来实现缓存功能。</p><p>ConcurrentCache 采取的是分代缓存：</p><ul><li>经常使用的对象放入 eden 中，eden 使用 ConcurrentHashMap 实现，不用担心会被回收（伊甸园）；</li><li>不常用的对象放入 longterm，longterm 使用 WeakHashMap 实现，这些老对象会被垃圾收集器回收。</li><li>当调用 get() 方法时，会先从 eden 区获取，如果没有找到的话再到 longterm 获取，当从 longterm 获取到就把对象放入 eden 中，从而保证经常被访问的节点不容易被回收。</li><li>当调用 put() 方法时，如果 eden 的大小超过了 size，那么就将 eden 中的所有对象都放入 longterm 中，利用虚拟机回收掉一部分不经常使用的对象。</li></ul><h1 id="IdentityHashMap"><a href="#IdentityHashMap" class="headerlink" title="IdentityHashMap"></a><font size="4px">IdentityHashMap</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure><p>允许使用null作为key和value，IdentityHashMap并不保证键值对的顺序。IdentityHashMap要求两个key严格相等才替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IdentityHashMap&lt;Object,<span class="keyword">int</span>&gt; id = <span class="keyword">new</span> IdentityHashMap&lt;&gt;();</span><br><span class="line">id.put(<span class="keyword">new</span> String(a),<span class="number">1</span>);</span><br><span class="line">id.put(<span class="keyword">new</span> String(a),<span class="number">2</span>); <span class="comment">//通过==判断不相等，则为2个key</span></span><br><span class="line">id.put(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">id.put(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//直接量相等则为同一个key</span></span><br></pre></td></tr></table></figure><h1 id="工具类Collections"><a href="#工具类Collections" class="headerlink" title="工具类Collections"></a><font size="4px">工具类Collections</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反转</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list)</span></span>;</span><br><span class="line"><span class="comment">//随机洗牌</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List list)</span></span>;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list)</span></span>;</span><br><span class="line"><span class="comment">//交换i位和j位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list，<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">synchronizedCollection</span><span class="params">(List list)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><font size="4px">Enumeration</font></h1><p>Iterator的old版本,存在于vector，Hashtable中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line">Enumeration em = v.elements();</span><br><span class="line"><span class="keyword">while</span>(em.hasMoreElements())&#123;</span><br><span class="line">  em.nextElement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><font size="4px">泛型</font></h1><p>参数化类型，在创建对象时指定集合元素类型。不需要再对集合元素取值进行强制类型转换，泛型会动态指定类型实参。</p><p>实际上，系统并没有创建带泛型的class文件，在编译时，不管泛型参数是什么，运行的是同样的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">System.out.println(list1.getClass()==list2.getClass()); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>在泛型中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(List&lt;Object&gt; c)</span></span>&#123; &#125;</span><br><span class="line">ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">method(list1); <span class="comment">//error 无法应用</span></span><br></pre></td></tr></table></figure><p>通配符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt; list;</span><br><span class="line"><span class="comment">//上限</span></span><br><span class="line">List&lt;? extends Father&gt; list;</span><br><span class="line"><span class="comment">//下限</span></span><br><span class="line">List&lt;? Super Son&gt; list;</span><br></pre></td></tr></table></figure><p>泛型数组</p><p>java允许创建无上限的通配符泛型数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt;[] array = <span class="keyword">new</span> ArrayList&lt;&gt;[<span class="number">10</span>];</span><br><span class="line">Object temp = array.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(temp instanceOf String)&#123;</span><br><span class="line">  Strign s = (String) temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Collection HashMap&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识</title>
    <link href="https://www.runaccpeted.com/2019/09/13/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.runaccpeted.com/2019/09/13/Java基础知识/</id>
    <published>2019-09-13T13:03:44.000Z</published>
    <updated>2019-09-18T17:07:32.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Java核心技术卷I知识点</blockquote><a id="more"></a><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><font size="4px">数据类型</font></h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><font size="4px">基本数据类型</font></h2><table><thead><tr><th></th><th>数据类型</th><th>字节长度</th><th>范围</th><th>默认值</th><th>包装类</th></tr></thead><tbody><tr><td>整型</td><td>byte</td><td>1</td><td>-127～128</td><td>0</td><td>Byte</td></tr><tr><td>整型</td><td>short</td><td>2</td><td>-3万～3万</td><td>0</td><td>Short</td></tr><tr><td>整型</td><td>int</td><td>4</td><td>-2x10^7</td><td>0</td><td>Integer</td></tr><tr><td>整型</td><td>long</td><td>8</td><td>-9x10^18</td><td>0L</td><td>Long</td></tr><tr><td>浮点数</td><td>float</td><td>4</td><td>32位 1 8 11，6～7位精确</td><td>0.0f</td><td>Float</td></tr><tr><td>浮点数</td><td>double</td><td>8</td><td>64位 1 11 52，15-16位精确</td><td>0.0</td><td>Double</td></tr><tr><td>字符</td><td>char</td><td>2</td><td>0～65535</td><td>\u0000</td><td>Character</td></tr><tr><td>布尔值</td><td>boolean</td><td>1</td><td>true or false，不与其他强制转换</td><td>FALSE</td><td>Boolean</td></tr></tbody></table><p>null不是合法的object实例 编译器不会分配内存 它仅仅表示当前引用类型不指向任何对象</p><p>当计算机保存某个字符时，只要将该字符的编号转换成二进制码，字符集就是所有字符的编号组成的总和。</p><p>汉字：默认使用Unicode编码方式，一个字符占2字节</p><p>英文占1字符，中文占2字符</p><p>判断汉字：String.getByte().length() == String.length()</p><h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a><font size="3px">隐式类型转换</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> short1 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//short1 = short1 + 1; 字面量1是int类型，比short类型精度高，不能隐式将int转为short类型</span></span><br><span class="line"></span><br><span class="line">short1 += <span class="number">1</span>; <span class="comment">//隐式类型转换则是可以的 == （short)(short1+1);</span></span><br></pre></td></tr></table></figure><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a><font size="3px">强制类型转换</font></h2><p>无精度丢失 byte -&gt; short -&gt; int -&gt; long ；char -&gt; int； int -&gt; double</p><p>精度丢失 int –&gt; float；  long –&gt; float；long –&gt; double</p><h2 id="不可变类"><a href="#不可变类" class="headerlink" title="不可变类"></a><font size="3px">不可变类</font></h2><p>一旦创建了这个类的实例就不允许修改它的值，它的成员变量也不能被修改，在Java中所有基本数据类型的包装类是不可变类。</p><p>包装类中所有成员变量被private修饰，只提供构造函数，没有set，get方法，所有方法不能被子类覆盖</p><h2 id="装箱，拆箱"><a href="#装箱，拆箱" class="headerlink" title="装箱，拆箱"></a><font size="3px">装箱，拆箱</font></h2><p>java中对应每个基本数据类型都有包装类，把数据装成对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装箱</span></span><br><span class="line">Integera=Integer.valueOf(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//拆箱</span></span><br><span class="line"><span class="keyword">int</span> in=newInteger(<span class="number">3</span>).intValue();</span><br><span class="line"><span class="comment">//String --&gt; int</span></span><br><span class="line">in=Integer.parseInt(str);</span><br></pre></td></tr></table></figure><h2 id="缓存池问题"><a href="#缓存池问题" class="headerlink" title="缓存池问题"></a><font size="3px" color="#fff0000">缓存池问题</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer x = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line">Integer y = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line">System.out.println(x == y);    <span class="comment">// false</span></span><br><span class="line">x = Integer.valueOf(<span class="number">2</span>);</span><br><span class="line">y = Integer.valueOf(<span class="number">2</span>);</span><br><span class="line">System.out.println(x == y);   <span class="comment">// true</span></span><br><span class="line">x = <span class="number">2</span>;</span><br><span class="line">y = <span class="number">2</span>;</span><br><span class="line">System.out.println(x == y);   <span class="comment">// true 采用了自动装箱 Integer.valueOf(2);</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：new Integer() 每次创建新对象；Integer.valueOf() 使用缓存池取的是同一个对象的引用。</p><p>Jdk1.8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer 缓存池的大小默认为 -128~127。cache[256]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">       <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">       <span class="keyword">static</span> &#123;</span><br><span class="line">           <span class="comment">// high value may be configured by property</span></span><br><span class="line">           <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">           String integerCacheHighPropValue =</span><br><span class="line">               sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">           <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                   i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                   <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                   h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                   <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           high = h;</span><br><span class="line"></span><br><span class="line">           cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">           <span class="keyword">int</span> j = low;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">               cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">           <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="上界可调"><a href="#上界可调" class="headerlink" title="上界可调"></a><font size="3px" color="#f00">上界可调</font></h3><p>启动JVM配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:AutoBoxCacheMax=&lt;size&gt;</span><br></pre></td></tr></table></figure><p>该选项在 JVM 初始化的时候会设定一个名为 java.lang.IntegerCache.high 系统属性，然后 IntegerCache 初始化的时候就会读取该系统属性来决定上界。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer x = Integer.valueOf(<span class="number">180</span>);</span><br><span class="line">Integer y = Integer.valueOf(<span class="number">180</span>);</span><br><span class="line">System.out.println(x == y); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java</span><br><span class="line">java Test</span><br><span class="line"></span><br><span class="line">false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javac Test.java</span><br><span class="line">java -XX:AutoBoxCacheMax=200 Test</span><br><span class="line"></span><br><span class="line">true</span><br></pre></td></tr></table></figure><h3 id="其他数据类型的缓存"><a href="#其他数据类型的缓存" class="headerlink" title="其他数据类型的缓存"></a><font size="3px">其他数据类型的缓存</font></h3><p>Short  [255]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Short <span class="title">valueOf</span><span class="params">(<span class="keyword">short</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">int</span> sAsInt = s;</span><br><span class="line">    <span class="keyword">if</span> (sAsInt &gt;= -<span class="number">128</span> &amp;&amp; sAsInt &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">        <span class="keyword">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Short(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Byte [256]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Byte cache[] = <span class="keyword">new</span> Byte[-(-<span class="number">128</span>) + <span class="number">127</span> + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>Character [128]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> Character[<span class="number">127</span> + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><font size="4px">作用域</font></h1><p><img src="/2019/09/13/Java基础知识/a.jpg" alt></p><p>java允许局部变量和成员变量同名，局部变量会覆盖成员变量。</p><table><thead><tr><th>作用域与可见性</th><th align="center">当前类</th><th align="center">同一个包</th><th align="center">子类</th><th align="center">所有类</th></tr></thead><tbody><tr><td>public</td><td align="center">☑️</td><td align="center">☑️</td><td align="center">☑️</td><td align="center">☑️</td></tr><tr><td>protected</td><td align="center">☑️</td><td align="center">☑️</td><td align="center">☑️</td><td align="center"></td></tr><tr><td>default</td><td align="center">☑️</td><td align="center">☑️</td><td align="center"></td><td align="center"></td></tr><tr><td>private</td><td align="center">☑️</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>类的成员变量的作用范围同类的实例化对象的作用范围，类实例化时，成员变量就会在内存中分配空间并初始化，直到这个实例化对象的生命周期结束，成员变量的生命周期才结束。</p><p>静态变量不依赖于特定的实例，而是被所有实例所共享，只要一个类被加载，jvm就会给类静态变量分配存储空间，通过 [类名.变量] 来访问静态变量。</p><p>局部变量的作用域与可见性为它所在的花括号内</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><font size="4px">运算符</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 无符号右移</span><br><span class="line">&gt;&gt; 带符号右移</span><br><span class="line">^ 异或，相同为0，不同为1</span><br><span class="line">| 或，有一位为1则为1</span><br><span class="line">&amp; 并，两位都是1则为1，其他都为0</span><br><span class="line">～ 非，按位取反</span><br><span class="line"></span><br><span class="line">&gt;&gt; 1 == /2</span><br><span class="line">&lt;&lt; 1 == *2</span><br><span class="line"></span><br><span class="line">&amp; 位运算符并，逻辑运算符作用同&amp;&amp;，但不短路，计算前后两个表达式</span><br><span class="line">| 位运算符或，逻辑运算符作用同||，不短路，计算前后两个表达式</span><br><span class="line">^ 位运算符异或，逻辑运算符只有当两个表达式结果不同时才返回true</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><font size="4px">字符串</font></h1><h1 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a><font size="4px">字符串</font></h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a><font size="3px">String</font></h2><p>Java 8:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[]; <span class="comment">//不允许被继承</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="string">""</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个字符串对象作为另一个字符串对象的构造函数参数时</span></span><br><span class="line"><span class="comment">//并不会完全复制 value 数组内容，而是都会指向同一个 value 数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = original.value;</span><br><span class="line">    <span class="keyword">this</span>.hash = original.hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span> value[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>value数组声明为final，初始化后不能被其他数组引用，保证String不可变。</p><p><font size="3px" color="#f00">不可变</font></p><ul><li>保证String的hash值不变，在HashMap中当key时保证键值</li><li>保证String从常量池中取得字符串常量</li><li>作为网络连接参数，确保双方数据一致性</li><li>保证多线程的安全性</li></ul><p>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">"Hello"</span>;</span><br><span class="line">str+=<span class="string">"World"</span>;</span><br></pre></td></tr></table></figure><p>==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder su= <span class="keyword">new</span> StringBuilder(<span class="string">"Hello"</span>);</span><br><span class="line">su.append(<span class="string">"World"</span>);</span><br><span class="line">String str=su.toString();</span><br></pre></td></tr></table></figure><p>存储机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1=<span class="string">"abc"</span>;</span><br><span class="line">String s2=<span class="string">"abc"</span>;</span><br><span class="line">String s3=<span class="string">"ab"</span>+<span class="string">"c"</span>;</span><br><span class="line">String s4=<span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p>s1=s2=s3!=s4<br>常量池中存放abc字符串常量，s1,s2都指向常量池中的abc</p><p>s3的ab,c同样在编译期就被解析成一个字符串常量abc,s3指向abc</p><p>new String()，堆中生成new出来的对象，对象中value[]指向常量池中的abc，栈中的s4指向堆中的对象</p><p><strong>常量池</strong>：在编译期就确定的被保存在已编译的.class文件中的一些数据。</p><p>跟输出形式关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str=String.format(<span class="string">"%d"</span>,age);</span><br></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><font size="3px">StringBuilder</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line">extends AbstractStringBuilder</span><br><span class="line"><span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程不安全，效率高</span></span><br></pre></td></tr></table></figure><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a><font size="3px">StringBuffer</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line">extends AbstractStringBuilder</span><br><span class="line"><span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法都用synchronized 同步代码块，线程安全</span></span><br></pre></td></tr></table></figure><h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a><font size="4px">线程安全</font></h1><p>在并发环境中，函数的变量能够正确的被共享而不会出现值不一致的情况。在多线程场景下，不发生有序性，原子性以及可见性问题。</p><h1 id="传参"><a href="#传参" class="headerlink" title="传参"></a><font size="4px">传参</font></h1><p>java传参数分为基本数据类型传递，引用类型传递。都是以值传递的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">  a=<span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">  System.out.println(x); <span class="comment">//1</span></span><br><span class="line">  change(x);</span><br><span class="line">  System.out.println(x); <span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a只存在于change方法块内，只作为x的值拷贝，离开方法体a不再使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">this</span>.x = x; &#125;  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Test t)</span></span>&#123;</span><br><span class="line">t.setX(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">test.setX(<span class="number">2</span>);</span><br><span class="line">System.out.println(test.getX()); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">change(test);</span><br><span class="line">System.out.println(test.getX()); <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>t 拷贝的是test的指向地址，new Test()对象的地址。对象中x的值改变了就是改变了。</p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a><font size="4px">输入输出</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);<span class="comment">//InputStream</span></span><br><span class="line"><span class="keyword">while</span>(sc.hasNext())&#123;</span><br><span class="line">  sc.nextLine(); <span class="comment">//一行</span></span><br><span class="line">  sc.nextInt(); <span class="comment">//整数</span></span><br><span class="line">  sc.nextDouble(); <span class="comment">//浮点数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a><font size="4px">数组</font></h1><p>初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array=<span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">array=&#123;&#125;;</span><br><span class="line">array=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br></pre></td></tr></table></figure><p>Arrays</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arrays.copyOf(array,array.length);</span><br><span class="line">Arrays.sort(array); <span class="comment">//从小到大排序</span></span><br><span class="line">Arrays.asList(array); <span class="comment">//转为List</span></span><br><span class="line">Arrays.toString(array); <span class="comment">//转为String</span></span><br><span class="line">Arrays.fill(array,<span class="number">8</span>); <span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] rows: a)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> value: rows)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a><font size="4px">时间</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GregorianCalendar g = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">g.get(Calendar.MONTH); <span class="comment">//月</span></span><br><span class="line">g.get(Calendar.DAY_OF_MONTH);<span class="comment">//日</span></span><br><span class="line">g.get(Calendar.DAY_OF_WEEK);<span class="comment">//周</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改变状态</span></span><br><span class="line">g.set(Calendar.MONTH,Calendar.APRIL);</span><br><span class="line"></span><br><span class="line">Date time=g.getTime();</span><br><span class="line"></span><br><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat sm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">String str = sm.format(d);</span><br></pre></td></tr></table></figure><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a><font size="4px">构造器</font></h1><ul><li>与类名相同</li><li>类可以有一或多个构造器</li><li>构造器可以有任意个参数</li><li>构造器没有返回值</li><li>总是伴随着new操作一起调用</li><li>构造函数不能被继承，不能被覆盖，可以被重载</li><li>子类可以通过super关键字来显式调用父类的构造函数，当父类没有提供无参数的构造函数时，子类的构造函数必须显式地调用父类的构造函数，父类提供了无参数构造函数时，子类的构造函数就可以不显式地调用父类的构造函数，编译器默认调用父类的无参数构造函数。有父类时，实例化子类会先执行父类的构造函数。</li><li>父类，子类都没有定义构造函数时，编译器会为父类生成一个默认的无参数构造函数，给子类也生成一个无参数构造函数。默认构造器的修饰符只跟当前类的修饰符有关</li><li>普通方法可以与构造函数有相同的方法名</li></ul><p><strong>this</strong> – 表示正在初始化的对象；调用同类另一个构造器this()</p><p><strong>super</strong> – 调用超类方法，调用超类构造器</p><h1 id="java创建对象方式"><a href="#java创建对象方式" class="headerlink" title="java创建对象方式"></a><font size="4px">java创建对象方式</font></h1><ol><li>new 实例化</li><li>反射机制 newInstance()</li><li>clone()创建一个对象</li><li>反序列化创建对象</li></ol><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a><font size="4px">内部类</font></h1><p>静态内部类 不依赖于类实例化调用，不能有非静态变量和方法</p><p>成员内部类 依赖于实例化调用，不能有静态变量和方法</p><p>局部内部类 不能被public，protected，private以及static修饰</p><p>匿名内部类 没有类名的内部类，不使用extends，class，implements，没有构造函数，通过new 类名直接使用</p><h1 id="重载，重写"><a href="#重载，重写" class="headerlink" title="重载，重写"></a><font size="4px">重载，重写</font></h1><table><thead><tr><th></th><th>重载</th><th>重写</th></tr></thead><tbody><tr><td>位置</td><td>发生在同一个类中</td><td>父类的子类中</td></tr><tr><td>定义</td><td>同一方法名的参数顺序，个数，类型不同；返回值，访问权限，异常不同并不构成重载</td><td>同一方法名，参数相同；子类返回值，异常类型小于父类，访问权限大于父类</td></tr><tr><td>原理</td><td>方法调用</td><td>用于多态</td></tr></tbody></table><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a><font size="4px">多态</font></h1><p>当同一个存在作用在不同对象时，会有不同的语义。编译时多态，运行时多态。方法的重载，同一个类有多个同名的方法，方法有不同的参数，编译时就可以确定到底调用哪个方法，是一种编译时多态，方法多态性。方法的覆盖，父类的引用变量可以指向子类的实例对象，在运行时才动态绑定，确定调用哪个方法，是运行时多态。成员变量无法实现多态。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a><font size="4px">继承</font></h1><p>extends </p><p>提高代码复用功能，子类继承父类。Java不支持多继承，但接口可以多继承父接口。子类只能继承父类的非私有(public，protected)成员变量与方法。子类与父类有相同的成员变量时，子类的成员变量会覆盖父类的成员变量，而不是继承。有相同的函数时，子类也会覆盖父类的方法，而不是继承。子类不能继承，显式调用父类的构造函数，子类可通过super()进行调用</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a><font size="4px">抽象类</font></h1><p>abstract关键字。如果一个类中包含抽象方法，那么这个类必须声明为抽象类。抽象类中可以包含普通方法和成员变量，不能被实例化。是一种模块，类声明为abstract，抽象类只能被继承extends，且只能是单继承，抽象强调has-a关系</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a><font size="4px">接口</font></h1><p>implement</p><p>接口可以拥有默认的方法实现</p><p>接口的方法默认都是 public 的，并且不允许定义为 private 或者 protected。</p><p>接口的字段默认都是 static 和 final 的</p><p>是一种规范，类声明为interface，接口中可以包含静态常量，方法（抽象实例方法，类方法，默认方法），内部类（内部接口，枚举），类中方法只能为public, abstract, default，不能用private，static，synchronized，native修饰，成员变量只能为public static final，接口可以被实现implements，一个类可以实现多个接口，接口可以多继承以实现类多继承的功能，接口只能继承接口，不能继承类，接口强调is-a关系</p><p>抽象，接口都不能被实例化，都可以通过多态调用子类，实现类方法</p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a><font size="4px">Object</font></h1><p>Object作为所有类的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; <span class="title">getClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><h1 id="equals"><a href="#equals" class="headerlink" title="equals()"></a><font size="3px">equals()</font></h1><ul><li><p>自反性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(x);</span><br></pre></td></tr></table></figure></li><li><p>对称性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(y)==y.equals(x);</span><br></pre></td></tr></table></figure></li><li><p>传递性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x.equals(y) &amp;&amp; y.equals(z))</span><br><span class="line">    x.equals(z); <span class="comment">// true;</span></span><br></pre></td></tr></table></figure></li><li><p>一致性 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.equals(y) == x.equals(y); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><p>object类中的equals方法直接使用==运算符比较两个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类可以对其进行重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Byte) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Byte)obj).byteValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a><font size="3px">hashCode()</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Object中hashCode方法返回对象在内存中地址转换成的一个int值，如果没有重写hashCode方法，任何对象的hashCode方法返回值都不相同。在HashMap中key值是否重复就是通过hashCode来判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规定equals被覆盖，hashCode必被覆盖</p><p>equals相同，hashCode必相同；equals不同，hashCode可能相同</p><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a><font size="3px">toString()</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认返回 类名@xxxxx 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。</p><h1 id="clone"><a href="#clone" class="headerlink" title="clone()"></a><font size="3px">clone()</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浅拷贝：拷贝对象和原始对象的引用类型引用同一个对象。</p><p>深拷贝：拷贝对象和原始对象的引用类型引用不同对象。</p><p>Java中只有值传递，基本数据类型传的是值，对象传的是地址。</p><p>而clone()方法创建出一个与对象A具有相同状态的对象B，并且对B的修改不影响A的情况</p><p>所有类都继承自object类，object 类中有clone()方法，返回一个object对象的复制对象</p><p>clone()的使用：</p><p>class XX implements Cloneable + 重写clone()方法 + 调用super.clone()</p><p>其实现的是浅拷贝，当类中包括其他对象时，需要再调用clone()完成深复制</p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><font size="4px">关键字</font></h1><h2 id="final"><a href="#final" class="headerlink" title="final"></a><font size="3px">final</font></h2><p>变量：基本数据类型，不可重新赋值；对象，指向对象地址不变，对象内容可变</p><p>父类方法：不能被重写；父类：不能被继承</p><p>形参不能用final修饰</p><p>必须被程序员显式初始化</p><h2 id="static"><a href="#static" class="headerlink" title="static"></a><font size="3px">static</font></h2><table><thead><tr><th>成员变量</th><th>静态变量从属于类，在内存中只有一份，所有实例都指向同一个内存地址，类被加载后，静态变量就会被分配空间，可以被使用，引用该变量：类.静态变量，对象.静态变量不能在成员函数内部定义static变量</th></tr></thead><tbody><tr><td>成员方法</td><td>静态方法可以通过类.静态方法调用，静态方法中不能使用非静态变量，方法。</td></tr><tr><td>代码块</td><td>独立于成员变量和成员函数，类加载时会先执行static代码块，再初始化构造函数</td></tr><tr><td>内部类</td><td>不依赖于外部类实例对象而被实例化，静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量和方法，只能访问其静态变量和方法</td></tr></tbody></table><p>拷贝对象和原始对象的引用类型引用不同对象。</p><p>拷贝对象和原始对象的引用类型引用同一个对象。</p><p>静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。最后才是构造函数的初始化。</p><p>初始化顺序：</p><ul><li>父类（静态变量、静态语句块）</li><li>子类（静态变量、静态语句块）</li><li>父类（实例变量、普通语句块）</li><li>父类（构造函数）</li><li>子类（实例变量、普通语句块）</li><li>子类（构造函数）</li></ul><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a><font size="3px">switch</font></h2><p>switch(expression)，expression只能是一个枚举常量或整数表达式，expression可以是byte，short，char，int，也可以是它们的包装类Byte，Short，Character，Integer。long, float, double 强制转换为int可以使用。case为直接的常量数组，还可以为final型的变量，但不能是变量或带有变量的表达式。</p><p>Java7开始支持String类型，其实质是：对String调用hasCode()方法，得到hash值，来匹配所有case，接着调用字符串的equals()进行匹配。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a><font size="3px">volatile</font></h2><p>volatile是一种类型修饰符，用来修饰被不同线程访问和修改的变量，保证变量是直接从内存中提取，而不利用缓存，从而保证变量值的一致性。</p><p>volatile不能保证操作的原子性，不能代替synchronized。</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><font size="3px">instanceof</font></h2><p>判断一个引用类型的变量所指向的对象属于是一个类的实例，左边是否是右边的实例。</p><p>前面对象是后面类的实例或子类实例时都将返回true</p><h2 id="stricfp"><a href="#stricfp" class="headerlink" title="stricfp"></a><font size="3px">stricfp</font></h2><p>static float point精确浮点，按照IEEE二进制浮点数算术标准来执行。用于修饰类，类中所有方法都会自动被stricfp修饰，保证浮点数运算精确性，在不同硬件平台上也有一致的结果</p><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a><font size="3px">assert</font></h2><p>作为一种软件调试的方法，主要作用是对一个boolean表达式进行检查。</p><p>assert expression或assert expression1:变量</p><p>如：assert 1+1==3:“assert failed，exit”，调用java -ea Test ，-ea表示打开开关</p><p>输出：Exception in thread “main” Java.lang.AssertError:assert failed, exit at Test.main(Test.java 5)</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a><font size="4px">泛型</font></h1><p>提供了编译期的类型安全，确保你只能把正确类型的对象放入集合中，避免了在运行时出现ClassCastException。</p><p>泛型是通过类型擦除来实现的，编译器在编译时擦除了所有类型相关的信息，所以在运行时不存在任何类型相关的信息。例如List&lt; String&gt;在运行时仅用一个List来表示。无法在运行时访问到类型参数，因为编译器已经把泛型类型转换成了原始类型。</p><p>泛型有两种限定通配符，一种是&lt; ? extends T&gt;它通过确保类型必须是T的子类来设定类型的上界，另一种是&lt; ? super T&gt;它通过确保类型必须是T的父类来设定类型的下界。泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。另一方面&lt; ?&gt;表示了非限定通配符，因为&lt;?&gt;可以用任意类型来替代。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a><font size="4px">反射</font></h1><p>允许程序在运行时进行自我检查，同时也允许对其内部的成员进行操作。得到一个对象所属的类，获取一个类的所有成员变量和方法，在运行时创建对象，调用对象的方法。</p><p>获取class类：</p><ol><li>class.forName(“类路径”)；</li><li>类名.class；</li><li>实例.getClass()</li></ol><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a><font size="4px">异常</font></h1><p>异常指程序运行时所发生的非正常情况或错误，Java把异常当作对象来处理，异常基类为Throwable </p><p>Error：StackOverFlowError，OutOfMemoryError等错误直接导致程序终止</p><p>Checked Exception：IOException，SQLException等发生不会导致程序出错，进行处理可以继续执行后续操作，编译器强制去捕获该类型的异常</p><p>RuntimeException：由JVM来处理，NullPointerException，ClassCastException，ArrayIndexOutOfBoundsException，ArrayStoreException，BufferOverflowException，ArithmeticException等，异常会一直往上层抛出，直到遇到处理代码为止。运行时异常，编译器不会强制对其进行捕获并处理</p><p>异常处理先捕获子类，再捕获父类异常</p><h1 id="System"><a href="#System" class="headerlink" title="System"></a><font size="4px">System</font></h1><p>表示当前Java程序的运行平台。提供了一些类变量和类方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前项目路径</span></span><br><span class="line">System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line"><span class="comment">//环境变量值</span></span><br><span class="line">System.getenv(<span class="string">"JAVA_HOME"</span>);</span><br><span class="line"><span class="comment">//时间 毫秒</span></span><br><span class="line">System.currentTimeMillis();</span><br><span class="line"><span class="comment">//InputStream</span></span><br><span class="line">System.in </span><br><span class="line"><span class="comment">//InputStream</span></span><br><span class="line">System.out</span><br></pre></td></tr></table></figure><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a><font size="4px">日志</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> finall Logger logger=Logger.getLogger(<span class="string">"com.company.app"</span>);</span><br><span class="line">logger.log(Level.FINE,message);</span><br></pre></td></tr></table></figure><p>日志记录器级别：SEVERE，WARNING，INFO，CONFIG，FINE，FINER，FINEST</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Java核心技术卷I知识点&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java语言简史</title>
    <link href="https://www.runaccpeted.com/2019/09/12/java%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8F%B2/"/>
    <id>https://www.runaccpeted.com/2019/09/12/java语言简史/</id>
    <published>2019-09-12T12:31:48.000Z</published>
    <updated>2019-09-15T13:57:00.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Java语言介绍</blockquote><a id="more"></a><h1 id="Java语言版本"><a href="#Java语言版本" class="headerlink" title="Java语言版本"></a><font size="4px">Java语言版本</font></h1><p>J2ME - 控制移动设备和信息家电等有限存储设备</p><p>J2SE - java技术核心，桌面或简单服务器应用的java平台</p><p>J2EE - 企业应用开发相关</p><h1 id="比较其他语言"><a href="#比较其他语言" class="headerlink" title=" 比较其他语言"></a><font size="4px"> 比较其他语言</font></h1><h1 id="C"><a href="#C" class="headerlink" title="C#"></a><font size="3px">C#</font></h1><p>java和c#都摒弃了c++函数及其参数的const修饰，宏替换，全局变量和全局函数等，但c#仅局限于windows平台，windows平台有大量的c#基类。对于java的平台独立性来说，c#不利于移植于其他平台。</p><h1 id="Python"><a href="#Python" class="headerlink" title=" Python"></a><font size="3px"> Python</font></h1><p>python是面向对象的解释性脚本语言，拥有大量的类库。</p><p>解释性语言是使用解释器，对源代码逐行解释成特定平台的机器码并立即执行。把编译和解释过程混合到一起同时完成。每次执行都需要进行一次编译，不能离开解释器独立运行。</p><h1 id="c"><a href="#c" class="headerlink" title="c++"></a><font size="3px">c++</font></h1><p>编译性语言，使用编译器，针对特定的操作系统，将源代码一次性翻译成可被平台硬件执行的机器码，并包装成该平台所能识别的可执行程序的格式，程序能独立运行。运行效率高，但不能在其他操作系统上运行，又需要重新编译，不易于移植。</p><p>c++是面向过程编程的，java是面向对象编程的。</p><h1 id="java语言运行机制"><a href="#java语言运行机制" class="headerlink" title=" java语言运行机制"></a><font size="4px"> java语言运行机制</font></h1><p>java语言先编译再解释成机器码。</p><p>java源码经编译器编译成.class，生成的是与平台无关的字节码，字节码只能通过java虚拟机jvm解释成特定平台的机器码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac xx.java  //编译</span><br><span class="line">java xx        //解释</span><br></pre></td></tr></table></figure><h1 id="包下载"><a href="#包下载" class="headerlink" title="包下载"></a><font size="4px">包下载</font></h1><p>JDK java开发工具包，包括java编译器，运行时环境，常用类库，JRE。</p><p>JRE java运行环境，包括JVM，类加载器，字节码校验器等</p><p>JDK文件夹</p><p>– bin 工具命令</p><p>– db 数据库</p><p>– include 平台特定头文件</p><p>– jre JRE环境</p><p>– lib 工具命令实际执行程序</p><p>– javafc-src.zip</p><p>– README，LICENSE说明文档</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a><font size="4px">配置环境变量</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">open .bash_profile</span><br><span class="line"></span><br><span class="line">//添加内容</span><br><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class="line"></span><br><span class="line">//导出环境变量</span><br><span class="line">export PATH</span><br><span class="line">//使变量值生效</span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><h1 id="java程序"><a href="#java程序" class="headerlink" title="java程序"></a><font size="4px">java程序</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main是jvm访问入口标识</p><p>void表示方法没有返回值</p><p>static 类还没有实例化，并不能通过对象调用方法，static表示该方法属于类，可以直接通过类.方法调用</p><p>public 说明方法是类可见，包可见的，外部可以直接调用</p><p>String[] 数组用于和程序员进行交互，java HelloWorld a b ==&gt;String[0]=a,String[1]=b;</p><p><strong>文件的命名必须和public class类名相同，一个java文件只能有一个public class</strong>。</p><h1 id="java语言特性"><a href="#java语言特性" class="headerlink" title="java语言特性"></a><font size="4px">java语言特性</font></h1><p>封装：高内聚，低耦合</p><p>继承：实现代码复用</p><p>多态：父类引用指向子类变量</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Java语言介绍&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccpeted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccpeted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB-MongoDB权威指南</title>
    <link href="https://www.runaccpeted.com/2019/09/11/MongoDB-MongoDB%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    <id>https://www.runaccpeted.com/2019/09/11/MongoDB-MongoDB权威指南/</id>
    <published>2019-09-11T05:00:09.000Z</published>
    <updated>2019-10-12T20:55:22.230Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">《MongoDB权威指南》学习笔记</blockquote><a id="more"></a><p><a href="https://pan.baidu.com/s/1_GJjtgW4UbUxe6hpQLX7vg" target="_blank" rel="noopener">https://pan.baidu.com/s/1_GJjtgW4UbUxe6hpQLX7vg</a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a><font size="4px">简介</font></h1><p>面向文档的数据库</p><p>以键值对的形式存储数据，区分值类型也区分大小写，数据为任意UTF-8类型</p><p>集合无模式，集合内可以存放任何类型的键值</p><p>{“foo”:1}</p><p>{“greeting”:”Hello World”}</p><h1 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a><font size="4px">启动MongoDB</font></h1><p>mongod –config /data/etc/mongodb.conf</p><p>mongo</p><h1 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a><font size="4px">显示数据</font></h1><p>MongoDB shell version v3.4.23</p><p>connecting to: mongodb://127.0.0.1:27017</p><p>MongoDB server version: 3.4.23</p><p>MongoDB默认端口27017，通过访问<a href="http://127.0.0.1:27017/可以看到mongodb提供的http服务，响应数据【It" target="_blank" rel="noopener">http://127.0.0.1:27017/可以看到mongodb提供的http服务，响应数据【It</a> looks like you are trying to access MongoDB over HTTP on the native driver port.】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> use admin</span><br><span class="line">switched to db admin</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.auth("admin","admin")</span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> show dbs</span><br><span class="line">admin  0.000GB</span><br><span class="line">local  0.000GB</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> show tables</span><br><span class="line">system.users</span><br><span class="line">system.version</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span> db.system.users.find()</span><br><span class="line">&#123; "_id" : "admin.admin", "userId" : BinData(4,"AhhaYxmITtC2pBqb6Qx7uw=="), "user" : "admin", "db" : "admin", "credentials" : &#123; "SCRAM-SHA-1" : &#123; "iterationCount" : 10000, "salt" : "lOBwaGzf8V7ls+Gg0gm/cw==", "storedKey" : "ajxSU13iSBweanHpvCLgipFy4Jo=", "serverKey" : "eVhwAjeYOW8zSd4A5R3ykzw7JfY=" &#125; &#125;, "roles" : [ &#123; "role" : "root", "db" : "admin" &#125; ] &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span> db.system.version.find()</span><br><span class="line">&#123; "_id" : "featureCompatibilityVersion", "version" : "3.4" &#125;</span><br><span class="line">&#123; "_id" : "authSchema", "currentVersion" : 5 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h1 id="shell介绍及操作"><a href="#shell介绍及操作" class="headerlink" title="shell介绍及操作"></a><font size="4px">shell介绍及操作</font></h1><p>MongoDB自带javascript shell，是功能完备的JavaScript解释器，可以运行javascript程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> x=200</span><br><span class="line">200</span><br><span class="line"><span class="meta">&gt;</span> x/5;</span><br><span class="line">40</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>也可以是函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> function f(n)&#123;</span><br><span class="line">... return n*n;</span><br><span class="line">... &#125;</span><br><span class="line"><span class="meta">&gt;</span> f(5)</span><br><span class="line">25</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>shell默认连接test数据库，将数据库连接赋值给全局变量db，<font color="#f00">db</font>是shell访问mongodb的主要入口点</p><p>use admin 选择使用的数据库</p><p>db 显示正在使用的数据库</p><h1 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a><font size="4px">CRUD操作</font></h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a><font size="3px">创建</font></h2><p>数据库 use bike 会自动创建bike数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> use bike</span><br><span class="line">switched to db bike</span><br><span class="line"><span class="meta">&gt;</span> db</span><br><span class="line">bike</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>集合 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.createCollection("bikes")</span><br><span class="line">&#123; "ok" : 1 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>集合中添加数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.insert(&#123;</span><br><span class="line">... "id":0,</span><br><span class="line">... "bikeno":100000,</span><br><span class="line">... "status":0</span><br><span class="line">... &#125;)</span><br><span class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原理和作用"><a href="#原理和作用" class="headerlink" title="原理和作用"></a><font size="3px">原理和作用</font></h3><p>数据转换成BSON传入数据库，解析BSON，检验是否包含_id，文档不超过4MB，然后把数据原样传入数据库</p><p>批量插入减少数据库校验消息请求头的开销</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a><font size="3px">查找</font></h2><h3 id="find"><a href="#find" class="headerlink" title=" find()"></a><font size="3px"> find()</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0a7a85c6be30577bc9af7"), "id" : 0, "bikeno" : 100000, "status" : 0 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>_id 是自动创建的，相当于主键？？</p><p>当_id不同时，就认为数据不同？？</p><p>插入相同数据不报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.insert(&#123; "id":0, "bikeno":100000, "status":0 &#125;)</span><br><span class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0a7a85c6be30577bc9af7"), "id" : 0, "bikeno" : 100000, "status" : 0 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("5da0a9015c6be30577bc9af8"), "id" : 0, "bikeno" : 100000, "status" : 0 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="findOne"><a href="#findOne" class="headerlink" title=" findOne()"></a><font size="3px"> findOne()</font></h3><p>查找第一条数据 findOne()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.findOne()</span><br><span class="line">&#123;</span><br><span class="line">"_id" : ObjectId("5da0a7a85c6be30577bc9af7"),</span><br><span class="line">"id" : 0,</span><br><span class="line">"bikeno" : 100000,</span><br><span class="line">"status" : 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="find-1"><a href="#find-1" class="headerlink" title=" find({})"></a><font size="3px"> find({})</font></h3><p>查找特定数据 find({查询器})</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;id:0&#125;)</span><br><span class="line">&#123; "_id" : ObjectId("5da0ace75c6be30577bc9af7"), "id" : 0, "bikeno" : 100000, "status" : 0 &#125;</span><br><span class="line">&#123; "_id" : ObjectId("5da0a9015c6be30577bc9af8"), "id" : 0, "bikeno" : 100000, "status" : 0 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="find-2"><a href="#find-2" class="headerlink" title=" find({},{})"></a><font size="3px"> find({},{})</font></h3><p>指定返回内容</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a><font size="3px">操作符</font></h3><ul><li><p>$lt &lt; </p></li><li><p>$lte &lt;=</p></li><li><p>$gt &gt;</p></li><li><p>$gte &gt;=</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"id":&#123;$lt:0,$gt:3&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>$ne !=</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"id":&#123;$ne:0&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>$in 匹配多个值 </p><p>$in:[]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"id":&#123;$in:[0,1,2]&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>$nin 不匹配的所有数据</p></li><li><p>$or 多重条件 </p><p>$or:[{},{}]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;$or:[&#123;"id":&#123;$in:[0,1,2]&#125;&#125;,&#123;"status":0&#125;]&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>$mod</p><p>$mod:[5,10]</p><p>查询的值/第一个给定的值 余数=第二个值</p><p>基于$not</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"id":&#123;$not:&#123;$mod:[5,1]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Perl兼容的正则表达式"><a href="#Perl兼容的正则表达式" class="headerlink" title="Perl兼容的正则表达式"></a><font size="3px">Perl兼容的正则表达式</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"name":/e/t&#125;)</span><br></pre></td></tr></table></figure><h3 id="all"><a href="#all" class="headerlink" title="$all"></a><font size="3px">$all</font></h3><p>数组中的每一个元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"emails":&#123;$all:["1@163.com"]&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="$size"></a><font size="3px">$size</font></h3><p>匹配数组长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"emails":&#123;$size:2&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="$slice"></a><font size="3px">$slice</font></h3><p>返回部分结果</p><p>前10项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"emails":&#123;$slice:10&#125;&#125;)</span><br></pre></td></tr></table></figure><p>后10项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"emails":&#123;$slice:-10&#125;&#125;)</span><br></pre></td></tr></table></figure><p>跳过前23项，返回10项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"emails":&#123;$slice:[23,10]&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="eleMatch❌"><a href="#eleMatch❌" class="headerlink" title="$eleMatch❌"></a><font size="3px">$eleMatch❌</font></h3><p>模糊查询</p><p>Error: error: {</p><p>​    “ok” : 0,</p><p>​    “errmsg” : “unknown top level operator: $elemMatch”,</p><p>​    “code” : 2,</p><p>​    “codeName” : “BadValue”</p><p>}</p><h3 id="where"><a href="#where" class="headerlink" title="$where"></a><font size="3px">$where</font></h3><p>查询部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;$where:function()&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a><font size="3px">游标</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> var cursor=db.bikes.find()</span><br><span class="line"><span class="meta">&gt;</span> while(cursor.hasNext())&#123;     var obj=cursor.next();     obj.status=10;     db.bikes.update(&#123;&#125;,&#123;"status":obj.status&#125;) &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span>db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0ac355c6be30577bc9af7"), "status" : 10 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>在服务端，游标消耗内存和其他资源，当游标遍历尽后，数据库释放资源</p><p>当游标在客户端不在作用域内，驱动向服务器发送专门的消息，销毁游标。</p><p>当游标10分钟不使用，自动销毁</p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a><font size="3px">limit</font></h3><p>查询2条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find().limit(2)</span><br></pre></td></tr></table></figure><h3 id="skip"><a href="#skip" class="headerlink" title="skip"></a><font size="3px">skip</font></h3><p>跳过前3条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find().skip(3)</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a><font size="3px">sort</font></h3><p>1 升序 -1降序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find().sort(&#123;"id":-1&#125;)</span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find().limit().skip().sort()</span><br></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count()"></a><font size="3px">count()</font></h3><p>返回集合文档数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.count()</span><br></pre></td></tr></table></figure><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a><font size="3px">distinct</font></h3><p>返回给定键的所有不同值</p><p>{“distinct”:”集合名”,”key”:”键名”}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da1b950873bba4fa238c6af"), "location" : [ 100, 100 ] &#125;</span><br><span class="line">&#123; "_id" : ObjectId("5da1b958873bba4fa238c6b0"), "location" : [ 110, 100 ] &#125;</span><br><span class="line">&#123; "_id" : ObjectId("5da1b95e873bba4fa238c6b1"), "location" : [ 110, 110 ] &#125;</span><br><span class="line">&#123; "_id" : ObjectId("5da1c08b873bba4fa238c6b2"), "location" : [ 90, 100 ] &#125;</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;"distinct":"bikes","key":"location"&#125;)</span><br><span class="line">&#123; "values" : [ 100, 110, 90 ], "ok" : 1 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a><font size="3px">更新</font></h2><p>db.[collectionName].update({查询器},{执行器})</p><p>更新某个键</p><h3 id="set"><a href="#set" class="headerlink" title="$set"></a><font size="3px">$set</font></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;id:0&#125;,&#123;$set:location:[1,2]&#125;)</span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0ac355c6be30577bc9af7"), "id" : 0, "bikeno" : 100000, "status" : 0, "location" : [ 1, 2 ] &#125;</span><br></pre></td></tr></table></figure><p>不加$set 导致数据丢失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;id:0&#125;,&#123;location:[1,2]&#125;)</span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0ac355c6be30577bc9af7"),"location" : [ 1, 2 ] &#125;</span><br></pre></td></tr></table></figure><h3 id="unset"><a href="#unset" class="headerlink" title="$unset"></a><font size="3px">$unset</font></h3><p>抹去某个键，抹去bikeno</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;id:0&#125;,&#123;$unset:&#123;bikeno:100000&#125;&#125;)</span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0ac355c6be30577bc9af8"), "id" : 0, "status" : 0, "location" : [ 1, 2 ] &#125;</span><br></pre></td></tr></table></figure><h3 id="inc"><a href="#inc" class="headerlink" title="$inc"></a><font size="3px">$inc</font></h3><p>自增</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;id:0&#125;,&#123;$inc:&#123;status:1&#125;&#125;)</span><br></pre></td></tr></table></figure><p>自地修改</p><h3 id="push"><a href="#push" class="headerlink" title="$push"></a><font size="3px">$push</font></h3><p>没有则创建，有就追加</p><h3 id="addToSet"><a href="#addToSet" class="headerlink" title="$addToSet"></a><font size="3px">$addToSet</font></h3><p>追加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;"id":0&#125;,&#123;$addToSet:&#123;"emails":&#123;$each:["1@163.com","2@163.com","3@163.com"]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="pull"><a href="#pull" class="headerlink" title="$pull"></a><font size="3px">$pull</font></h3><p>删除数组中每一元素</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;"id":0&#125;,&#123;$pull:&#123;"emails":"1@163.com"&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="upset"><a href="#upset" class="headerlink" title="upset"></a><font size="3px">upset</font></h3><p>true 即为updare操作，要是文档没有符合更新条件，以条件和更新文档作为基础创建一个新文档</p><p>原本没有show的键，不加true，更新操作不会增加数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;"show":0&#125;,&#123;$inc:&#123;"show":1&#125;&#125;,true)</span><br></pre></td></tr></table></figure><h3 id="save"><a href="#save" class="headerlink" title="save"></a><font size="3px">save</font></h3><p>不存在时插入，存在时更新</p><p>存在_id调用upsert，否则调用insert</p><h3 id="更新多个数据"><a href="#更新多个数据" class="headerlink" title="更新多个数据"></a><font size="3px">更新多个数据</font></h3><p>第四个参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;"show":0&#125;,&#123;$inc:&#123;"show":1&#125;&#125;,false,true)</span><br></pre></td></tr></table></figure><h3 id="findAndModify"><a href="#findAndModify" class="headerlink" title="findAndModify"></a><font size="3px">findAndModify</font></h3><p>等待服务器的响应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;</span><br><span class="line">... "findAndModify":"bikes",</span><br><span class="line">... "query":&#123;"id":1&#125;,</span><br><span class="line">... "update":&#123;$set:&#123;"status":2&#125;&#125;</span><br><span class="line">... &#125;)</span><br></pre></td></tr></table></figure><p>返回更新数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"lastErrorObject" : &#123;</span><br><span class="line">"updatedExisting" : true,</span><br><span class="line">"n" : 1</span><br><span class="line">&#125;,</span><br><span class="line">"value" : &#123;</span><br><span class="line">"_id" : ObjectId("5da0ac355c6be30577bc9af7"),</span><br><span class="line">"id" : 1,</span><br><span class="line">"status" : 2,</span><br><span class="line">"location" : [</span><br><span class="line">1,</span><br><span class="line">2</span><br><span class="line">],</span><br><span class="line">"emails" : [</span><br><span class="line">"1@163.com",</span><br><span class="line">"3@163.com"</span><br><span class="line">],</span><br><span class="line">"score" : 1</span><br><span class="line">&#125;,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>findAndModify : 集合名</p><p>query 条件</p><p>update 执行器</p><p>remove true/false 删除该数据</p><p>sort 条件</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a><font size="3px">删除</font></h2><p>删除整个集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.remove(&#123;&#125;)</span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>删除特定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>  db.bikes.remove(&#123;bikeno:100001&#125;)</span><br><span class="line"><span class="meta">&gt;</span>  db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0ac355c6be30577bc9af7"), "id" : 0, "status" : 0, "location" : [ 1, 2 ] &#125;</span><br></pre></td></tr></table></figure><p>删除整个集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.drop(&#123;&#125;)</span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="gt-help"><a href="#gt-help" class="headerlink" title="&gt; help"></a><font size="3px">&gt; help</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> help</span><br><span class="line">db.help()                    help on db methods</span><br><span class="line">db.mycoll.help()             help on collection methods</span><br><span class="line">sh.help()                    sharding helpers</span><br><span class="line">rs.help()                    replica set helpers</span><br><span class="line">help admin                   administrative help</span><br><span class="line">help connect                 connecting to a db help</span><br><span class="line">help keys                    key shortcuts</span><br><span class="line">help misc                    misc things to know</span><br><span class="line">help mr                      mapreduce</span><br><span class="line"></span><br><span class="line">show dbs                     show database names</span><br><span class="line">show collections             show collections in current database</span><br><span class="line">show users                   show users in current database</span><br><span class="line">show profile                 show most recent system.profile entries with time &gt;= 1ms</span><br><span class="line">show logs                    show the accessible logger names</span><br><span class="line">show log [name]              prints out the last segment of log in memory, 'global' is default</span><br><span class="line">use &lt;db_name&gt;                set current database</span><br><span class="line">db.foo.find()                list objects in collection foo</span><br><span class="line">db.foo.find( &#123; a : 1 &#125; )     list objects in foo where a == 1</span><br><span class="line">it                           result of the last line evaluated; use to further iterate</span><br><span class="line">DBQuery.shellBatchSize = x   set default number of items to display on shell</span><br><span class="line">exit                         quit the mongo shell</span><br></pre></td></tr></table></figure><p>Eg. 得到集合所在数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.getCollection("bikes")</span><br><span class="line">bike.bikes</span><br><span class="line"><span class="meta">&gt;</span> db.getCollectionNames()</span><br><span class="line">["bikes"]</span><br></pre></td></tr></table></figure><h1 id="6种数据类型"><a href="#6种数据类型" class="headerlink" title="6种数据类型"></a><font size="4px">6种数据类型</font></h1><ul><li><p>null</p><p>{“x”:null}</p></li><li><p>布尔</p><p>{“x”:true} {“x”:false}</p></li><li><p><font color="#f00">数字</font></p><p>Javascript 只有一种数字类型</p><p><font color="#f00"><u>没有整数类型，仅支持64位浮点数双精度？？</u></font></p><p>{“x”:3.14}</p><p>并没有书上所说的整数，浮点数转换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;id:1&#125;,&#123;$set:&#123;number:3&#125;&#125;)</span><br><span class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;id:1&#125;)</span><br><span class="line">&#123; "_id" : ObjectId("5da0b85a5c6be30577bc9afc"), "id" : 1, "number" : 3 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串</p><p>{“x”:”string”}</p></li><li><p>数组</p><p>{“x”:[1,2]}</p></li><li><p>对象</p><p>{“x”:new Date()} 自动编译 输出结果</p><p>{“x”:{“key”:1} </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.update(&#123;id:0&#125;,&#123;$set:&#123;value:&#123;"key":1&#125;&#125;&#125;)</span><br><span class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.bikes.find()</span><br><span class="line">&#123; "_id" : ObjectId("5da0ac355c6be30577bc9af7"), "id" : 0, "status" : 0, "location" : [ 1, 2 ],"value" : &#123; "key" : 1 &#125; &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="id"><a href="#id" class="headerlink" title="_id"></a><font size="4px">_id</font></h1><p>默认为ObjectId，12字节，每个字节两位十六进制数字，24字节字符串</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td>时间戳</td><td></td><td></td><td></td><td>机器</td><td></td><td></td><td>PID</td><td></td><td>计数器</td><td></td><td></td></tr></tbody></table><p>0-4前4位时间戳，从标准纪元开始的时间戳</p><p>5-6 3位主机唯一标识符，主机名散列值</p><p>7-8 进程唯一标识</p><p>9-11 自动增加的计数器，确保同一秒的ObjectId也不同</p><p>确保分布式时，不同主机不同进程ObjectId不同</p><p>由客户端生成，减少数据库层扩展开销</p><h1 id="请求和连接"><a href="#请求和连接" class="headerlink" title="请求和连接"></a><font size="4px">请求和连接</font></h1><p>数据库将请求连接设置成一个队列，新请求放于队尾</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a><font size="4px">索引</font></h1><h2 id="创建索引ensureIndex"><a href="#创建索引ensureIndex" class="headerlink" title="创建索引ensureIndex"></a><font size="3px">创建索引ensureIndex</font></h2><p>1 升序 -1降序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.ensureIndex(&#123;"id":1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"createdCollectionAutomatically" : false,</span><br><span class="line">"numIndexesBefore" : 1,</span><br><span class="line">"numIndexesAfter" : 2,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="得数据库中所有索引getIndexes"><a href="#得数据库中所有索引getIndexes" class="headerlink" title="得数据库中所有索引getIndexes()"></a><font size="3px">得数据库中所有索引getIndexes()</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.getIndexes()</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"v" : 2,</span><br><span class="line">"key" : &#123;</span><br><span class="line">"_id" : 1</span><br><span class="line">&#125;,</span><br><span class="line">"name" : "_id_",</span><br><span class="line">"ns" : "bike.bikes"</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">&gt;</span> db.bikes.dropIndex("_id_")</span><br><span class="line">&#123;</span><br><span class="line">"nIndexesWas" : 1,</span><br><span class="line">"ok" : 0,</span><br><span class="line">"errmsg" : "cannot drop _id index",</span><br><span class="line">"code" : 72,</span><br><span class="line">"codeName" : "InvalidOptions"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除索引dropIndex-“索引名”"><a href="#删除索引dropIndex-“索引名”" class="headerlink" title="删除索引dropIndex(“索引名”)"></a><font size="3px">删除索引dropIndex(“索引名”)</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.dropIndex("id_1")</span><br><span class="line">&#123; "nIndexesWas" : 2, "ok" : 1 &#125;</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.bikes.getIndexes()</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"v" : 2,</span><br><span class="line">"key" : &#123;</span><br><span class="line">"_id" : 1</span><br><span class="line">&#125;,</span><br><span class="line">"name" : "_id_",</span><br><span class="line">"ns" : "bike.bikes"</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="删除所有索引，仍剩-id"><a href="#删除所有索引，仍剩-id" class="headerlink" title="删除所有索引，仍剩_id"></a><font size="3px">删除所有索引，仍剩_id</font></h2><p>删除所有索引，_id的索引不会被删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;</span><br><span class="line">... "dropIndexes":"bikes",</span><br><span class="line">... "index":"*"</span><br><span class="line">... &#125;)</span><br><span class="line">&#123;</span><br><span class="line">"nIndexesWas" : 3,</span><br><span class="line">"msg" : "non-_id indexes dropped for collection",</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="索引名”name”-””"><a href="#索引名”name”-””" class="headerlink" title="索引名”name”:””"></a><font size="3px">索引名”name”:””</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.ensureIndex(&#123;"id":1&#125;,&#123;"name":"index"&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"createdCollectionAutomatically" : false,</span><br><span class="line">"numIndexesBefore" : 1,</span><br><span class="line">"numIndexesAfter" : 2,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.bikes.getIndexes()</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">"v" : 2,</span><br><span class="line">"key" : &#123;</span><br><span class="line">"_id" : 1</span><br><span class="line">&#125;,</span><br><span class="line">"name" : "_id_",</span><br><span class="line">"ns" : "bike.bikes"</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">"v" : 2,</span><br><span class="line">"key" : &#123;</span><br><span class="line">"id" : 1</span><br><span class="line">&#125;,</span><br><span class="line">"name" : "index",</span><br><span class="line">"ns" : "bike.bikes"</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h2 id="唯一索引”unique”-true"><a href="#唯一索引”unique”-true" class="headerlink" title="唯一索引”unique”:true"></a><font size="3px">唯一索引”unique”:true</font></h2><p>insert只校验_id，添加索引保存索引对应键不能重复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.ensureIndex(&#123;"id":1&#125;,&#123;"unique":true&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"createdCollectionAutomatically" : true,</span><br><span class="line">"numIndexesBefore" : 1,</span><br><span class="line">"numIndexesAfter" : 2,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.bikes.insert(&#123;"id":0,"bikeno":10000,"status":0&#125;)</span><br><span class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.bikes.insert(&#123;"id":0,"bikeno":10000,"status":0&#125;)</span><br><span class="line">WriteResult(&#123;</span><br><span class="line">"nInserted" : 0,</span><br><span class="line">"writeError" : &#123;</span><br><span class="line">"code" : 11000,</span><br><span class="line">"errmsg" : "E11000 duplicate key error collection: bike.bikes index: id_1 dup key: &#123; : 0.0 &#125;"</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="消除重复”dropDups”-true"><a href="#消除重复”dropDups”-true" class="headerlink" title="消除重复”dropDups”:true"></a><font size="3px">消除重复”dropDups”:true</font></h2><p>将所有包含重复值的文档删掉，保留第一个文档</p><h2 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a><font size="3px">复合索引</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.ensureIndex(&#123;"id":1,"status":1&#125;)</span><br></pre></td></tr></table></figure><h2 id="查询信息explain"><a href="#查询信息explain" class="headerlink" title="查询信息explain()"></a><font size="3px">查询信息explain()</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find().explain()</span><br><span class="line">&#123;</span><br><span class="line">"queryPlanner" : &#123;</span><br><span class="line">"plannerVersion" : 1,</span><br><span class="line">"namespace" : "bike.bikes",</span><br><span class="line">"indexFilterSet" : false,</span><br><span class="line">"parsedQuery" : &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">"winningPlan" : &#123;</span><br><span class="line">"stage" : "COLLSCAN",</span><br><span class="line">"direction" : "forward"</span><br><span class="line">&#125;,</span><br><span class="line">"rejectedPlans" : [ ]</span><br><span class="line">&#125;,</span><br><span class="line">"serverInfo" : &#123;</span><br><span class="line">"host" : "LearningtekiMacBook-Air.local",</span><br><span class="line">"port" : 27017,</span><br><span class="line">"version" : "3.4.23",</span><br><span class="line">"gitVersion" : "324017ede1dbb1c9554dd2dceb15f8da3c59d0e8"</span><br><span class="line">&#125;,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="“background”-true"><a href="#“background”-true" class="headerlink" title="“background”:true"></a><font size="3px">“background”:true</font></h2><p>使操作在后台进行，仍可以进行请求处理</p><h2 id="地理位置索引"><a href="#地理位置索引" class="headerlink" title="地理位置索引"></a><font size="3px" color="#f00">地理位置索引</font></h2><p>索引标记为2d</p><p>键必须为一对值，值范围[-180,180]</p><p>“location”:[100,100]</p><p>“location”:{“x”:100,”y”:100}</p><p>“location”:{“logtitude”:100,”latitude”:100}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.ensureIndex(&#123;"location":[100,100]&#125;)</span><br></pre></td></tr></table></figure><p>或者指定最大最小值</p><p><u>建立2000光年见方</u> ？ ？=索引条数?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.ensureIndex(&#123;"location":[100,100]&#125;,&#123;"min":-1000,"max":1000&#125;)</span><br></pre></td></tr></table></figure><h3 id="near"><a href="#near" class="headerlink" title="$near"></a><font size="3px">$near</font></h3><p>$near指定的坐标由近到远，默认返回100条limit(10)指定返回10条</p><p>返回的是map集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"location":&#123;$near:[80,80]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>用geoNear命令也可以实现 ？？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;</span><br><span class="line">... "geoNear":"map",</span><br><span class="line">... "near":[80,80],</span><br><span class="line">... "num":2</span><br><span class="line">... &#125;)</span><br><span class="line">&#123; "ok" : 0, "errmsg" : "can't find ns" &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123; "geoNear":"map", "near":[80,80], "num":2,"ns":"bike.bikes" &#125;)</span><br><span class="line">&#123; "ok" : 0, "errmsg" : "can't find ns" &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="矩形-within-box"><a href="#矩形-within-box" class="headerlink" title="矩形$within:{$box:[[],[]]}"></a><font size="3px">矩形$within:{$box:[[],[]]}</font></h3><p>指定左上角和右上角</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"location":&#123;$within:&#123;$box:[[50,50],[105,105]]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="within-center"><a href="#within-center" class="headerlink" title="$within:{$center:[[],]}"></a><font size="3px">$within:{$center:[[],]}</font></h3><p>指定圆心和半径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.find(&#123;"location":&#123;$within:&#123;$center:[[90,90],10]&#125;&#125;&#125;)</span><br><span class="line">&#123; "_id" : ObjectId("5da1c08b873bba4fa238c6b2"), "location" : [ 90, 100 ] &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><h1 id="group"><a href="#group" class="headerlink" title="group"></a><font size="4px">group</font></h1><p>ns 集合</p><p>key 依据键值</p><p>initial 初始时间，所有成员都会使用</p><p>$reduce 传递的参数，当前文档，累加器文档(本组当前结果)</p><p>condition 条件，每组结果传递给客户端之前被调用一次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;"group":&#123;</span><br><span class="line">   "ns":"bike.bikes",</span><br><span class="line">   "key":day,</span><br><span class="line">   "initial":&#123;"time":0&#125;,</span><br><span class="line">   "$reduce":function(doc,prev)&#123;</span><br><span class="line">    if(doc.time&gt;prev.time)&#123;</span><br><span class="line">    prev.price=doc.price;</span><br><span class="line">    prev.time=doc.time;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;，</span><br><span class="line">   “condition":&#123;"day":&#123;"$lt":"2010/09/30"&#125;&#125;,</span><br><span class="line">   "finalize":function(prev)&#123;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a><font size="4px">MapReduce</font></h1><p>emit(key, value) 给MapReduce一个键值对</p><p>reduce = function(key,emits) emit返回的第一个值，相对于key的文档</p><p>this当前映射文档的引用</p><p>emit将文档某个键的计数count返回{count:1}</p><p>记录多个{count:1}文档，每一个都与集合的一个键有关，传递给reduce函数，reduce函数参数，(key，数组)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> map=function()&#123;</span><br><span class="line">for(var key in this)&#123;</span><br><span class="line">emit(key,&#123;count:1&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> reduce=function(key,emits)&#123;</span><br><span class="line">total=0'</span><br><span class="line">for(var i in emits)&#123;</span><br><span class="line">total+=emits[i].count;</span><br><span class="line">&#125;</span><br><span class="line">return &#123;"count",total&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span> reduce("x",[&#123;count:1,id:1&#125;,&#123;count:1,id:2&#125;])</span><br><span class="line">&#123;count:2&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库命令"><a href="#数据库命令" class="headerlink" title="数据库命令"></a><font size="4px">数据库命令</font></h1><p>db.bikes.drop() == db.runCommand({“drop”:”bikes”}) == db.$cmd.findOne({“drop”:”bikes”})</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;"drop":"bikes"&#125;)</span><br><span class="line">&#123; "ns" : "bike.bikes", "nIndexesWas" : 2, "ok" : 1 &#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>ok 执行结果 1.0/0.0</p><h2 id="listCommands"><a href="#listCommands" class="headerlink" title="listCommands()"></a><font size="3px">listCommands()</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.listCommands()</span><br></pre></td></tr></table></figure><p>Eg. </p><p>buildInfo mongodb服务器版本和主机操作系统信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> db.runCommand(&#123;"buildInfo":"bike"&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"version" : "3.4.23",</span><br><span class="line">"gitVersion" : "324017ede1dbb1c9554dd2dceb15f8da3c59d0e8",</span><br><span class="line">"modules" : [ ],</span><br><span class="line">"allocator" : "system",</span><br><span class="line">"javascriptEngine" : "mozjs",</span><br><span class="line">"sysInfo" : "deprecated",</span><br><span class="line">"versionArray" : [</span><br><span class="line">3,</span><br><span class="line">4,</span><br><span class="line">23,</span><br><span class="line">0</span><br><span class="line">],</span><br><span class="line">"openssl" : &#123;</span><br><span class="line">"running" : "OpenSSL 0.9.8zh 14 Jan 2016",</span><br><span class="line">"compiled" : "OpenSSL 0.9.8zh 14 Jan 2016"</span><br><span class="line">&#125;,</span><br><span class="line">"buildEnvironment" : &#123;</span><br><span class="line">"distmod" : "",</span><br><span class="line">"distarch" : "x86_64",</span><br><span class="line">"cc" : "gcc: Apple LLVM version 7.0.2 (clang-700.1.81)",</span><br><span class="line">"ccflags" : "-fno-omit-frame-pointer -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -Werror -O2 -Wno-unused-local-typedefs -Wno-unused-function -Wno-unused-private-field -Wno-deprecated-declarations -Wno-tautological-constant-out-of-range-compare -Wno-unused-const-variable -Wno-missing-braces -Wno-inconsistent-missing-override -Wno-potentially-evaluated-expression -fstack-protector-strong -mmacosx-version-min=10.8 -fno-builtin-memcmp",</span><br><span class="line">"cxx" : "g++: Apple LLVM version 7.0.2 (clang-700.1.81)",</span><br><span class="line">"cxxflags" : "-Woverloaded-virtual -stdlib=libc++ -std=c++11",</span><br><span class="line">"linkflags" : "-pthread -Wl,-bind_at_load -fstack-protector-strong -mmacosx-version-min=10.8 -stdlib=libc++",</span><br><span class="line">"target_arch" : "x86_64",</span><br><span class="line">"target_os" : "osx"</span><br><span class="line">&#125;,</span><br><span class="line">"bits" : 64,</span><br><span class="line">"debug" : false,</span><br><span class="line">"maxBsonObjectSize" : 16777216,</span><br><span class="line">"storageEngines" : [</span><br><span class="line">"devnull",</span><br><span class="line">"ephemeralForTest",</span><br><span class="line">"mmapv1",</span><br><span class="line">"wiredTiger"</span><br><span class="line">],</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>collStats 集合信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;"collStats":"bikes"&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"ns" : "bike.bikes",</span><br><span class="line">"size" : 59,</span><br><span class="line">"count" : 1,</span><br><span class="line">"avgObjSize" : 59,</span><br><span class="line">"storageSize" : 4096,</span><br><span class="line">"capped" : false,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>distinct 不同值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;"distinct":"集合名","key":"key","query":&#123;查询器&#125;&#125;)</span><br></pre></td></tr></table></figure><p>是否为主服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;"isMaster":1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"ismaster" : true,</span><br><span class="line">"maxBsonObjectSize" : 16777216,</span><br><span class="line">"maxMessageSizeBytes" : 48000000,</span><br><span class="line">"maxWriteBatchSize" : 1000,</span><br><span class="line">"localTime" : ISODate("2019-09-11T15:18:22.161Z"),</span><br><span class="line">"maxWireVersion" : 5,</span><br><span class="line">"minWireVersion" : 0,</span><br><span class="line">"readOnly" : false,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列出所有数据库，只能在admin数据库中使用</p><p>“listDatabases”:1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> use admin</span><br><span class="line">switched to db admin</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.auth("admin","admin")</span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span> db.runCommand(&#123;"listDatabases":1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"databases" : [</span><br><span class="line">&#123;</span><br><span class="line">"name" : "admin",</span><br><span class="line">"sizeOnDisk" : 196608,</span><br><span class="line">"empty" : false</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">"name" : "bike",</span><br><span class="line">"sizeOnDisk" : 32768,</span><br><span class="line">"empty" : false</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">"name" : "local",</span><br><span class="line">"sizeOnDisk" : 73728,</span><br><span class="line">"empty" : false</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"totalSize" : 303104,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;</span> show dbs</span><br><span class="line">admin  0.000GB</span><br><span class="line">bike   0.000GB</span><br><span class="line">local  0.000GB</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>集合重命名 renameCollection</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">switched to db admin</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> db.auth("admin","admin")</span><br><span class="line">1</span><br><span class="line"><span class="meta">&gt;</span>  db.runCommand(&#123;"renameCollection":"bike.bikes", "to":"bike.a"&#125;)</span><br><span class="line">&#123; "ok" : 1 &#125;</span><br><span class="line"><span class="meta">&gt;</span> use bike</span><br><span class="line">switched to db bike</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> show tables</span><br><span class="line">a</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure><p>最后一次操作信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;"getLastError":1&#125;)</span><br><span class="line">&#123;</span><br><span class="line">"connectionId" : 9,</span><br><span class="line">"n" : 0,</span><br><span class="line">"syncMillis" : 0,</span><br><span class="line">"writtenTo" : null,</span><br><span class="line">"err" : null,</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="固定集合"><a href="#固定集合" class="headerlink" title="固定集合"></a><font size="3px">固定集合</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.createCollection("fixed",&#123;capped:true,size:10000,max:100&#125;);</span><br></pre></td></tr></table></figure><p>创建固定集合，10000字节，最大容量100个文档，循环队列似淘汰最早进入的文档</p><h1 id="GridFS"><a href="#GridFS" class="headerlink" title="GridFS"></a><font size="4px">GridFS</font></h1><p>存储大二进制文件的机制</p><p>将大文件分成很多块，每块作为一个单独的文档存储，不产生磁盘碎片，内置在MongoDB的2GB块中</p><p>上传文件</p><p>mongofiles put /a.txt</p><p>列出所有问文件</p><p>mongofiles list</p><p>删除文件</p><p>mongofiles delete /a.txt</p><p>得到文件内容</p><p>mongofiles get /a.txt</p><p>cat /a.txt</p><h1 id="db-eval"><a href="#db-eval" class="headerlink" title="db.eval"></a><font size="4px">db.eval</font></h1><p>执行任意javascript脚本</p><p>system.js 数据库特有集合</p><p>db.system.js.insert({“_id”:”x”,”value”:1})</p><p>db.system.js.insert({“_id”:”y”,”value”:3})</p><p>db.eval(“return x+y;”) – 4</p><h1 id="数据库引用"><a href="#数据库引用" class="headerlink" title="数据库引用"></a><font size="4px">数据库引用</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;$ref&quot;:&quot;集合名&quot;,&quot;id&quot;:_id,&quot;$db&quot;:数据库&#125;</span><br></pre></td></tr></table></figure><p>eg.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> db.bikes.insert(&#123;"id":0,"text":"test"&#125;) </span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span> db.bikes.insert(&#123;"_id":1,"text":"mongodb is fun!","reference":[&#123;"$ref":"bikes","id":0,"$db":bike&#125;&#125;]</span><br><span class="line"><span class="meta">&gt;</span> </span><br><span class="line"><span class="meta">&gt;</span> var note = db.bikes.findOne("_id":1)</span><br><span class="line"><span class="meta">&gt;</span> note.references.forEach(function(ref)&#123;</span><br><span class="line">printjson(db[ref.$ref].findOne(&#123;"_id":ref.$id&#125;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a><font size="4px">mongodb</font></h1><ul><li><p>–dbpath</p><p>默认在 /data/db，mongo启动会创建出mongod.lock防止其他mongod进程使用该数据目录</p></li><li><p>–port</p><p>服务器监听端口号</p></li><li><p>–fork</p><p>进程为守护进程</p></li><li><p>–logpath</p><p>日志输出路径</p></li><li><p>–config</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;《MongoDB权威指南》学习笔记&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="https://www.runaccpeted.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://www.runaccpeted.com/tags/MongoDB/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W.T.的博客</title>
  
  <subtitle>Every day to be a little better</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.runaccepted.com/"/>
  <updated>2020-09-02T09:01:27.908Z</updated>
  <id>https://www.runaccepted.com/</id>
  
  <author>
    <name>Wang Ting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dfs算法选择k个数使和为m元素平方和最大</title>
    <link href="https://www.runaccepted.com/2020/09/02/dfs%E7%AE%97%E6%B3%95%E9%80%89%E6%8B%A9k%E4%B8%AA%E6%95%B0%E4%BD%BF%E5%92%8C%E4%B8%BAm%E5%85%83%E7%B4%A0%E5%B9%B3%E6%96%B9%E5%92%8C%E6%9C%80%E5%A4%A7/"/>
    <id>https://www.runaccepted.com/2020/09/02/dfs算法选择k个数使和为m元素平方和最大/</id>
    <published>2020-09-02T08:53:37.000Z</published>
    <updated>2020-09-02T09:01:27.908Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">dfs算法应用，n个元素中选择k个数，使其和为m，并且每个元素的平方和最大</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>输入n,m,k。分别为数组个数，选择的数之和，选择的元素个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 6 2</span><br><span class="line">2 3 3 4</span><br></pre></td></tr></table></figure><h1 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a><font size="4px">解析思路</font></h1><p>分为选index号元素的 <code>dfs(idx+1,cnt+1,sum+num[idx],squ+num[idx]*num[idx]);</code> </p><p>和不选择index号的<code>dfs(idx+1,cnt,sum,squ);</code></p><p>当元素个数为k，和为m，比较选择最大的平方和保留</p><p>tempath只有在选择index号时才加入num[index]，而后及时剔除，以免影响不选index号的分支</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font size="4px">代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tempath,path;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> maxsqu = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">int</span> cnt,<span class="keyword">int</span> sum,<span class="keyword">int</span> squ)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt==k&amp;&amp;sum==m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (squ&gt;maxsqu)</span><br><span class="line">&#123;</span><br><span class="line">maxsqu=squ;</span><br><span class="line">path = tempath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (idx==n||cnt&gt;k||sum&gt;m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">tempath.push_back(num[idx]);</span><br><span class="line">dfs(idx+<span class="number">1</span>,cnt+<span class="number">1</span>,sum+num[idx],squ+num[idx]*num[idx]);</span><br><span class="line">tempath.pop_back();</span><br><span class="line"></span><br><span class="line">dfs(idx+<span class="number">1</span>,cnt,sum,squ);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"A0000.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; path.size(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,path[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;dfs算法应用，n个元素中选择k个数，使其和为m，并且每个元素的平方和最大&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccepted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccepted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT线上测试赛真题</title>
    <link href="https://www.runaccepted.com/2020/05/02/PAT%E7%BA%BF%E4%B8%8A%E6%B5%8B%E8%AF%95%E8%B5%9B%E7%9C%9F%E9%A2%98/"/>
    <id>https://www.runaccepted.com/2020/05/02/PAT线上测试赛真题/</id>
    <published>2020-05-02T08:00:36.000Z</published>
    <updated>2020-07-20T08:09:58.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><a href="https://pintia.cn/market/item/1256233770241036288" target="_blank" rel="noopener">PAT 线上测试赛真题（2020-05-01）史上首场 PAT 线上比赛，17分钟出现第一个满分！你能比他快吗？</a></blockquote><a id="more"></a><h1 id="Knuth洗牌法-20分"><a href="#Knuth洗牌法-20分" class="headerlink" title="Knuth洗牌法 (20分)"></a><font size="4px">Knuth洗牌法 (20分)</font></h1><p>Knuth 洗牌法是生成 { 1, 2, …, n } 的一个随机重排列的算法。与每次反复随机生成一个数字，直到获得一个不重复的新数字的算法不同，Knuth 洗牌法从原始序列 { 1, 2, …, n } 开始，逐次洗牌。洗牌的方法是从左到右，每轮从没确定的数字中随机抽取一个数，把它放到确定的位置上。</p><p>例如令 n 等于 4。我们从 { 1, 2, 3, 4 } 开始。记 i 到 N 之间的随机抽牌数为 random(i,N)。假设我们生成的随机数序列 random(i,4) (i=1, 2, 3, 4) 为 { 2, 4, 3, 4 }。则 Knuth 洗牌法是这样执行的：</p><ul><li>random(1,4) = 2; 将位置 1 与位置 2 的数字交换，得到 { 2, 1, 3, 4 }</li><li>random(2,4) = 4; 将位置 2 与位置 4 的数字交换，得到 { 2, 4, 3, 1 }</li><li>random(3,4) = 3; 将位置 3 与位置 3 的数字交换，得到 { 2, 4, 3, 1 }</li><li>random(4,4) = 4; 将位置 4 与位置 4 的数字交换，得到 { 2, 4, 3, 1 }</li></ul><p>现给定随机抽牌数字序列，请你输出 Knuth 洗牌法的结果序列。</p><p><strong>输入格式：</strong></p><p>输入在第一行中给出一个正整数 N（≤ 1000）。随后一行给出 N 个随机抽牌数字，数字间以空格分隔。题目保证第 i 个数在 i 到 N 之间。</p><p><strong>输出格式：</strong></p><p>在第一行中输出 Knuth 洗牌法的结果序列。数字间必须以 1 个空格分隔，行首尾不得有多余空格。</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">7 4 4 5 10 6 9 9 10 10</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 4 2 5 10 6 9 1 3 8</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font size="4px">代码</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1010</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">num[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">swap(num[i],num[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,num[i]);</span><br><span class="line"><span class="keyword">if</span> (i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三阶幸福数-20分"><a href="#三阶幸福数-20分" class="headerlink" title="三阶幸福数 (20分)"></a><font size="4px">三阶幸福数 (20分)</font></h1><p>对一个十进制数的各位数字做一次立方和，称作一次迭代。如果一个十进制数能通过 <em>h 次迭代得到 1，就称该数为三阶幸福数，迭代的次数 \</em>h 称为幸福度。例如 1579 经过 1 次迭代得到 1198，2 次迭代后得到 1243，3 次迭代后得到 100，最后得到 1。则 1579 是幸福数，其幸福度为 4。**</p><p>另一方面，如果一个大于1的数字经过数次迭代后进入了死循环，那这个数就不幸福。例如 97 迭代得到 1072、352、160、217、352、…… 可见 352 到 217 形成了死循环，所以 97 就不幸福，而 352 就是它最早遇到的循环点。</p><p>本题就要求你编写程序，判断一个给定的数字是否有三阶幸福。</p><p><strong>输入格式：</strong></p><p>输入在第一行给出一个不超过 100 的正整数 <em>N，随后 \</em>N 行，每行给出一个不超过 1 的正整数。**</p><p><strong>输出格式：</strong></p><p>对于每一个输入的数字，如果其是三阶幸福数，则在一行中输出它的幸福度；否则输出最早遇到的循环点。</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1579</span><br><span class="line">97</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">352</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><font size="4px">代码</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; exist;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">exist[a]++;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">ans+=<span class="built_in">pow</span>((a%<span class="number">10</span>),<span class="number">3</span>);</span><br><span class="line">a/=<span class="number">10</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(a!=<span class="number">0</span>);</span><br><span class="line">a = ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (exist[ans]&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = ans;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">exist[ans]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag &gt;<span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, flag);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="垃圾分类-20分"><a href="#垃圾分类-20分" class="headerlink" title="垃圾分类 (20分)"></a><font size="4px">垃圾分类 (20分)</font></h1><p>[<img src="/2020/05/02/PAT线上测试赛真题/0503.jpg" alt="ljfl.jpg"></p><p>据香港《南华早报》2019年7月15日文章，上海严格的垃圾分类新规令不少居民抓狂。这催生出大量帮助找出正确分类答案的App和小程序。目前仅微信上就至少有280种与垃圾处理有关的App，在苹果应用商店也达130种。支付宝表示，已有60多家独立App开发商申请为该平台提供类似服务。</p><p>本题就请你现场实现一个简单的垃圾分类小助手。</p><p><strong>输入格式：</strong></p><p>输入首先给出官方分类指南中每种物品的归属。在一行中给出一个正整数 N（≤），即物品数量；随后 N 行，每行给出一个物品名称（长度不超过 10 的、由小写英文字母和下划线组成的字符串）和该物品所属的分类（1 代表干垃圾、2 代表湿垃圾、3 代表可回收物、4 代表有害垃圾）。题目保证所有物品名称无重复。</p><p>随后每行给出一个查询物品的名称（格式与指南物品名称相同）。最后一行给出结束符 <code>#</code>，表示查询终止，这一行不需要查询。</p><p><strong>输出格式：</strong></p><p>对每个查询的物品，在一行中给出其所属分类：<code>Gan laji</code> 代表干垃圾；<code>Shi laji</code> 代表湿垃圾；<code>Ke Hui Shou</code> 代表可回收物；<code>You Hai laji</code> 代表有害垃圾。如果查询的物品不在指南中，则输出 <code>?</code> 表示不知道。</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">bao_zhi 3</span><br><span class="line">dian_chi 4</span><br><span class="line">dan_ke 2</span><br><span class="line">bei_ke 1</span><br><span class="line">dan_ke</span><br><span class="line">dian_chi</span><br><span class="line">ren_zha</span><br><span class="line">bao_zhi</span><br><span class="line">bei_ke</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Shi laji</span><br><span class="line">You Hai laji</span><br><span class="line">?</span><br><span class="line">Ke Hui Shou</span><br><span class="line">Gan laji</span><br></pre></td></tr></table></figure><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><font size="4px">代码</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; exist;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str&gt;&gt;cnt;</span><br><span class="line">exist[str]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">0</span>]==<span class="string">'#'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (exist[str]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Gan laji"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (exist[str]==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Shi laji"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (exist[str]==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Ke Hui Shou"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (exist[str]==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"You Hai laji"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"?"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;a href=&quot;https://pintia.cn/market/item/1256233770241036288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PAT 线上测试赛真题（2020-05-01）史上首场 PAT 线上比赛，17分钟出现第一个满分！你能比他快吗？&lt;/a&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccepted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccepted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>压力测试工具-ApacheAB</title>
    <link href="https://www.runaccepted.com/2020/04/19/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-ApacheAB/"/>
    <id>https://www.runaccepted.com/2020/04/19/压力测试工具-ApacheAB/</id>
    <published>2020-04-19T07:43:38.000Z</published>
    <updated>2020-05-06T21:39:39.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Apache AB 模拟并发请求，测试服务器在并发请求下的运行效率</blockquote><a id="more"></a><h1 id="压力测试Apache-AB"><a href="#压力测试Apache-AB" class="headerlink" title="压力测试Apache AB"></a><font size="4px">压力测试Apache AB</font></h1><h2 id="下载Apache-HTTP-Server"><a href="#下载Apache-HTTP-Server" class="headerlink" title="下载Apache HTTP Server"></a><font size="3px">下载Apache HTTP Server</font></h2><p><a href="http://httpd.apache.org/download.cgi" target="_blank" rel="noopener">http://httpd.apache.org/download.cgi</a></p><p>打开终端，进入到刚刚解压完的http server目录</p><p>执行 ./configure （根据官方文档说明，不加prefix会有默认的路径）</p><p>可能你会见到如下错误，找不到APR</p><h2 id="安装APR-Apache-Portable-Runtime"><a href="#安装APR-Apache-Portable-Runtime" class="headerlink" title="安装APR (Apache Portable Runtime)"></a><font size="3px">安装APR (Apache Portable Runtime)</font></h2><p><a href="http://apr.apache.org/download.cgi" target="_blank" rel="noopener">http://apr.apache.org/download.cgi</a></p><p>安装 APR，prefix后面跟着的是你想要安装APR的路径，前提：进入到解压后的APR路径</p><p>./configure –prefix=/usr/local/apr<br>make<br>make install</p><h2 id="安装APR-Util"><a href="#安装APR-Util" class="headerlink" title="安装APR-Util"></a><font size="3px">安装APR-Util</font></h2><p>前提：进入到解压后的APR-Util路径，prefix后面跟着的是你想要安装APR的路径，-with-apr是指向我们安装apr的路径</p><p>./configure –prefix=/usr/local/apr-util -with-apr=/usr/local/apr/<br>make<br>make install</p><h2 id="重新安装Apache-HTTP-Server"><a href="#重新安装Apache-HTTP-Server" class="headerlink" title="重新安装Apache HTTP Server"></a><font size="3px">重新安装Apache HTTP Server</font></h2><p>进入到http server的解压路径，执行下列命令<br>前提：记得创建/usr/local/httpd/这个路径</p><p>./configure –prefix=/usr/local/httpd/ -with-apr=/usr/local/apr -with-apr-util=/usr/local/apr-util/<br>make</p><p>make install</p><p>进入到httpd的安装目录，启动服务</p><p>cd /usr/local/httpd/bin<br>apachectl -k start</p><p><font color="#f00">遇到“AH00558: httpd: Could not reliably determine the server’s fully qualified domain name”错误</font></p><p><strong>进入到/usr/local/httpd/conf目录</strong></p><p>编辑httpd.conf文件，搜索”#ServerName”，添加ServerName localhost:80</p><p>重新进入/usr/local/httpd/bin </p><p>apachectl -k start</p><p><strong>在浏览器中输入localhost:80</strong></p><p><img src="/2020/04/19/压力测试工具-ApacheAB/ab.png" alt></p><h1 id="开启ab测试"><a href="#开启ab测试" class="headerlink" title="开启ab测试"></a><font size="4px">开启ab测试</font></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ab</span></span><br><span class="line">ab: wrong number of arguments</span><br><span class="line">Usage: ab [options] [http[s]://]hostname[:port]/path</span><br><span class="line">Options are:</span><br><span class="line">    -n requests     Number of requests to perform</span><br><span class="line">    -c concurrency  Number of multiple requests to make at a time</span><br><span class="line">    -t timelimit    Seconds to max. to spend on benchmarking</span><br><span class="line">                    This implies -n 50000</span><br><span class="line">    -s timeout      Seconds to max. wait for each response</span><br><span class="line">                    Default is 30 seconds</span><br><span class="line">    -b windowsize   Size of TCP send/receive buffer, in bytes</span><br><span class="line">    -B address      Address to bind to when making outgoing connections</span><br><span class="line">    -p postfile     File containing data to POST. Remember also to set -T</span><br><span class="line">    -u putfile      File containing data to PUT. Remember also to set -T</span><br><span class="line">    -T content-type Content-type header to use for POST/PUT data, eg.</span><br><span class="line">                    'application/x-www-form-urlencoded'</span><br><span class="line">                    Default is 'text/plain'</span><br><span class="line">    -v verbosity    How much troubleshooting info to print</span><br><span class="line">    -w              Print out results in HTML tables</span><br><span class="line">    -i              Use HEAD instead of GET</span><br><span class="line">    -x attributes   String to insert as table attributes</span><br><span class="line">    -y attributes   String to insert as tr attributes</span><br><span class="line">    -z attributes   String to insert as td or th attributes</span><br><span class="line">    -C attribute    Add cookie, eg. 'Apache=1234'. (repeatable)</span><br><span class="line">    -H attribute    Add Arbitrary header line, eg. 'Accept-Encoding: gzip'</span><br><span class="line">                    Inserted after all normal header lines. (repeatable)</span><br><span class="line">    -A attribute    Add Basic WWW Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -P attribute    Add Basic Proxy Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -X proxy:port   Proxyserver and port number to use</span><br><span class="line">    -V              Print version number and exit</span><br><span class="line">    -k              Use HTTP KeepAlive feature</span><br><span class="line">    -d              Do not show percentiles served table.</span><br><span class="line">    -S              Do not show confidence estimators and warnings.</span><br><span class="line">    -q              Do not show progress when doing more than 150 requests</span><br><span class="line">    -l              Accept variable document length (use this for dynamic pages)</span><br><span class="line">    -g filename     Output collected data to gnuplot format file.</span><br><span class="line">    -e filename     Output CSV file with percentages served</span><br><span class="line">    -r              Don't exit on socket receive errors.</span><br><span class="line">    -m method       Method name</span><br><span class="line">    -h              Display usage information (this message)</span><br><span class="line">    -I              Disable TLS Server Name Indication (SNI) extension</span><br><span class="line">    -Z ciphersuite  Specify SSL/TLS cipher suite (See openssl ciphers)</span><br><span class="line">    -f protocol     Specify SSL/TLS protocol</span><br><span class="line">                    (TLS1, TLS1.1, TLS1.2 or ALL)</span><br><span class="line">    -E certfile     Specify optional client certificate chain and private key</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ab -n 10000 http://localhost:9500/edu-teacher/listTeachers</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        </span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">Server Port:            9500</span><br><span class="line"></span><br><span class="line">Document Path:          /edu-teacher/listTeachers</span><br><span class="line">Document Length:        5685 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken for tests:   39.782 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        9885</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 9885, Exceptions: 0)</span><br><span class="line">Total transferred:      59491075 bytes</span><br><span class="line">HTML transferred:       56781075 bytes</span><br><span class="line">Requests per second:    251.37 [#/sec] (mean)</span><br><span class="line">Time per request:       397.820 [ms] (mean)</span><br><span class="line">Time per request:       3.978 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          1460.38 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1   6.5      0      83</span><br><span class="line">Processing:    44  371 250.6    309    6235</span><br><span class="line">Waiting:       41  366 245.3    306    6117</span><br><span class="line">Total:         44  372 254.0    309    6235</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">    309</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">    349</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">    386</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">    415</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">    544</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">    710</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">    964</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">   1313</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">   6235 (longest request)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Apache AB 模拟并发请求，测试服务器在并发请求下的运行效率&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://www.runaccepted.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="ApacheAB" scheme="https://www.runaccepted.com/tags/ApacheAB/"/>
    
  </entry>
  
  <entry>
    <title>Parallels Desktop 15 For Mac 破解版</title>
    <link href="https://www.runaccepted.com/2020/03/30/Parallels%E5%AE%89%E8%A3%85/"/>
    <id>https://www.runaccepted.com/2020/03/30/Parallels安装/</id>
    <published>2020-03-30T14:36:10.000Z</published>
    <updated>2020-04-07T06:07:02.096Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Parallels安装 CentOS7安装</blockquote><a id="more"></a><h1 id="Parallels-Desktop-15-安装"><a href="#Parallels-Desktop-15-安装" class="headerlink" title="Parallels Desktop 15 安装"></a><font size="4px">Parallels Desktop 15 安装</font></h1><p>官网 <a href="https://www.parallels.cn/products/desktop/buy/" target="_blank" rel="noopener">https://www.parallels.cn/products/desktop/buy/</a></p><p>链接: <a href="https://pan.baidu.com/s/1A4F2RhT4bT-SLK70jLXAoQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1A4F2RhT4bT-SLK70jLXAoQ</a>  密码: 08f0</p><p>安装不要联网！不要联网！</p><p>双击安装</p><p><img src="/2020/03/30/Parallels安装/setup.png" alt></p><p>出现 <font color="#f00">无法打开“Parallels Desktop.app”,因为Apple无法检查其是否包含恶意软件</font></p><p>终端输入 <code>sudo spctl --master-disable</code>  允许任何来源的安装</p><p>而后不检查更新，这就是不联网的原因，安装当前版</p><p>最终</p><p><img src="/2020/03/30/Parallels安装/active.png" alt></p><p>关闭检查</p><p><img src="/2020/03/30/Parallels安装/nocheck.png" alt></p><p>同样不联网，安装Parallels Tools</p><p><img src="/2020/03/30/Parallels安装/tools.png" alt></p><p>禁用</p><p><img src="/2020/03/30/Parallels安装/tooldis.png" alt></p><h1 id="安装win10"><a href="#安装win10" class="headerlink" title="安装win10"></a><font size="4px">安装win10</font></h1><p>ed2k://|file|cn_windows_10_multi-edition_vl_version_1709_updated_sept_2017_x64_dvd_100090774.iso|4630972416|8867C5E54405FF9452225B66EFEE690A|/</p><h1 id="CentOS-7下载及配置"><a href="#CentOS-7下载及配置" class="headerlink" title="CentOS 7下载及配置"></a><font size="4px">CentOS 7下载及配置</font></h1><p><a href="http://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CentOS-7-x86_64-DVD-1908.iso                       没有桌面(选择☑️)</span><br><span class="line">CentOS-7-x86_64-DVD-1908.torrent                   </span><br><span class="line">CentOS-7-x86_64-Everything-1908.iso                完整版，集成所有软件</span><br><span class="line">CentOS-7-x86_64-Everything-1908.torrent            </span><br><span class="line">CentOS-7-x86_64-LiveGNOME-1908.iso                 有桌面版         </span><br><span class="line">CentOS-7-x86_64-LiveGNOME-1908.torrent             </span><br><span class="line">CentOS-7-x86_64-LiveKDE-1908.iso                   有桌面版</span><br><span class="line">CentOS-7-x86_64-LiveKDE-1908.torrent               </span><br><span class="line">CentOS-7-x86_64-Minimal-1908.iso                   精简版，自带的软件最少</span><br><span class="line">CentOS-7-x86_64-Minimal-1908.torrent               </span><br><span class="line">CentOS-7-x86_64-NetInstall-1908.iso                网络安装版</span><br><span class="line">CentOS-7-x86_64-NetInstall-1908.torrent</span><br></pre></td></tr></table></figure><h2 id="查看ip-固定ip"><a href="#查看ip-固定ip" class="headerlink" title="查看ip-固定ip"></a><font size="3px">查看ip-固定ip</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ip address</span></span><br></pre></td></tr></table></figure><h2 id="ip相关配置文件"><a href="#ip相关配置文件" class="headerlink" title="ip相关配置文件"></a><font size="3px">ip相关配置文件</font></h2><p>/etc/sysconfig/network-scripts/ifcfg-eth0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost network-scripts]$ cd /etc/sysconfig/network-scripts</span><br><span class="line">[linux@localhost network-scripts]$ ls</span><br><span class="line">ifcfg-eth0  ifdown-bnep  ifdown-ipv6  ifdown-ppp     ifdown-Team      ifup          ifup-eth   ifup-isdn   ifup-post    ifup-sit       ifup-tunnel       network-functions</span><br><span class="line">ifcfg-lo    ifdown-eth   ifdown-isdn  ifdown-routes  ifdown-TeamPort  ifup-aliases  ifup-ippp  ifup-plip   ifup-ppp     ifup-Team      ifup-wireless     network-functions-ipv6</span><br><span class="line">ifdown      ifdown-ippp  ifdown-post  ifdown-sit     ifdown-tunnel    ifup-bnep     ifup-ipv6  ifup-plusb  ifup-routes  ifup-TeamPort  init.ipv6-global</span><br><span class="line">[linux@192 network-scripts]$ vi ifcfg-eth0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">默认配置</span></span><br><span class="line">TYPE="Ethernet"</span><br><span class="line">PROXY_METHOD="none"</span><br><span class="line">BROWSER_ONLY="no"</span><br><span class="line">BOOTPROTO="static"</span><br><span class="line">DEFROUTE="yes"</span><br><span class="line">IPV4_FAILURE_FATAL="no"</span><br><span class="line">IPV6INIT="yes"</span><br><span class="line">IPV6_AUTOCONF="yes"</span><br><span class="line">IPV6_DEFROUTE="yes"</span><br><span class="line">IPV6_FAILURE_FATAL="no"</span><br><span class="line">IPV6_ADDR_GEN_MODE="stable-privacy"</span><br><span class="line">NAME="eth0"</span><br><span class="line">UUID="0ae56f0b-16f1-42cd-adc0-b3bc4daa57c2"</span><br><span class="line">DEVICE="eth0"</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置</span></span><br><span class="line">TYPE="Ethernet" #网关类型：以太网</span><br><span class="line">BOOTPROTO="static" #ip设置：静态ip</span><br><span class="line">DEVICE="eth0" #网卡名</span><br><span class="line">ONBOOT="yes" #随系统启动</span><br><span class="line">IPADDR="192.168.0.101" #ip地址</span><br><span class="line">GATEWAY="192.168.0.1" #网关</span><br><span class="line">NETMASK="255.255.255.0" #子网掩码</span><br><span class="line">DNS1="8.8.8.8" #谷歌免费dns</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"></span><br><span class="line">[linux@localhost network-scripts]$ reboot</span><br></pre></td></tr></table></figure><h2 id="Mac-连接linux"><a href="#Mac-连接linux" class="headerlink" title="Mac 连接linux"></a><font size="3px">Mac 连接linux</font></h2><p><code>ssh 用户名@ip</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LearningtekiMacBook-Air:myblog Learning$ ssh linux@192.168.0.101</span><br><span class="line">[linux@192 ~]$ </span><br><span class="line">[linux@192 ~]$ ip addr</span><br><span class="line">2: eth0: inet 192.168.0.101/24 </span><br><span class="line">[linux@192 ~]$ </span><br><span class="line">[linux@192 ~]$</span><br></pre></td></tr></table></figure><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><font size="3px">防火墙</font></h2><p>查看防火墙状态： service firewalld status</p><p>启动防火墙：  systemctl start firewalld</p><p>停止防火墙：  systemctl stop firewalld </p><p>禁用防火墙：  systemctl disable firewalld</p><hr><p>查看版本： firewall-cmd –version</p><p>查看帮助： firewall-cmd –help </p><p>显示状态： firewall-cmd –state</p><p>开启端口：firewall-cmd –zone=public(作用域) –add-port=80/tcp(端口和访问类型) –permanent(永久生效)</p><p>更新防火墙：firewall-cmd –reload</p><p>查看该端口是否开启：firewall-cmd –zone= public –query-port=80/tcp </p><p>关闭端口：firewall-cmd –zone= public –remove-port=80/tcp –permanent </p><h2 id="yum源中加入阿里云源"><a href="#yum源中加入阿里云源" class="headerlink" title="yum源中加入阿里云源"></a><font size="3px">yum源中加入阿里云源</font></h2><ol><li><p>打开centos的yum文件夹 </p><p>cd  /etc/yum.repos.d/</p></li><li><p>用wget下载repo文件 </p><p>wget  <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p>如果wget命令不生效</p><p>yum -y install wget</p></li><li><p>备份系统原来的repo文件 </p><p>mv  CentOS-Base.repo CentOs-Base.repo.bak</p></li><li><p>替换系统原理的repo文件</p><p>mv Centos-7.repo CentOS-Base.repo</p></li><li><p>执行yum源更新命令</p><p>yum clean all</p><p>yum makecache</p><p>yum update</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost ~]$ su</span><br><span class="line">Password:</span><br><span class="line">[root@localhost linux]# cd /etc/yum.repos.d/</span><br><span class="line">[root@localhost yum.repos.d]# ls</span><br><span class="line">CentOS-Base.repo      CentOS-CR.repo         CentOS-fasttrack.repo  CentOS-Sources.repo</span><br><span class="line">CentOS-Debuginfo.repo  CentOS-Media.repo      CentOS-Vault.repo</span><br><span class="line">[root@localhost yum.repos.d]# yum -y install wget</span><br><span class="line">[root@localhost yum.repos.d]# wget  http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">[root@localhost yum.repos.d]# mv CentOS-Base.repo CentOs-Base.repo.bak</span><br><span class="line">[root@localhost yum.repos.d]# mv Centos-7.repo CentOs-Base.repo</span><br><span class="line">[root@localhost yum.repos.d]# yum clean all</span><br><span class="line">[root@localhost yum.repos.d]# yum makecache</span><br><span class="line">[root@localhost yum.repos.d]# yum update</span><br></pre></td></tr></table></figure><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a><font size="4px">安装docker</font></h1><p><a href="https://www.runaccepted.com/2019/10/21/Docker/">https://www.runaccepted.com/2019/10/21/Docker/</a></p><h1 id="重启后docker无法启动"><a href="#重启后docker无法启动" class="headerlink" title="重启后docker无法启动"></a><font size="4px">重启后docker无法启动</font></h1><p><code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></p><p>解决：</p><p><code>systemctl daemon-reload</code></p><p><code>service docker restart</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost ~]$ docker ps</span><br><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$</span><br><span class="line">[linux@localhost ~]$ systemctl daemon-reload</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.systemd1.reload-daemon ===</span><br><span class="line">Authentication is required to reload the systemd state.</span><br><span class="line">Authenticating as: root</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ service docker restart</span><br><span class="line">Redirecting to /bin/systemctl restart docker.service</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===</span><br><span class="line">Authentication is required to manage system services or units.</span><br><span class="line">Authenticating as: root</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ docker ps</span><br><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json: dial unix /var/run/docker.sock: connect: permission denied</span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ su</span><br><span class="line">密码：</span><br><span class="line">[root@localhost linux]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">[root@localhost linux]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS                       PORTS               NAMES</span><br><span class="line">19d9ac40ba76        elasticsearch:5.6.11   "/docker-entrypoint.…"   8 hours ago         Exited (143) 6 minutes ago                       elasticsearch</span><br><span class="line">c7473e2145bc        logstash:5.6.11        "/docker-entrypoint.…"   9 hours ago         Exited (137) 8 hours ago                         logstash</span><br><span class="line">7122d84209e4        kibana:5.6.11          "/docker-entrypoint.…"   10 hours ago        Exited (143) 8 hours ago                         kibana</span><br><span class="line">[root@localhost linux]#</span><br></pre></td></tr></table></figure><h1 id="克隆linux"><a href="#克隆linux" class="headerlink" title="克隆linux"></a><font size="4px">克隆linux</font></h1><p>在关机情况下操作</p><p><img src="/2020/03/30/Parallels安装/kelong.png" alt></p><p>修改IP地址 为192.168.0.102</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost ~]$ cd /etc/sysconfig/network-scripts</span><br><span class="line">[linux@localhost network-scripts]$ nano ifcfg-eth0</span><br><span class="line"></span><br><span class="line">TYPE="Ethernet"</span><br><span class="line">BOOTPROTO="static"</span><br><span class="line">DEVICE="eth0"</span><br><span class="line">ONBOOT="yes"</span><br><span class="line">IPADDR="192.168.0.102"</span><br><span class="line">GATEWAY="192.168.0.1"</span><br><span class="line">NETMASK="255.255.255.0"</span><br><span class="line">DNS1="8.8.8.8"</span><br><span class="line"></span><br><span class="line">[linux@localhost network-scripts]$</span><br></pre></td></tr></table></figure><p>删除Linux物理地址绑定的文件（该文件会在操作系统重启并生成物理地址以后将物理地址绑定到IP上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost network-scripts]$ rm -rf /etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line">[linux@localhost network-scripts]$ reboot</span><br></pre></td></tr></table></figure><h2 id="Mac-连接linux2"><a href="#Mac-连接linux2" class="headerlink" title="Mac 连接linux2"></a><font size="3px">Mac 连接linux2</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LearningtekiMacBook-Air:myblog Learning$ ssh linux@192.168.0.102</span><br><span class="line">[linux@localhost ~]$ </span><br><span class="line">[linux@localhost ~]$ ip addr</span><br><span class="line">2: eth0: inet 192.168.0.102/24 </span><br><span class="line">[linux@localhost ~]$</span><br></pre></td></tr></table></figure><p>启动elasticsearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS                        PORTS               NAMES</span><br><span class="line">19d9ac40ba76        elasticsearch:5.6.11   "/docker-entrypoint.…"   9 hours ago         Exited (143) 40 minutes ago                       elasticsearch</span><br><span class="line">[root@localhost network-scripts]# docker start 19d9ac40ba76</span><br><span class="line">19d9ac40ba76</span><br><span class="line">[root@localhost network-scripts]#</span><br></pre></td></tr></table></figure><p><a href="http://192.168.0.102:9200/" target="_blank" rel="noopener">http://192.168.0.102:9200/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// http://192.168.0.102:9200/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"efBli3S"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span>: <span class="string">"RmnRPDI-T4G8hOH92bX5wQ"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"5.6.11"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span>: <span class="string">"bc3eef4"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span>: <span class="string">"2018-08-16T15:25:17.293Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span>: <span class="string">"6.6.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再重启ssh拒绝-Connection-refused"><a href="#再重启ssh拒绝-Connection-refused" class="headerlink" title="再重启ssh拒绝 Connection refused"></a><font size="3px">再重启ssh拒绝 Connection refused</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LearningtekiMacBook-Air:~ Learning$ ssh linux@192.168.0.102</span><br><span class="line">ssh: connect to host 192.168.0.102 port 22: Connection refused</span><br><span class="line">LearningtekiMacBook-Air:~ Learning$</span><br></pre></td></tr></table></figure><p>查看ssh是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost ~]$ ps -e | grep ssh</span><br><span class="line">  981 ?        00:00:00 sshd</span><br><span class="line">[linux@localhost ~]$</span><br></pre></td></tr></table></figure><p>查看22端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost ~]$ ss -lnt</span><br><span class="line">State      Recv-Q Send-Q                          Local Address:Port                                         Peer Address:Port              </span><br><span class="line">LISTEN     0      128                                         *:22                                                      *:*                  </span><br><span class="line">LISTEN     0      100                                 127.0.0.1:25                                                      *:*                  </span><br><span class="line">LISTEN     0      128                                      [::]:22                                                   [::]:*                  </span><br><span class="line">LISTEN     0      100                                     [::1]:25                                                   [::]:*                  </span><br><span class="line">[linux@localhost ~]$</span><br></pre></td></tr></table></figure><p>查看hosts名单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br></pre></td></tr></table></figure><p>添加本地ip和hostname</p><p>– 本机hostname是？ ping 192.168.0.100</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost ~]$ ping 192.168.0.100</span><br><span class="line">PING 192.168.0.100 (192.168.0.100) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.100: icmp_seq=1 ttl=64 time=0.165 ms</span><br><span class="line">64 bytes from 192.168.0.100: icmp_seq=2 ttl=64 time=0.274 ms</span><br><span class="line">64 bytes from 192.168.0.100: icmp_seq=3 ttl=64 time=0.374 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.100 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2002ms</span><br><span class="line">rtt min/avg/max/mdev = 0.165/0.271/0.374/0.085 ms</span><br><span class="line">[linux@localhost ~]$</span><br></pre></td></tr></table></figure><p>hostname就是ip吧，添加</p><p><code>192.168.0.100 192.168.0.100</code></p><p><strong>ssh hostname</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost ~]$ ssh 192.168.0.100</span><br><span class="line">Warning: Permanently added '192.168.0.100' (ECDSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>再次ssh linux2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LearningtekiMacBook-Air:~ Learning$ ssh linux@192.168.0.102</span><br><span class="line">linux@192.168.0.102's password: </span><br><span class="line">[linux@localhost ~]$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Parallels安装 CentOS7安装&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.runaccepted.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.runaccepted.com/tags/Linux/"/>
    
      <category term="Parallels_Desktop_15" scheme="https://www.runaccepted.com/tags/Parallels-Desktop-15/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch安装及实践</title>
    <link href="https://www.runaccepted.com/2020/03/29/ElasticSearch%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%9E%E8%B7%B5/"/>
    <id>https://www.runaccepted.com/2020/03/29/ElasticSearch安装及实践/</id>
    <published>2020-03-29T09:15:01.000Z</published>
    <updated>2020-07-04T08:34:59.251Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">elasticsearch kibana logstash ELK 最终选用低版本运行</blockquote><a id="more"></a><h1 id="linux的docker中安装"><a href="#linux的docker中安装" class="headerlink" title="linux的docker中安装"></a><font size="4px">linux的docker中安装</font></h1><h2 id="ElasticSearch5-6-11"><a href="#ElasticSearch5-6-11" class="headerlink" title="ElasticSearch5.6.11"></a><font size="3px">ElasticSearch5.6.11</font></h2><p>安装镜像 docker pull elasticsearch:5.6.11</p><p>创建本地文件 </p><p>mkdir -p /mydata/elasticsearch/config</p><p>mkdir -p /mydata/elasticsearch/data</p><p>echo “http.host: 0.0.0.0” &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml</p><p>创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run </span><br><span class="line">--name elasticsearch  #容器名</span><br><span class="line">-p 9200:9200 -p 9300:9300 #端口映射 9200暴露外部端口 9300 内部集群交互</span><br><span class="line">-e "discovery.type=single-node" </span><br><span class="line">-e ES_JAVA_OPTS="-Xms128m -Xmx128m" #elasticsearch初始内存和最大内存</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml #内部配置文件挂载到本地</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data #数据存储到本地</span><br><span class="line">-d elasticsearch:5.6.11</span><br></pre></td></tr></table></figure><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@192 /]# docker pull elasticsearch:5.6.11</span><br><span class="line">[root@192 /]# </span><br><span class="line">[root@192 /]# mkdir -p /mydata/elasticsearch/config</span><br><span class="line">[root@192 /]# mkdir -p /mydata/elasticsearch/data</span><br><span class="line">[root@192 /]# echo "http.host: 0.0.0.0" &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml</span><br><span class="line">[root@192 /]# </span><br><span class="line">[root@192 /]# docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms256m -Xmx256m" -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data -d elasticsearch:5.6.11</span><br><span class="line">760ba5e8259c75eb577e493537b632ba4750cfae8f8e14ad361762d2e6a21d2d</span><br><span class="line">[root@192 /]#</span><br><span class="line">[root@192 /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">760ba5e8259c        elasticsearch:5.6.11   "/docker-entrypoint.…"   17 seconds ago      Up 14 seconds       0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   elasticsearch</span><br><span class="line">[root@192 /]# systemctl stop firewalld</span><br><span class="line">[root@192 /]#</span><br></pre></td></tr></table></figure><p>远程访问 <a href="http://192.168.0.101:9200/" target="_blank" rel="noopener">http://192.168.0.101:9200/</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 20200331013255</span><br><span class="line">// http://192.168.0.101:9200/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"efBli3S"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span>: <span class="string">"RmnRPDI-T4G8hOH92bX5wQ"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: &#123;</span><br><span class="line">    <span class="attr">"number"</span>: <span class="string">"5.6.11"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span>: <span class="string">"bc3eef4"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span>: <span class="string">"2018-08-16T15:25:17.293Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span>: <span class="string">"6.6.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span>: <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es集群"><a href="#es集群" class="headerlink" title="es集群"></a><font size="3px">es集群</font></h3><h4 id="es1"><a href="#es1" class="headerlink" title="es1"></a><font size="3px">es1</font></h4><p>/mydata/elasticsearch/config/elasticsearch.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启跨域</span></span><br><span class="line"><span class="string">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群名</span></span><br><span class="line"><span class="string">cluster.name:</span> <span class="string">elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点名</span></span><br><span class="line"><span class="string">node.name:</span> <span class="number">101</span><span class="bullet">-es1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定该节点是否有资格被选举成为master节点，默认是true，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master</span></span><br><span class="line"><span class="string">node.master:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许该节点存储数据(默认开启)</span></span><br><span class="line"><span class="string">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许任何ip访问</span></span><br><span class="line"><span class="string">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过这个ip列表进行节点发现</span></span><br><span class="line"><span class="string">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.0.101:9300",</span> <span class="string">"192.168.0.101:9301"</span><span class="string">,"192.168.0.101:9302"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prevent the "split brain" by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):</span></span><br><span class="line"><span class="comment"># 如果没有这种设置,遭受网络故障的集群就有可能将集群分成两个独立的集群 – 导致脑裂 - 这将导致数据丢失</span></span><br><span class="line"><span class="string">discovery.zen.minimum_master_nodes:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>修改文件名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost mydata]$ mv elasticsearch elasticsearch1</span><br></pre></td></tr></table></figure><p>创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost /]$ docker run --name es1 -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS="-Xms128m -Xmx128m" -v /mydata/elasticsearch1/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /mydata/elasticsearch1/data:/usr/share/elasticsearch/data -d elasticsearch:5.6.11</span><br><span class="line">f3f915ff2443bc850b80831829983e7090c8988d420588266001c82898d216b7</span><br><span class="line">[linux@localhost /]$ </span><br><span class="line">[linux@localhost /]$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">f3f915ff2443        elasticsearch:5.6.11   "/docker-entrypoint.…"   39 seconds ago      Up 33 seconds       0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   es1</span><br><span class="line">[linux@localhost /]$ docker logs f3f915ff2443</span><br><span class="line">ERROR: [1] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br></pre></td></tr></table></figure><p>修改linux进程数限制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost /]$ su</span><br><span class="line">密码：</span><br><span class="line">[root@localhost /]# nano /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=655360</span><br><span class="line">[root@localhost /]# sysctl -p</span><br><span class="line">vm.max_map_count = 655360</span><br></pre></td></tr></table></figure><h4 id="es2"><a href="#es2" class="headerlink" title="es2"></a><font size="3px">es2</font></h4><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost mydata]$ cp -rf elasticsearch1 elasticsearch2</span><br><span class="line">[linux@localhost mydata]$ ls</span><br><span class="line">elasticsearch1  elasticsearch2  kibana  logstash</span><br></pre></td></tr></table></figure><p>config/elasticsearch.yml 仅修改节点名 101-es2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost /]$ docker run --name es2 -p 9201:9200 -p 9301:9300 -e ES_JAVA_OPTS="-Xms128m -Xmx128m" -v /mydata/elasticsearch2/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /mydata/elasticsearch2/data:/usr/share/elasticsearch/data -d elasticsearch:5.6.11</span><br></pre></td></tr></table></figure><h4 id="es3"><a href="#es3" class="headerlink" title="es3"></a><font size="3px">es3</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost mydata]$ cp -rf elasticsearch1 elasticsearch3</span><br><span class="line">[linux@localhost mydata]$ ls</span><br><span class="line">elasticsearch1  elasticsearch2  elasticsearch3 kibana  logstash</span><br></pre></td></tr></table></figure><p>config/elasticsearch.yml 仅修改节点名 101-es3</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[linux@localhost /]$ docker run --name es3 -p 9202:9200 -p 9302:9300 -e ES_JAVA_OPTS="-Xms128m -Xmx128m" -v /mydata/elasticsearch3/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /mydata/elasticsearch3/data:/usr/share/elasticsearch/data -d elasticsearch:5.6.11</span><br></pre></td></tr></table></figure><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a><font size="3px">测试连接</font></h3><p>es2  当选</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/master</span><br><span class="line">4glKS6mYRO2M1aGwMbSWPQ 172.17.0.4 172.17.0.4 101-es2</span><br><span class="line"></span><br><span class="line">GET _cat/health</span><br><span class="line">1585690357 21:32:37 elasticsearch green 3 3 2 1 0 0 0 0 - 100.0%</span><br><span class="line"></span><br><span class="line">GET /_cat/nodes</span><br><span class="line">172.17.0.5 48 93 5 0.32 0.96 0.66 mdi - 101-es3</span><br><span class="line">172.17.0.2 55 93 5 0.32 0.96 0.66 mdi - 101-es1</span><br><span class="line">172.17.0.4 58 93 5 0.32 0.96 0.66 mdi * 101-es2</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a><font size="3px">原理</font></h3><p>一个运行中的 Elasticsearch 实例称为一个 节点，而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，<font color="#f00">集群将会重新平均分布所有的数据</font></p><p>当一个节点被选举成为 <code>主</code>节点时，<font color="#f00">它将负责管理集群范围内的所有变更</font>，例如增加、删除索引，或者增加、删除节点等。 而<font color="#f00">主节点并不需要涉及到文档级别的变更和搜索等操作</font>，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p><p>作为用户，我们可以将请求发送到 集群中的任何节点 ，包括主节点。 每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p><p>当集群中只有一个节点在运行时，意味着会有一个单点故障问题——没有冗余。 你可以在同一个目录内，完全依照启动第一个节点的方式来启动一个新节点（参考安装并运行 Elasticsearch）。多个节点可以共享同一个目录。</p><p> 当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的 cluster.name 配置，它就会自动发现集群并加入到其中。 但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。</p><h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a><font size="3px">分片</font></h4><p>查看分片信息 p主 r副</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/shards</span><br><span class="line"></span><br><span class="line">customer 1 p STARTED 0  162b 172.17.0.4 101-es2</span><br><span class="line">customer 1 r STARTED 0  162b 172.17.0.2 101-es1</span><br><span class="line">customer 3 r STARTED 1 3.3kb 172.17.0.5 101-es3</span><br><span class="line">customer 3 p STARTED 1 3.3kb 172.17.0.2 101-es1</span><br><span class="line">customer 4 p STARTED 0  162b 172.17.0.4 101-es2</span><br><span class="line">customer 4 r STARTED 0  162b 172.17.0.2 101-es1</span><br><span class="line">customer 2 r STARTED 0  162b 172.17.0.4 101-es2</span><br><span class="line">customer 2 p STARTED 0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 0 r STARTED 0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 0 p STARTED 0  162b 172.17.0.2 101-es1</span><br><span class="line">.kibana  0 p STARTED 1 3.2kb 172.17.0.4 101-es2</span><br><span class="line">.kibana  0 r STARTED 1 3.2kb 172.17.0.5 101-es3</span><br></pre></td></tr></table></figure><p>查看集群信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /_cluster/health</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"green"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span>: <span class="number">3</span>, </span><br><span class="line">  "active_primary_shards": 6, #es2 3 es3 1 es1 2</span><br><span class="line">  "active_shards": 12,</span><br><span class="line">  "relocating_shards": 0,</span><br><span class="line">  "initializing_shards": 0,</span><br><span class="line">  "unassigned_shards": 0,</span><br><span class="line">  "delayed_unassigned_shards": 0,</span><br><span class="line">  "number_of_pending_tasks": 0,</span><br><span class="line">  "number_of_in_flight_fetch": 0,</span><br><span class="line">  "task_max_waiting_in_queue_millis": 0,</span><br><span class="line">  "active_shards_percent_as_number": 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>停止es2</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/master</span><br><span class="line">xWuBdPbpSMqkCCbIfY07Mg 172.17.0.2 172.17.0.2 101-es1</span><br><span class="line"></span><br><span class="line">GET /_cat/shards</span><br><span class="line"></span><br><span class="line">customer 1 p STARTED    0  162b 172.17.0.2 101-es1</span><br><span class="line">customer 1 r UNASSIGNED                    </span><br><span class="line">customer 3 r STARTED    1 3.4kb 172.17.0.5 101-es3</span><br><span class="line">customer 3 p STARTED    1 3.4kb 172.17.0.2 101-es1</span><br><span class="line">customer 4 p STARTED    0  162b 172.17.0.2 101-es1</span><br><span class="line">customer 4 r UNASSIGNED                    </span><br><span class="line">customer 2 p STARTED    0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 2 r UNASSIGNED                    </span><br><span class="line">customer 0 r STARTED    0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 0 p STARTED    0  162b 172.17.0.2 101-es1</span><br><span class="line">.kibana  0 p STARTED    1 3.2kb 172.17.0.5 101-es3</span><br><span class="line">.kibana  0 r UNASSIGNED   </span><br><span class="line"></span><br><span class="line">#重新分配</span><br><span class="line">customer 1 r STARTED 0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 1 p STARTED 0  162b 172.17.0.2 101-es1</span><br><span class="line">customer 3 r STARTED 1 3.4kb 172.17.0.5 101-es3</span><br><span class="line">customer 3 p STARTED 1 3.4kb 172.17.0.2 101-es1</span><br><span class="line">customer 4 r STARTED 0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 4 p STARTED 0  162b 172.17.0.2 101-es1</span><br><span class="line">customer 2 p STARTED 0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 2 r STARTED 0  162b 172.17.0.2 101-es1</span><br><span class="line">customer 0 r STARTED 0  162b 172.17.0.5 101-es3</span><br><span class="line">customer 0 p STARTED 0  162b 172.17.0.2 101-es1</span><br><span class="line">.kibana  0 p STARTED 1 3.2kb 172.17.0.5 101-es3</span><br><span class="line">.kibana  0 r STARTED 1 3.2kb 172.17.0.2 101-es1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /_cluster/health</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"cluster_name"</span>: <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"green"</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"number_of_nodes"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"number_of_data_nodes"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"active_primary_shards"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"active_shards"</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">"relocating_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"initializing_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"delayed_unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_pending_tasks"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"number_of_in_flight_fetch"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"task_max_waiting_in_queue_millis"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"active_shards_percent_as_number"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分片原理</p><p><img src="/2020/03/29/ElasticSearch安装及实践/liang.png" alt>)</p><p>当第二个节点加入到集群后，3个 副本分片 将会分配到这个节点上——每个主分片对应一个副本分片。 这意味着当集群内任何一个节点出现问题时，我们的数据都完好无损。</p><p>所有新近被索引的文档都将<strong>会保存在主分片上</strong>，然后被并行的复制到对应的副本分片上。这就保证了我们既可以从主分片又可以从副本分片上获得文档。</p><p>cluster-health 现在展示的状态为 green ，这表示所有6个分片（包括3个主分片和3个副本分片）都在正常运行。</p><h3 id="集群健康"><a href="#集群健康" class="headerlink" title="集群健康"></a><font size="3px">集群健康</font></h3><p>GET /_cluster/health</p><p>status 字段指示着当前集群在总体上是否工作正常。它的三种颜色含义如下： </p><p>green 所有的主分片和副本分片都正常运行。</p><p>yellow 所有的主分片都正常运行，但不是所有的副本分片都正常运行。</p><p>red 有主分片没能正常运行。</p><h4 id="水平扩容"><a href="#水平扩容" class="headerlink" title="水平扩容"></a><font size="3px">水平扩容</font></h4><p>三个节点的集群为了分散负载而对分片进行重新分配</p><p>P0的副本存在R0中，P1的副本存在R1中，P2的副本存在R2中，即使node3 挂了，数据仍完整</p><p><img src="/2020/03/29/ElasticSearch安装及实践/three.png" alt></p><p> 读操作——搜索和返回数据——可以同时被主分片 或 副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。</p><p>在运行中的集群上是可以动态调整副本分片数目的, 我们可以按需伸缩集群.让我们把副本数从默认的 1 增加到 2 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /blogs/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"number_of_replicas"</span> : <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭Node 1 的同时也失去了主分片 1 和 2 ，并且在缺失主分片的时候索引也不能正常工作。 如果此时来检查集群的状况，我们看到的状态将会为 red ：不是所有主分片都在正常工作。</p><p>幸运的是，在其它节点上存在着这两个主分片的完整副本， 所以新的主节点立即将这些分片在 Node 2 和 Node 3 上对应的副本分片提升为主分片， 此时集群的状态将会为 yellow（不是green是因为我们之前设置主分片存在两个副本，而现在只剩一个了） 。 这个提升主分片的过程是瞬间发生的，如同按下一个开关一般</p><h4 id="脑裂问题"><a href="#脑裂问题" class="headerlink" title="脑裂问题"></a><font size="3px">脑裂问题</font></h4><p>集群中不同的节点对于master的选择出现了分歧，出现了多个master竞争，导致主分片和副本的识别也发生了分歧，对一些分歧中的分片标识为了坏片。</p><p><strong>脑裂问题可能的成因 - 主不能工作了就得选</strong> </p><ol><li><p>网络问题：集群间的网络延迟导致一些节点访问不到master，认为master挂掉了从而选举出新的master，并对master上的分片和副本标红，分配新的主分片</p></li><li><p>节点负载：主节点的角色既为master又为data，访问量较大时可能会导致ES停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</p></li><li><p>内存回收：data节点上的ES进程占用的内存较大，引发JVM的大规模内存回收，造成ES进程失去响应。</p></li></ol><p><strong>脑裂问题解决方案</strong></p><ol><li><p>减少误判：discovery.zen.ping_timeout节点状态的响应时间，默认为3s，可以适当调大，如果master在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如6s，discovery.zen.ping_timeout:6），可适当减少误判。</p></li><li><p>选举触发 discovery.zen.minimum_master_nodes:1。</p><p>discovery.zen.minimum_master_nodes（默认是1）：这个参数控制的是，一个节点需要看到的具有master节点资格的最小数量，然后才能在集群中做操作。官方的推荐值是(N/2)+1，其中N是具有master资格的节点的数量（我们的情况是3，因此这个参数设置为2，但对于只有2个节点的情况，设置为2就有些问题了，一个节点DOWN掉后，你肯定连不上2台服务器了，这点需要注意）。</p><p>增大该参数，当该值为2时，我们可以设置master的数量为3，这样，挂掉一台，其他两台都认为主节点挂掉了，才进行主节点选举。</p></li></ol><ol start="3"><li><p>角色分离：即master节点与data节点分离，限制角色</p><p>主节点配置为： node.master: true   ##作为master节点</p><p>​                            node.data: false   ##不作为存储数据节点</p><p>从节点配置为： node.master: false  </p><p>​                            node.data: true</p></li></ol><p><strong>最终考虑到资源有限，解决方案如下：</strong></p><p>增加一台物理机，这样，一共有了三台物理机。在这三台物理机上，搭建了6个ES的节点，三个data节点，三个master节点（每台物理机分别起了一个data和一个master），3个master节点，目的是达到（n/2）+1等于2的要求，这样挂掉一台master后（不考虑data），n等于2，满足参数，其他两个master节点都认为master挂掉之后开始重新选举</p><p><img src="/2020/03/29/ElasticSearch安装及实践/master.png" alt></p><h2 id="Kibana5-6-11"><a href="#Kibana5-6-11" class="headerlink" title="Kibana5.6.11"></a><font size="3px">Kibana5.6.11</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@192 /]# docker pull kibana:5.6.11</span><br><span class="line"></span><br><span class="line">[root@192 /]# docker run --name kibana -v /mydata/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml -p 5601:5601 -d kibana:5.6.11</span><br><span class="line"></span><br><span class="line">25d1bd1a0531c0aec95e7885adf82dc14adbb71df43d4dbc15d6fee7cce58e34</span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint kibana (84808062bec07bb507621f089d0f31d73cc7c3f57402cb6c61444cffddbcc14d):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 5601 -j DNAT --to-destination 172.17.0.3:5601 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line"> (exit status 1)).</span><br><span class="line">[root@192 /]#</span><br></pre></td></tr></table></figure><p>重启docker？？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@192 /]# </span><br><span class="line">[root@192 /]# systemctl restart docker</span><br><span class="line">[root@192 /]# </span><br><span class="line">[root@192 /]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED              STATUS                       PORTS               NAMES</span><br><span class="line">25d1bd1a0531        kibana:5.6.11          "/docker-entrypoint.…"   About a minute ago   Created                                          kibana</span><br><span class="line">760ba5e8259c        elasticsearch:5.6.11   "/docker-entrypoint.…"   21 minutes ago       Exited (143) 7 seconds ago                       elasticsearch</span><br><span class="line">[root@192 /]# docker start 25d1bd1a0531</span><br><span class="line">25d1bd1a0531</span><br><span class="line">[root@192 /]# docker start 760ba5e8259c</span><br><span class="line">760ba5e8259c</span><br><span class="line">[root@192 /]#</span><br></pre></td></tr></table></figure><p>访问 <a href="http://192.168.0.101:5601/" target="_blank" rel="noopener">http://192.168.0.101:5601/</a></p><p><img src="/2020/03/29/ElasticSearch安装及实践/kibana5.png" alt></p><p>修改配置文件 原kibana.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Kibana is served by a back end server. This setting specifies the port to use.</span><br><span class="line"><span class="meta">#</span>server.port: 5601</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span><br><span class="line"><span class="meta">#</span> The default is 'localhost', which usually means remote machines will not be able to connect.</span><br><span class="line"><span class="meta">#</span> To allow connections from remote users, set this parameter to a non-loopback address.</span><br><span class="line"><span class="meta">#</span>server.host: "localhost"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Enables you to specify a path to mount Kibana at if you are running behind a proxy. This only affects</span><br><span class="line"><span class="meta">#</span> the URLs generated by Kibana, your proxy is expected to remove the basePath value before forwarding requests</span><br><span class="line"><span class="meta">#</span> to Kibana. This setting cannot end in a slash.</span><br><span class="line"><span class="meta">#</span>server.basePath: ""</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The maximum payload size in bytes for incoming server requests.</span><br><span class="line"><span class="meta">#</span>server.maxPayloadBytes: 1048576</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The Kibana server's name.  This is used for display purposes.</span><br><span class="line"><span class="meta">#</span>server.name: "your-hostname"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The URL of the Elasticsearch instance to use for all your queries.</span><br><span class="line"><span class="meta">#</span>elasticsearch.url: "http://localhost:9200"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> When this setting's value is true Kibana uses the hostname specified in the server.host</span><br><span class="line"><span class="meta">#</span> setting. When the value of this setting is false, Kibana uses the hostname of the host</span><br><span class="line"><span class="meta">#</span> that connects to this Kibana instance.</span><br><span class="line"><span class="meta">#</span>elasticsearch.preserveHost: true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span><br><span class="line"><span class="meta">#</span> dashboards. Kibana creates a new index if the index doesn't already exist.</span><br><span class="line"><span class="meta">#</span>kibana.index: ".kibana"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The default application to load.</span><br><span class="line"><span class="meta">#</span>kibana.defaultAppId: "discover"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> If your Elasticsearch is protected with basic authentication, these settings provide</span><br><span class="line"><span class="meta">#</span> the username and password that the Kibana server uses to perform maintenance on the Kibana</span><br><span class="line"><span class="meta">#</span> index at startup. Your Kibana users still need to authenticate with Elasticsearch, which</span><br><span class="line"><span class="meta">#</span> is proxied through the Kibana server.</span><br><span class="line"><span class="meta">#</span>elasticsearch.username: "user"</span><br><span class="line"><span class="meta">#</span>elasticsearch.password: "pass"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Enables SSL and paths to the PEM-format SSL certificate and SSL key files, respectively.</span><br><span class="line"><span class="meta">#</span> These settings enable SSL for outgoing requests from the Kibana server to the browser.</span><br><span class="line"><span class="meta">#</span>server.ssl.enabled: false</span><br><span class="line"><span class="meta">#</span>server.ssl.certificate: /path/to/your/server.crt</span><br><span class="line"><span class="meta">#</span>server.ssl.key: /path/to/your/server.key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Optional settings that provide the paths to the PEM-format SSL certificate and key files.</span><br><span class="line"><span class="meta">#</span> These files validate that your Elasticsearch backend uses the same key files.</span><br><span class="line"><span class="meta">#</span>elasticsearch.ssl.certificate: /path/to/your/client.crt</span><br><span class="line"><span class="meta">#</span>elasticsearch.ssl.key: /path/to/your/client.key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Optional setting that enables you to specify a path to the PEM file for the certificate</span><br><span class="line"><span class="meta">#</span> authority for your Elasticsearch instance.</span><br><span class="line"><span class="meta">#</span>elasticsearch.ssl.certificateAuthorities: [ "/path/to/your/CA.pem" ]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> To disregard the validity of SSL certificates, change this setting's value to 'none'.</span><br><span class="line"><span class="meta">#</span>elasticsearch.ssl.verificationMode: full</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of</span><br><span class="line"><span class="meta">#</span> the elasticsearch.requestTimeout setting.</span><br><span class="line"><span class="meta">#</span>elasticsearch.pingTimeout: 1500</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Time in milliseconds to wait for responses from the back end or Elasticsearch. This value</span><br><span class="line"><span class="meta">#</span> must be a positive integer.</span><br><span class="line"><span class="meta">#</span>elasticsearch.requestTimeout: 30000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side</span><br><span class="line"><span class="meta">#</span> headers, set this value to [] (an empty list).</span><br><span class="line"><span class="meta">#</span>elasticsearch.requestHeadersWhitelist: [ authorization ]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten</span><br><span class="line"><span class="meta">#</span> by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.</span><br><span class="line"><span class="meta">#</span>elasticsearch.customHeaders: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.</span><br><span class="line"><span class="meta">#</span>elasticsearch.shardTimeout: 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Time in milliseconds to wait for Elasticsearch at Kibana startup before retrying.</span><br><span class="line"><span class="meta">#</span>elasticsearch.startupTimeout: 5000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Specifies the path where Kibana creates the process ID file.</span><br><span class="line"><span class="meta">#</span>pid.file: /var/run/kibana.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Enables you specify a file where Kibana stores log output.</span><br><span class="line"><span class="meta">#</span>logging.dest: stdout</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set the value of this setting to true to suppress all logging output.</span><br><span class="line"><span class="meta">#</span>logging.silent: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set the value of this setting to true to suppress all logging output other than error messages.</span><br><span class="line"><span class="meta">#</span>logging.quiet: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set the value of this setting to true to log all events, including system usage information</span><br><span class="line"><span class="meta">#</span> and all requests.</span><br><span class="line"><span class="meta">#</span>logging.verbose: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Set the interval in milliseconds to sample system and process performance</span><br><span class="line"><span class="meta">#</span> metrics. Minimum is 100ms. Defaults to 5000.</span><br><span class="line"><span class="meta">#</span>ops.interval: 5000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The default locale. This locale can be used in certain circumstances to substitute any missing</span><br><span class="line"><span class="meta">#</span> translations.</span><br><span class="line"><span class="meta">#</span>i18n.defaultLocale: "en"</span><br></pre></td></tr></table></figure><p>创建 /mydata/kibana/config/kibana.yml</p><p>kibana配置文件挂载到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@192 /]# mkdir -p /mydata/kibana/config</span><br><span class="line">[root@192 /]# cd /mydata/kibana/config</span><br><span class="line">[root@192 config]# nano kibana.yml</span><br><span class="line">bash: nano: 未找到命令</span><br><span class="line">[root@192 config]# yum install nano</span><br><span class="line">[root@192 config]# nano kibana.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>############################################</span><br><span class="line">server.port: 5601</span><br><span class="line"></span><br><span class="line">server.host: "0.0.0.0"</span><br><span class="line"></span><br><span class="line">elasticsearch.url: "http://192.168.0.101:9200"</span><br><span class="line"></span><br><span class="line">elasticsearch.requestTimeout: 90000</span><br><span class="line"></span><br><span class="line">i18n.defaultLocale: "zh-CN"</span><br><span class="line"><span class="meta">#</span>#################################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@192 config]# docker rm 25d1bd1a0531</span><br><span class="line">25d1bd1a0531</span><br><span class="line">[root@192 config]# docker run --name kibana -v /mydata/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml -p 5601:5601 -d kibana:5.6.11</span><br><span class="line">7122d84209e4d082dc6e0e18065567eb0bbfd5e4aa3017b3ff8d8457c217b66b</span><br><span class="line"></span><br><span class="line">[root@192 config]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">7122d84209e4        kibana:5.6.11          "/docker-entrypoint.…"   25 minutes ago      Up 10 minutes       0.0.0.0:5601-&gt;5601/tcp                           kibana</span><br><span class="line">760ba5e8259c        elasticsearch:5.6.11   "/docker-entrypoint.…"   About an hour ago   Up 49 minutes       0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   elasticsearch</span><br><span class="line">[root@192 config]# </span><br><span class="line">[root@192 config]# </span><br><span class="line">[root@192 config]# docker logs 7122d84209e4</span><br><span class="line">"tags":["status","ui settings","info"],"pid":9,"state":"green","message":"Status changed from yellow to green - Ready","prevState":"yellow","prevMsg":"Elasticsearch plugin is yellow"&#125;</span><br></pre></td></tr></table></figure><h2 id="logstash5-6-11"><a href="#logstash5-6-11" class="headerlink" title="logstash5.6.11"></a><font size="3px">logstash5.6.11</font></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@192 config]# docker pull logstash:5.6.11</span><br><span class="line">[root@192 config]# mkdir -p /mydata/logstash</span><br><span class="line">[root@192 config]# cd /mydata/logstash</span><br><span class="line">[root@192 logstash]# nano logstash.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>################################################</span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; ["192.168.0.101:9200"]</span><br><span class="line">    index =&gt; "applog"</span><br><span class="line">    #user =&gt; "elastic"</span><br><span class="line">    #password =&gt; "changeme"</span><br><span class="line">  &#125;</span><br><span class="line">  stdout&#123; codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span>###################################################</span><br><span class="line"></span><br><span class="line">[root@192 logstash]# </span><br><span class="line">[root@192 logstash]# pwd</span><br><span class="line">/mydata/logstash</span><br><span class="line">[root@192 logstash]# docker run --name logstash -p 4560:4560 -v /mydata/logstash/logstash.conf:/etc/logstash.conf --link elasticsearch:elasticsearch -d logstash:5.6.11 logstash -f /etc/logstash.conf</span><br><span class="line">c7473e2145bc7478835f08b08caf8134b126899a4031b78baf5b234c732bd7fa</span><br><span class="line">[root@192 logstash]# </span><br><span class="line">[root@192 logstash]# </span><br><span class="line">[root@192 logstash]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">c7473e2145bc        logstash:5.6.11        "/docker-entrypoint.…"   6 seconds ago       Up 3 seconds        0.0.0.0:4560-&gt;4560/tcp                           logstash</span><br><span class="line">7122d84209e4        kibana:5.6.11          "/docker-entrypoint.…"   About an hour ago   Up 49 minutes       0.0.0.0:5601-&gt;5601/tcp                           kibana</span><br><span class="line">760ba5e8259c        elasticsearch:5.6.11   "/docker-entrypoint.…"   2 hours ago         Up 2 hours          0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   elasticsearch</span><br><span class="line">[root@192 logstash]#</span><br></pre></td></tr></table></figure><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a><font size="4px">linux</font></h1><h2 id="ElasticSearch-存储和检索数据"><a href="#ElasticSearch-存储和检索数据" class="headerlink" title="ElasticSearch 存储和检索数据"></a><font size="3px">ElasticSearch 存储和检索数据</font></h2><p><a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>elasticsearch只能用非root启动</p><p>拷贝至/usr/local/elasticsearch-7.6.1</p><p>编译 elasticsearch.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@192 Downloads]# tar zxvf elasticsearch-7.6.1-linux-x86_64.tar.gz</span><br><span class="line">[root@192 Downloads]# ls</span><br><span class="line">elasticsearch-7.6.1  elasticsearch-7.6.1-linux-x86_64.tar.gz  tomcat-users.xml</span><br><span class="line">[root@192 Downloads]# cp -rf elasticsearch-7.6.1 /usr/local/elasticsearch-7.6.1</span><br><span class="line">[root@192 Downloads]# cd /usr/local/elasticsearch-7.6.1</span><br><span class="line">[root@192 elasticsearch-7.6.1]# ls</span><br><span class="line">bin  config  jdk  lib  LICENSE.txt  logs  modules  NOTICE.txt  plugins  README.asciidoc</span><br><span class="line">[root@192 elasticsearch-7.6.1]# cd config</span><br><span class="line">[root@192 config]# ls</span><br><span class="line">elasticsearch.yml  jvm.options  log4j2.properties  role_mapping.yml  roles.yml  users  users_roles</span><br><span class="line">[root@192 config]# nano elasticsearch.yml</span><br></pre></td></tr></table></figure><p><strong>elasticsearch.yml</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: es-linux</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> ------------------------------------ Node ------------------------------------</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Use a descriptive name for the node:</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">node.name: node-linux</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Add custom attributes to the node:</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> node.attr.rack: r1</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> ----------------------------------- Paths ------------------------------------</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Path to directory where to store the data (separate multiple locations by comma):</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">path.data: /usr/local/elasticsearch-7.6.1/data</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Path to log files:</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">path.logs: /usr/local/elasticsearch-7.6.1/logs</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> ----------------------------------- Memory -----------------------------------</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Lock the memory on startup:</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">bootstrap.system_call_filter: false</span><br><span class="line"><span class="meta">#</span> ---------------------------------- Network -----------------------------------</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Set the bind address to a specific IP (IPv4 or IPv6):</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Set a custom port for HTTP:</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">http.port: 9200</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> --------------------------------- Discovery ----------------------------------</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Pass an initial list of hosts to perform discovery when this node is started:</span><br><span class="line"><span class="meta">#</span> The default list of hosts is ["127.0.0.1", "[::1]"]</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: ["127.0.0.1","192.168.0.100","192.168.0.112"]</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Bootstrap the cluster using an initial set of master-eligible nodes:</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">cluster.initial_master_nodes: ["es-linux"]</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> For more information, consult the discovery and cluster formation module documentation.</span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure><p><strong>jvm.options</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m</span><br><span class="line">-Xmx256m</span><br></pre></td></tr></table></figure><p><strong>创建用户和权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# adduser elasticsearch</span><br><span class="line">[root@192 bin]# passwd elasticsearch</span><br><span class="line"></span><br><span class="line">[root@192 local]# chown -R elasticsearch:elasticsearch elasticsearch-7.6.1</span><br></pre></td></tr></table></figure><p><font color="#f00">ERROR Unable to invoke factory method in class org.apache.logging.log4j.core.appender.RollingFileAppender for element RollingFile</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# yum install -y log4j</span><br></pre></td></tr></table></figure><p><font color="#f00">max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# nano /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">*               soft    nofile          65536</span><br><span class="line">*               hard    nofile          65536</span><br><span class="line">*               soft    nproc           4096</span><br><span class="line">*               hard    nproc           4096</span><br></pre></td></tr></table></figure><p><font color="#f00">max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# su elasticsearch</span><br><span class="line">[elasticsearch@192 bin]$ ./elasticsearch</span><br></pre></td></tr></table></figure><p><a href="http://192.168.0.113:9200/" target="_blank" rel="noopener">http://192.168.0.113:9200/</a></p><h2 id="Logstash-收集数据保存到es"><a href="#Logstash-收集数据保存到es" class="headerlink" title="Logstash 收集数据保存到es"></a><font size="3px">Logstash 收集数据保存到es</font></h2><p><a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a> 解压后进入config文件夹下</p><p>nano  config/logstash-sample.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Sample Logstash configuration for creating a simple</span><br><span class="line"><span class="meta">#</span> Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; ["localhost:9200"]</span><br><span class="line">    index =&gt; "%&#123;[@metadata][beat]&#125;-%&#123;[@metadata][version]&#125;-%&#123;+YYYY.MM.dd&#125;"</span><br><span class="line">    #user =&gt; "elastic"</span><br><span class="line">    #password =&gt; "changeme"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logstash-sample.conf中的内容改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; ["192.168.0.113:9200"]</span><br><span class="line">    index =&gt; "applog"</span><br><span class="line">    #user =&gt; "elastic"</span><br><span class="line">    #password =&gt; "changeme"</span><br><span class="line">  &#125;</span><br><span class="line">  stdout&#123; codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装json_lines</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./logstash-plugin list|grep json-lines</span><br><span class="line">./logstash-plugin install logstash-codec-json_lines</span><br></pre></td></tr></table></figure><h2 id="Kibana-可视化界面"><a href="#Kibana-可视化界面" class="headerlink" title="Kibana 可视化界面"></a><font size="3px">Kibana 可视化界面</font></h2><p><a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a></p><p>config/kibana.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port: 5601</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> To allow connections from remote users</span><br><span class="line">server.host: "192.168.0.100"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> The URLs of the Elasticsearch instances to use for all your queries.</span><br><span class="line">elasticsearch.hosts: ["http://192.168.0.100:9200"]</span><br></pre></td></tr></table></figure><p>虚拟机中ELK全开+本机Intellij项目运行 笔记本完全卡死了。。。故采用树莓派安装ELK</p><h1 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a><font size="3px">树莓派</font></h1><p><a href="https://zhuanlan.zhihu.com/p/23111516" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23111516</a></p><h2 id="elasticsearch-1-0-1"><a href="#elasticsearch-1-0-1" class="headerlink" title="elasticsearch-1.0.1"></a><font size="3px">elasticsearch-1.0.1</font></h2><p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-1-0-1" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-1-0-1</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pi@pi:/usr/local $ cd es1</span><br><span class="line">pi@pi:/usr/local/es1 $ ls</span><br><span class="line">bin  config  lib  LICENSE.txt  NOTICE.txt  README.textile</span><br><span class="line">root@pi:/usr/local/es1# cd config</span><br><span class="line">root@pi:/usr/local/es1/config# nano elasticsearch.yml </span><br><span class="line"><span class="meta">#</span> 集群名字，如果要搭集群的话，同个网段内的Elasticsearch应用集群名取得一样就行了，应用会自动广播组成集群的，非常方便</span><br><span class="line">cluster.name: es-pi</span><br><span class="line"><span class="meta">#</span> 节点的名称，这个应用的节点名字叫啥，用于区分同个集群里的不同节点</span><br><span class="line">node.name: "node-pi"</span><br><span class="line"><span class="meta">#</span> 是否为主节点，一个集群里必须有一个主节点，也只能有一个主节点。当出现一个主节点后，其他master: true的节点都只会成为备用主节点，只有当之前的主节点挂了的时候其他备用的节点才会顶上来。</span><br><span class="line">node.master: true</span><br><span class="line"><span class="meta">#</span> 是否是数据节点，一个集群必须要有至少一个数据节点来存储数据</span><br><span class="line">node.data: true</span><br><span class="line"><span class="meta">#</span> 默认这个集群中每个索引的分片数量。Elasticsearch中的数据都是存储在索引（index）中的（不同于sql数据库中的索引的概念），每个索引会被分成多个分片到不同的数据节点中进行保存。这就是一个分布式文件数据库的概念</span><br><span class="line">index.number_of_shards: 1</span><br><span class="line"><span class="meta">#</span> 默认这个集群中每个分片的副本数量。Elasticsearch中的每个分片都会产生等同于该配置数量的副本，副本分片一般不会与主分片存储在相同的主机节点中，当有主机挂掉的时候，该节点上的分片就丢失了，这时，如果设置了副本分片（相当于备份），那就会保证索引的完整性。如果是单节点没有集群的话，这里配置0就可以了</span><br><span class="line">index.number_of_replicas: 0</span><br><span class="line"><span class="meta">#</span> 节点中数据存储的路径，这条不配也没事，默认存储在Elasticsearch文件夹中</span><br><span class="line"><span class="meta">#</span> path.data: /path/to/data</span><br><span class="line"></span><br><span class="line">root@pi:/usr/local/es1/bin# nano elasticsearch.in.sh</span><br><span class="line">root@pi:/usr/local/es1/bin# </span><br><span class="line">ES_MIN_MEM=128m</span><br><span class="line">ES_MAX_MEM=128m</span><br></pre></td></tr></table></figure><h2 id="Kibana-3-0-0"><a href="#Kibana-3-0-0" class="headerlink" title="Kibana-3.0.0"></a><font size="3px">Kibana-3.0.0</font></h2><p><a href="https://www.elastic.co/cn/downloads/past-releases/kibana-3-0-0" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/past-releases/kibana-3-0-0</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/home/pi# cd /usr/local/kibana</span><br><span class="line">root@pi:/usr/local/kibana# ls</span><br><span class="line">app  build.txtconfig.js  cssfavicon.ico  font  imgindex.html  LICENSE.mdREADME.md  vendor</span><br><span class="line">root@pi:/usr/local/kibana# nano config.js</span><br><span class="line"></span><br><span class="line">elasticsearch: "http://192.168.0.112:9200",</span><br></pre></td></tr></table></figure><p>kibana需要挂载到tomcat或nignx中显示</p><p>整个文件添加到tomcat的webapps文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/tomcat8/webapps# cp -rf /usr/local/kibana /usr/local/tomcat8/webapps</span><br><span class="line">root@pi:/usr/local/tomcat8/webapps# ls</span><br><span class="line">root@pi:/usr/local/tomcat8/webapps# ls</span><br><span class="line">docs  exampleshost-manager  kibana  manager  ROOT</span><br></pre></td></tr></table></figure><p>运行tomcat <a href="http://192.168.0.112:8080/kibana/index.html" target="_blank" rel="noopener">http://192.168.0.112:8080/kibana/index.html</a></p><p><img src="/2020/03/29/ElasticSearch安装及实践/kibanaindex.png" alt></p><p>根据索引查找</p><p><img src="/2020/03/29/ElasticSearch安装及实践/kibana-index.png" alt></p><h2 id="logstash-2-0-0"><a href="#logstash-2-0-0" class="headerlink" title="logstash-2.0.0"></a><font size="3px">logstash-2.0.0</font></h2><p><a href="https://www.elastic.co/cn/downloads/past-releases/logstash-2-0-0" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/past-releases/logstash-2-0-0</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/home/pi/Downloads# tar zxvf logstash-2.0.0.tar.gz</span><br><span class="line">root@pi:/home/pi/Downloads# cp -rf logstash-2.0.0 /usr/local/logstash</span><br><span class="line">root@pi:/home/pi# cd /usr/local/logstash</span><br><span class="line">root@pi:/usr/local/logstash# ls</span><br><span class="line">bin  CHANGELOG.md  CONTRIBUTORS  Gemfile  Gemfile.jruby-1.9.lock  lib  LICENSElogstash.conf  NOTICE.TXT  vendor</span><br><span class="line">root@pi:/usr/local/logstash# cd bin</span><br><span class="line">root@pi:/usr/local/logstash/bin# ls</span><br><span class="line">logstash  logstash.batlogstash.lib.sh  plugin  plugin.bat  rspec  rspec.bat  setup.bat</span><br><span class="line">root@pi:/usr/local/logstash/bin# ./logstash</span><br></pre></td></tr></table></figure><h3 id="运行出错-libjffi-1-2-so"><a href="#运行出错-libjffi-1-2-so" class="headerlink" title="运行出错 libjffi-1.2.so"></a><font size="3px">运行出错 libjffi-1.2.so</font></h3><p><font color="#f00">java.lang.UnsatisfiedLinkError: /usr/local/logstash/vendor/jruby/lib/jni/arm-Linux/libjffi-1.2.so: /usr/local/logstash/vendor/jruby/lib/jni/arm-Linux/libjffi-1.2.so: 无法打开共享对象文件: 没有那个文件或目录</font></p><p><a href="https://discuss.elastic.co/t/logstash-7-x-on-raspberry-pi-4/205348" target="_blank" rel="noopener">https://discuss.elastic.co/t/logstash-7-x-on-raspberry-pi-4/205348</a></p><p><strong>安装texinfo,jruby</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/logstash/bin# apt-get install apt-transport-https jruby -y</span><br><span class="line">root@pi:/usr/local/logstash/bin# apt-get install texinfo build-essential ant git -y</span><br></pre></td></tr></table></figure><p><font color="#f00">perl-base 5.24.1-3+deb9u6 [无候选版本]</font></p><p><strong>安装perl</strong></p><p><a href="https://packages.debian.org/buster/arm64/perl/download" target="_blank" rel="noopener">https://packages.debian.org/buster/arm64/perl/download</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/logstash/bin# nano /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>镜像</span><br><span class="line">deb http://ftp.cn.debian.org/debian buster main </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>升级</span><br><span class="line">root@pi:/usr/local/logstash/bin# apt-get install update</span><br></pre></td></tr></table></figure><p><font color="#f00">W: GPG 错误:<a href="http://ftp.us.debian.org/debian" target="_blank" rel="noopener">http://ftp.us.debian.org/debian</a> stretch Release: 由于没有公钥,无W: GPG 错误:<a href="http://ftp.us.debian.org/debian" target="_blank" rel="noopener">http://ftp.us.debian.org/debian</a> stretch Release: 由于没有公钥,无法验证下列签名 NO_PUBKEY &lt;&lt; key&gt;&gt;</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys &lt;&lt;key&gt;&gt;</span><br></pre></td></tr></table></figure><p><font color="#f00">W: 目标 Packages (main/binary-armhf/Packages) 在 /etc/apt/sources.list.d/elastic-7.x.list:1和 /etc/apt/sources.list.d/elastic-7.x.list:2 中被配置了多次</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/logstash/bin# cd /etc/apt/sources.list.d</span><br><span class="line">root@pi:/etc/apt/sources.list.d# ls</span><br><span class="line">docker.list elastic-7.x.list raspi.list</span><br><span class="line">root@pi:/etc/apt/sources.list.d# rm -r elastic-7.x.list</span><br><span class="line">root@pi:/etc/apt/sources.list.d# sudo apt-get update</span><br><span class="line">root@pi:/etc/apt/sources.list.d#</span><br><span class="line">root@pi:/etc/apt/sources.list.d#</span><br><span class="line">root@pi:/etc/apt/sources.list.d# apt-get install perl</span><br></pre></td></tr></table></figure><p><font color="#f00">依旧perl-base 5.24.1-3+deb9u6 [无候选版本]</font></p><p>手动安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/home/pi/Downloads# wget http://www.cpan.org/src/5.0/perl-5.24.1.tar.gz</span><br><span class="line">root@pi:/home/pi/Downloads# tar zxvf perl-5.24.1.tar.gz</span><br><span class="line">root@pi:/home/pi/Downloads# cp -rf perl-5.24.1 /usr/local/perl-5.24.1</span><br><span class="line">root@pi:/home/pi/Downloads# cd /usr/local/perl-5.24.1</span><br><span class="line">root@pi:/usr/local/perl-5.24.1# ./Configure -des -Dprefix=/usr  </span><br><span class="line">root@pi:/usr/local/perl-5.24.1# make  &amp;&amp; make install</span><br><span class="line">root@pi:/usr/local/perl-5.24.1# perl -v</span><br></pre></td></tr></table></figure><p><strong>编译jffi库</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/<span class="built_in">local</span><span class="comment"># git clone https://github.com/jnr/jffi 9</span></span><br><span class="line">root@pi:/usr/<span class="built_in">local</span><span class="comment"># cd jffi/</span></span><br><span class="line">root@pi:/usr/<span class="built_in">local</span>/jffi<span class="comment"># ant jar</span></span><br></pre></td></tr></table></figure><p><strong>替换jffi</strong></p><p>将/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux下的libjffi-1.2.so 替换为/usr/local/jffi/build/jni/下的libjffi-1.2.so </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/jffi# cd /usr/local/logstash/vendor/jruby/lib/jni/arm-Linux</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux# ls</span><br><span class="line">libjffi-1.2.so</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux# cd /usr/local/jffi/build/jni/</span><br><span class="line">root@pi:/usr/local/jffi/build/jni# ls</span><br><span class="line">com_kenai_jffi_Foreign.h com_kenai_jffi_Foreign_InValidInstanceHolder.h  com_kenai_jffi_ObjectBuffer.hjffi  libjffi-1.2.so</span><br><span class="line">com_kenai_jffi_Foreign_InstanceHolder.h  com_kenai_jffi_Foreign_ValidInstanceHolder.h com_kenai_jffi_Version.hlibffi-arm-linux</span><br><span class="line">root@pi:/usr/local/jffi/build/jni# cd /usr/local/logstash/vendor/jruby/lib/jni/arm-Linux</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux# mv libjffi-1.2.so libjffi-1.2.so.old</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux# cd /usr/local/jffi/build/jni/</span><br><span class="line">root@pi:/usr/local/jffi/build/jni# cp libjffi-1.2.so /usr/local/logstash/vendor/jruby/lib/jni/arm-Linux/libjffi-1.2.so</span><br><span class="line">root@pi:/usr/local/jffi/build/jni# cd /usr/local/logstash/vendor/jruby/lib/jni/arm-Linux</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux# ls</span><br><span class="line">libjffi-1.2.solibjffi-1.2.so.old</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux#</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux#</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux#</span><br><span class="line">root@pi:/usr/local/logstash/vendor/jruby/lib/jni/arm-Linux# cd /usr/local/logstash/bin</span><br><span class="line">root@pi:/usr/local/logstash/bin# ./logstash</span><br><span class="line">io/console not supported; tty will not be manipulated</span><br><span class="line">No command given</span><br><span class="line"></span><br><span class="line">Usage: logstash &lt;command&gt; [command args]</span><br><span class="line">Run a command with the --help flag to see the arguments.</span><br><span class="line">For example: logstash agent --help</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line">  agent - runs the logstash agent</span><br><span class="line">  version - emits version info about this logstash</span><br><span class="line">root@pi:/usr/local/logstash/bin# ls</span><br><span class="line">logstash  logstash.batlogstash.lib.sh  plugin  plugin.bat  rspec  rspec.bat  setup.bat</span><br><span class="line">root@pi:/usr/local/logstash/bin# logstash</span><br><span class="line">bash: logstash：未找到命令</span><br><span class="line">root@pi:/usr/local/logstash/bin# ./logstash --help</span><br><span class="line">io/console not supported; tty will not be manipulated</span><br><span class="line">Usage:</span><br><span class="line">    /bin/logstash agent [OPTIONS]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -f, --config CONFIG_PATH      Load the logstash config from a specific file</span><br><span class="line">                                  or directory.  If a directory is given, all</span><br><span class="line">                                  files in that directory will be concatenated</span><br><span class="line">                                  in lexicographical order and then parsed as a</span><br><span class="line">                                  single config file. You can also specify</span><br><span class="line">                                  wildcards (globs) and any matched files will</span><br><span class="line">                                  be loaded in the order described above.</span><br><span class="line">    -e CONFIG_STRING              Use the given string as the configuration</span><br><span class="line">                                  data. Same syntax as the config file. If no</span><br><span class="line">                                  input is specified, then the following is</span><br><span class="line">                                  used as the default input:</span><br><span class="line">                                  "input &#123; stdin &#123; type =&gt; stdin &#125; &#125;"</span><br><span class="line">                                  and if no output is specified, then the</span><br><span class="line">                                  following is used as the default output:</span><br><span class="line">                                  "output &#123; stdout &#123; codec =&gt; rubydebug &#125; &#125;"</span><br><span class="line">                                  If you wish to use both defaults, please use</span><br><span class="line">                                  the empty string for the '-e' flag.</span><br><span class="line">                                   (default: "")</span><br><span class="line">    -w, --filterworkers COUNT     Sets the number of filter workers to run.</span><br><span class="line">                                   (default: 2)</span><br><span class="line">    -l, --log FILE                Write logstash internal logs to the given</span><br><span class="line">                                  file. Without this flag, logstash will emit</span><br><span class="line">                                  logs to standard output.</span><br><span class="line">    -v                            Increase verbosity of logstash internal logs.</span><br><span class="line">                                  Specifying once will show 'informational'</span><br><span class="line">                                  logs. Specifying twice will show 'debug'</span><br><span class="line">                                  logs. This flag is deprecated. You should use</span><br><span class="line">                                  --verbose or --debug instead.</span><br><span class="line">    --quiet                       Quieter logstash logging. This causes only </span><br><span class="line">                                  errors to be emitted.</span><br><span class="line">    --verbose                     More verbose logging. This causes 'info' </span><br><span class="line">                                  level logs to be emitted.</span><br><span class="line">    --debug                       Most verbose logging. This causes 'debug'</span><br><span class="line">                                  level logs to be emitted.</span><br><span class="line">    -V, --version                 Emit the version of logstash and its friends,</span><br><span class="line">                                  then exit.</span><br><span class="line">    -p, --pluginpath PATH         A path of where to find plugins. This flag</span><br><span class="line">                                  can be given multiple times to include</span><br><span class="line">                                  multiple paths. Plugins are expected to be</span><br><span class="line">                                  in a specific directory hierarchy:</span><br><span class="line">                                  'PATH/logstash/TYPE/NAME.rb' where TYPE is</span><br><span class="line">                                  'inputs' 'filters', 'outputs' or 'codecs'</span><br><span class="line">                                  and NAME is the name of the plugin.</span><br><span class="line">    -t, --configtest              Check configuration for valid syntax and then exit.</span><br><span class="line">    -h, --help                    print help</span><br><span class="line">root@pi:/usr/local/logstash/bin#</span><br></pre></td></tr></table></figure><p><strong>运行logstash脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/logstash/bin# ./logstash -e 'input&#123;stdin&#123;&#125;&#125;output&#123;stdout&#123;codec=&gt;rubydebug&#125;&#125;'</span><br><span class="line">io/console not supported; tty will not be manipulated</span><br><span class="line">Default settings used: Filter workers: 2</span><br><span class="line">Logstash startup completed</span><br><span class="line">Hello World</span><br><span class="line">&#123;</span><br><span class="line">       "message" =&gt; "Hello World",</span><br><span class="line">      "@version" =&gt; "1",</span><br><span class="line">    "@timestamp" =&gt; "2020-03-29T08:28:52.594Z",</span><br><span class="line">          "host" =&gt; "pi"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/logstash/bin#cd /usr/local/logstash</span><br><span class="line">root@pi:/usr/local/logstash# ls</span><br><span class="line">bin  CHANGELOG.md  CONTRIBUTORS  Gemfile  Gemfile.jruby-1.9.lock  lib  LICENSElogstash.conf  NOTICE.TXT  vendor</span><br><span class="line">root@pi:/usr/local/logstash# nano logstash.conf</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; ["192.168.0.112:9200"]</span><br><span class="line">    index =&gt; "applog"</span><br><span class="line">    #user =&gt; "elastic"</span><br><span class="line">    #password =&gt; "changeme"</span><br><span class="line">  &#125;</span><br><span class="line">  stdout&#123; codec =&gt; rubydebug&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开放4560端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/logstash# iptables -I INPUT -i eth0 -p tcp --dport 4560 -j ACCEPT</span><br><span class="line">root@pi:/usr/local/logstash# iptables  -I OUTPUT -o eth0 -p tcp --sport 4560 -j ACCEPT</span><br></pre></td></tr></table></figure><h2 id="创建Maven依赖"><a href="#创建Maven依赖" class="headerlink" title="创建Maven依赖"></a><font size="3px">创建Maven依赖</font></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="logback-spring-xml"><a href="#logback-spring-xml" class="headerlink" title="logback-spring.xml"></a><font size="3px">logback-spring.xml</font></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"APP_NAME"</span> <span class="attr">value</span>=<span class="string">"edu-service"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件保存路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"edu-service"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每天记录日志到文件appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE_PATH&#125;/$&#123;APP_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到logstash的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>192.168.0.100:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志级别   DEBUG-INFO-WARN-ERROR  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="运行SpringBoot"><a href="#运行SpringBoot" class="headerlink" title="运行SpringBoot"></a><font size="4px">运行SpringBoot</font></h1><p><a href="http://192.168.0.112:8080/kibana/index.html#/dashboard/file/logstash.json" target="_blank" rel="noopener">http://192.168.0.112:8080/kibana/index.html#/dashboard/file/logstash.json</a></p><p><img src="/2020/03/29/ElasticSearch安装及实践/kibana.png" alt></p><p>树莓派终端</p><p><img src="/2020/03/29/ElasticSearch安装及实践/logstash.png" alt></p><p>运行一次就两千多个数据</p><p><img src="/2020/03/29/ElasticSearch安装及实践/result.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;elasticsearch kibana logstash ELK 最终选用低版本运行&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://www.runaccepted.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Java" scheme="https://www.runaccepted.com/tags/Java/"/>
    
      <category term="ElasticSearch" scheme="https://www.runaccepted.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>20200229</title>
    <link href="https://www.runaccepted.com/2020/02/29/20200229/"/>
    <id>https://www.runaccepted.com/2020/02/29/20200229/</id>
    <published>2020-02-29T14:26:57.000Z</published>
    <updated>2020-07-04T08:39:57.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">2020-02-29 四年一次的2月29日</blockquote><a id="more"></a><div class="tabs" id="选项卡"><ul class="nav-tabs"><li class="tab"><a href="#选项卡-1">学习</a></li><li class="tab active"><a href="#选项卡-2">生活</a></li><li class="tab"><a href="#选项卡-3">情感</a></li><li class="tab"><a href="#选项卡-4">祖国</a></li></ul><div class="tab-content"><div class="tab-pane" id="选项卡-1"><p>在自己喜欢的专业领域内有所成就</p><p>考不上 - 安心工作 升职</p><p>考上 - 成功毕业 - 晋升 - 为下一个4年后努力</p></div><div class="tab-pane active" id="选项卡-2"><p>不必再依靠父母，而是成为父母的依靠</p><p>这时候的你已经带父母去过远方</p><p>财务自由，有十万之上的存款</p></div><div class="tab-pane" id="选项卡-3"><p>并不强求 - 但得一个心，平淡一生</p><p>和父母有更多的沟通和了解</p><p>和真心的朋友正在聚餐</p></div><div class="tab-pane" id="选项卡-4"><p>希望<strong>中华人民共和国外国人永久居留管理条例</strong>没有通过，中国是中国</p><p>2003年出生，2020年的新冠肺炎高考，2024年毕业的学子一切顺利</p><p>新冠肺炎 – 李文亮，钟南山，武汉，红十字协会，社会的光亮和黑暗都可以放在镜头下</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;2020-02-29 四年一次的2月29日&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.runaccepted.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.runaccepted.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>树莓派安装hexo</title>
    <link href="https://www.runaccepted.com/2020/02/19/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85hexo/"/>
    <id>https://www.runaccepted.com/2020/02/19/树莓派安装hexo/</id>
    <published>2020-02-19T14:45:37.000Z</published>
    <updated>2020-02-26T07:11:58.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">nodejs npm hexo</blockquote><a id="more"></a><h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a><font size="4px">安装nodejs</font></h1><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p><p><img src="/2020/02/19/树莓派安装hexo/nodejs.png" alt></p><p>下载到树莓派，解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tar -xJvf node-v12.16.0-linux-armv7l.tar.xz</span></span><br></pre></td></tr></table></figure><p>复制到目标文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp -rf node-v12.16.0-linux-armv7l /usr/<span class="built_in">local</span>/nodejs</span></span><br></pre></td></tr></table></figure><h1 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a><font size="4px">创建软链接</font></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/nodejs/bin/node /usr/bin/node</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/nodejs/bin/npm /usr/bin/npm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/nodejs/bin/npx /usr/bin/npx</span></span><br></pre></td></tr></table></figure><h1 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a><font size="4px">查看版本</font></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> node -v</span></span><br><span class="line">v12.16.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> npm -v</span></span><br><span class="line">6.13.4</span><br></pre></td></tr></table></figure><h1 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a><font size="4px">下载hexo</font></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;nodejs npm hexo&lt;/blockquote&gt;
    
    </summary>
    
      <category term="树莓派" scheme="https://www.runaccepted.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://www.runaccepted.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="hexo" scheme="https://www.runaccepted.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat8无法进入管理页面</title>
    <link href="https://www.runaccepted.com/2020/02/19/Tomcat8%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2/"/>
    <id>https://www.runaccepted.com/2020/02/19/Tomcat8无法进入管理页面/</id>
    <published>2020-02-19T07:46:23.000Z</published>
    <updated>2020-02-19T07:57:58.759Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Manager-App管理权限设置后仍无法进入页面</blockquote><a id="more"></a><h1 id="配置管理账号密码"><a href="#配置管理账号密码" class="headerlink" title="配置管理账号密码"></a><font size="4px">配置管理账号密码</font></h1><p>当首次打开localhost:8080时，点击Manager App按钮，出现403配置信息</p><p>进入tomcat8/conf/tomcat-users.xml配置账号密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@pi:/usr/local/tomcat8/bin# cd ..</span><br><span class="line">root@pi:/usr/local/tomcat8# cd conf</span><br><span class="line">root@pi:/usr/local/tomcat8/conf# nano tomcat-users.xml</span><br><span class="line"></span><br><span class="line">&lt;role rolename="manager-gui"/&gt;</span><br><span class="line">&lt;user username="tomcat8" password="tomcat8" roles="manager-gui,manager-script"/&gt;</span><br></pre></td></tr></table></figure><h1 id="重启tomcat仍出现403"><a href="#重启tomcat仍出现403" class="headerlink" title="重启tomcat仍出现403"></a><font size="4px">重启tomcat仍出现403</font></h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You are not authorized to view this page.</span><br><span class="line">By default the Host Manager is only accessible from a browser running on the same machine as Tomcat. If you wish to modify this restriction, you'll need to edit the Host Manager's context.xml file.</span><br></pre></td></tr></table></figure><p>编辑tomcat8/webapps/manager/META-INF/context.xml</p><p>tomcat8/webapps/host-manager/META-INF/context.xml</p><p>将其中的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" /&gt; --&gt;</span></span><br></pre></td></tr></table></figure><p>注释掉</p><p>重启tomcat</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Manager-App管理权限设置后仍无法进入页面&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccepted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccepted.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse自动代码补全</title>
    <link href="https://www.runaccepted.com/2020/02/12/Eclipse%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8/"/>
    <id>https://www.runaccepted.com/2020/02/12/Eclipse自动代码补全/</id>
    <published>2020-02-12T11:13:12.000Z</published>
    <updated>2020-07-04T08:27:53.052Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Eclipse操作-同时适用于jsp，xml提示</blockquote><a id="more"></a><p>window-&gt;Preferences-&gt;Java-&gt;Editor-&gt;Content Assist</p><p>auto activaction -&gt; Enable auto activation -&gt; Auto Activation triggers for java “.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,([{”<br><img src="/2020/02/12/Eclipse自动代码补全/eclipse.png" alt></p><p>window-&gt;Preferences-&gt;Java-&gt;Editor-&gt;Content Assist-&gt;Advanced </p><p>Select the proposal kinds contained in the ‘default’ content assist list中全部勾上！</p><p><img src="/2020/02/12/Eclipse自动代码补全/2.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Eclipse操作-同时适用于jsp，xml提示&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccepted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccepted.com/tags/Java/"/>
    
      <category term="Eclipse" scheme="https://www.runaccepted.com/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://www.runaccepted.com/2020/02/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://www.runaccepted.com/2020/02/08/正则表达式/</id>
    <published>2020-02-08T15:04:41.000Z</published>
    <updated>2020-02-08T16:02:35.360Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">描述的是一个规则，匹配一类字符串</blockquote><a id="more"></a><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a><font size="4px">转义字符</font></h1><table>  <tr>    <td>\n</td>    <td>换行符</td>  </tr>  <tr>    <td>\t</td>    <td>制表符</td>  </tr>  <tr>    <td>\\</td>    <td>\</td>  </tr>  <tr>    <td>\^,\$,\.,\(,\),\{,\},\?,\+,\-,\[,\],\|</td>    <td>匹配字符本身</td>  </tr></table><h1 id="标准字符"><a href="#标准字符" class="headerlink" title="标准字符"></a><font size="4px">标准字符</font></h1><table>  <tr>    <td>\d</td>    <td>0-9数字</td>  </tr>  <tr>    <td>\w</td>    <td>字母，数字，下划线 A-Z,a-z,0-9</td>  </tr>  <tr>    <td>\s</td>    <td>空格，制表符，换行符等空白字符的其中任意一个</td>  </tr>  <tr>    <td>.</td>    <td>任意字符</td>  </tr></table><h1 id="内任意字符"><a href="#内任意字符" class="headerlink" title="[] 内任意字符"></a><font size="4px">[] 内任意字符</font></h1><table>  <tr>    <td>[ab5@]</td>    <td>匹配 a\b\c\5\@</td>  </tr>  <tr>    <td>[^abc]</td>    <td>a,b,c以外的任意字符</td>  </tr>  <tr>    <td>[f-k]</td>    <td>f-k之间的任意字母</td>  </tr>  <tr>    <td>[^A-F0-3]</td>    <td>A-F,0-3之外的任意字符</td>  </tr></table><p>包含在中括号中的特殊符号会失去特殊意义，除了^,-之外。</p><p>如<code>[\d.\-+]</code>表示数字，小数点，-，+</p><h1 id="量词"><a href="#量词" class="headerlink" title="量词"></a><font size="4px">量词</font></h1><table>  <tr>    <td>{n}</td>    <td>表达式重复n次</td>  </tr>  <tr>    <td>{m,n}</td>    <td>重复至少m次，至多n次</td>  </tr>  <tr>    <td>{m,}</td>    <td>重复至少m次</td>  </tr>  <tr>    <td>?</td>    <td>0次或1次，{0,1}</td>  </tr>  <tr>    <td>+</td>    <td>至少1次，{1,}</td>  </tr>  <tr>    <td>*</td>    <td>不出现或出现任意次，{0,}</td>  </tr></table><h1 id="字符边界"><a href="#字符边界" class="headerlink" title="字符边界"></a><font size="4px">字符边界</font></h1><table>  <tr>    <td>^</td>    <td>与字符串开始的地方匹配</td>  </tr>  <tr>    <td>$</td>    <td>与字符串结束的地方匹配</td>  </tr>  <tr>    <td>\b</td>    <td>匹配一个单词边界, (前面的字符和后面的字符不全是\w)</td>  </tr></table><h1 id="选择符和分组"><a href="#选择符和分组" class="headerlink" title="选择符和分组"></a><font size="4px">选择符和分组</font></h1><table>  <tr>    <td>|</td>    <td>两个表达式之间 或 关系</td>  </tr>  <tr>    <td>()</td>    <td>括号内的表达式可以作为整体被修饰，()\1表示捕获的整体作为匹配模式 go gogo</td>  </tr>  <tr>    <td>(?:表达式)</td>    <td>抵消()带来的作用</td>  </tr></table><h1 id="预搜索-零宽断言"><a href="#预搜索-零宽断言" class="headerlink" title="预搜索-零宽断言"></a><font size="4px">预搜索-零宽断言</font></h1><table>  <tr>    <td>(?=exp)</td>    <td>断言后匹配exp <br>[a-z]+(?:\d) go222 222本身不计入匹配</td>  </tr>  <tr>    <td>(?<=exp)< td>    <td>断言前匹配exp</td>  </=exp)<></td></tr>  <tr>    <td>(?!exp)</td>    <td>断言后不匹配exp</td>  </tr>  <tr>    <td>(?<!exp)</td>    </td><td>断言前不匹配exp</td>  </tr></table><h1 id="常用表达"><a href="#常用表达" class="headerlink" title="常用表达"></a><font size="4px">常用表达</font></h1><h2 id="电话号码"><a href="#电话号码" class="headerlink" title="电话号码"></a><font size="3px">电话号码</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0\d&#123;2-3&#125;-\d&#123;7,9&#125;</span><br><span class="line">1[356789]\d&#123;11&#125;</span><br></pre></td></tr></table></figure><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a><font size="3px">邮箱</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">12334@qq.com</span><br><span class="line">234@sina.com.cn</span><br><span class="line"></span><br><span class="line">[\w\-]+@[A-Za-z0-9]+(\.[A-Za-z]&#123;2,3&#125;)&#123;1,2&#125;</span><br></pre></td></tr></table></figure><h1 id="java中使用"><a href="#java中使用" class="headerlink" title="java中使用"></a><font size="4px">java中使用</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d"</span>);</span><br><span class="line"></span><br><span class="line">Matcher matcher = pattern.matcher(<span class="string">"aw"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag =matcher.matches();</span><br><span class="line"></span><br><span class="line">System.out.println(flag);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;描述的是一个规则，匹配一类字符串&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccepted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccepted.com/tags/Java/"/>
    
      <category term="正则表达式" scheme="https://www.runaccepted.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java设计模式</title>
    <link href="https://www.runaccepted.com/2020/02/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.runaccepted.com/2020/02/07/java设计模式/</id>
    <published>2020-02-07T10:56:29.000Z</published>
    <updated>2020-02-08T14:50:36.072Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">GOF(Group For Four)23设计模式</blockquote><a id="more"></a><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a><font size="4px">创建型模式</font></h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a><font size="3px">单例模式</font></h2><p>只生成一个实例</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a><font size="3px">饿汉式</font></h3><p>线程安全，调用效率高。不能延时加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">  <span class="comment">//类初始化时，立即加载这个对象加载时，天然是线程安全的</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//方法没有同步，调用效率高</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a><font size="3px">懒汉式</font></h3><p>线程安全，调用效率不高，可以延时加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双重检测锁式"><a href="#双重检测锁式" class="headerlink" title="双重检测锁式"></a><font size="3px">双重检测锁式</font></h3><p>由于JVM底层内部模型原因，偶尔会出问题，不建议使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">      Singleton s;</span><br><span class="line">      <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">        s = instance;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">              s = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          instance = s;</span><br><span class="line">        &#125;   </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态内部类式"><a href="#静态内部类式" class="headerlink" title="静态内部类式"></a><font size="3px">静态内部类式</font></h3><p>线程安全，调用效率高，不能延时加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singletonclass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Singletonclass.instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a><font size="3px">枚举单例</font></h3><p>线程安全，调用效率高，不能延时加载，可以天然的防止反射和反序列化漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line"></span><br><span class="line">  INSTANCE;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><font size="3px">工厂模式</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"奥迪在跑"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Baoma</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"宝马在跑"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现创建者和调用者分离</p><h3 id="简单工厂模式-静态"><a href="#简单工厂模式-静态" class="headerlink" title="简单工厂模式-静态"></a><font size="3px">简单工厂模式-静态</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createCar</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">    Car c = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"奥迪"</span>.equals(type))&#123;</span><br><span class="line">      c = <span class="keyword">new</span> Audi();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"宝马"</span>.equals(type))&#123;</span><br><span class="line">      c = <span class="keyword">new</span> Baoma();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">  <span class="function">Car <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Car audi = <span class="keyword">new</span> AudiFactory().creatCar();</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a><font size="3px">抽象工厂模式</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuxuryEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuxurySeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowSeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFatory</span></span>&#123;</span><br><span class="line">  <span class="function">Engine <span class="title">createEngine</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Seat <span class="title">createSeat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuxuryCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Engine <span class="title">createEngine</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Seat <span class="title">createSeat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a><font size="3px">建造者模式</font></h2><h3 id="Airship"><a href="#Airship" class="headerlink" title="Airship"></a><font size="3px">Airship</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Airship</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String engine;</span><br><span class="line"><span class="keyword">private</span> String escapeTower;</span><br><span class="line"><span class="keyword">private</span> String orbitalModule;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> engine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(String engine)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEscapeTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> escapeTower;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEscapeTower</span><span class="params">(String escapeTower)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.escapeTower = escapeTower;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOrbitalModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orbitalModule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrbitalModule</span><span class="params">(String orbitalModule)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orbitalModule = orbitalModule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Airship [engine="</span> + engine + <span class="string">", escapeTower="</span> + escapeTower + <span class="string">", orbitalModule="</span> + orbitalModule + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AirshipBuilder"><a href="#AirshipBuilder" class="headerlink" title="AirshipBuilder"></a><font size="3px">AirshipBuilder</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirshipBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">builderEngine</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">builderOrbitalModule</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">String <span class="title">builderEscapeTower</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AirshipDirector"><a href="#AirshipDirector" class="headerlink" title="AirshipDirector"></a><font size="3px">AirshipDirector</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirshipDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Airship <span class="title">createAirship</span><span class="params">(AirshipBuilder builder)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CeacreteAirshipBuilder"><a href="#CeacreteAirshipBuilder" class="headerlink" title="CeacreteAirshipBuilder"></a><font size="3px">CeacreteAirshipBuilder</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CeacreteAirshipBuilder</span> <span class="keyword">implements</span> <span class="title">AirshipBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">builderEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"发动机"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">builderOrbitalModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"轨道仓"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">builderEscapeTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"逃逸塔"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CeacreteAirshipDirector"><a href="#CeacreteAirshipDirector" class="headerlink" title="CeacreteAirshipDirector"></a><font size="3px">CeacreteAirshipDirector</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CeacreteAirshipDirector</span> <span class="keyword">implements</span> <span class="title">AirshipDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Airship <span class="title">createAirship</span><span class="params">(AirshipBuilder builder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Airship airship = <span class="keyword">new</span> Airship();</span><br><span class="line">airship.setEngine(builder.builderEngine());</span><br><span class="line">airship.setEscapeTower(builder.builderEscapeTower());</span><br><span class="line">airship.setOrbitalModule(builder.builderOrbitalModule());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> airship;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a><font size="3px">Client</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">AirshipDirector director = <span class="keyword">new</span> CeacreteAirshipDirector();</span><br><span class="line"></span><br><span class="line">Airship airship=director.createAirship(<span class="keyword">new</span> CeacreteAirshipBuilder());</span><br><span class="line"></span><br><span class="line">System.out.println(airship);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a><font size="3px">原型模式</font></h2><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a><font size="4px">结构型模式</font></h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a><font size="3px">适配器模式</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a><font size="3px">桥接模式</font></h2><p>多层继承结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//电脑品牌</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lenvo</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dell</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">computer</span></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> Brand brand;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(Brand brand)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.brand=brand;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line">    brand.sale();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Laptop</span><span class="params">(Brand brand)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(brand);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Computer c = <span class="keyword">new</span> Laptop(<span class="keyword">new</span> Dell());</span><br></pre></td></tr></table></figure><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a><font size="3px">装饰模式</font></h2><p>IO流 BufferInputerStream(new InputStream())</p><p>线程 new Thread(new Runnable())</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Baoma</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//装饰对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> Car car;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SuperCar</span><span class="params">(Car car)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.car = car;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">    car.move();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体装饰对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FlyCar</span><span class="params">(Car car)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(car);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.move();</span><br><span class="line">    fly(); <span class="comment">//添加装饰</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Car car = <span class="keyword">new</span> Baoma();</span><br><span class="line">car.move(); </span><br><span class="line">FlyCar fly = <span class="keyword">new</span> FlyCar(car);</span><br><span class="line">fly.move(); <span class="comment">//添加了功能</span></span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a><font size="3px">组合模式</font></h2><p>树形结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line">  <span class="function">Component <span class="title">getChlid</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a><font size="3px">外观模式</font></h2><p>简单封装</p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a><font size="3px">享元模式</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a><font size="3px">代理模式</font></h2><h3 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a><font size="3px">静态代理模式</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ProxyStar</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyStar</span> <span class="keyword">implements</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Star star;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">proxy</span><span class="params">(Star star)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.star=star;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">    star.sing();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RealStar</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealStar</span> <span class="keyword">implements</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">client</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Star star=<span class="keyword">new</span> RealStar();</span><br><span class="line">    ProxyStar proxy = <span class="keyword">new</span> ProxyStar(star);</span><br><span class="line">    </span><br><span class="line">    proxy.sing();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态代理模式"><a href="#动态代理模式" class="headerlink" title="动态代理模式"></a><font size="3px">动态代理模式</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyStar</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Star star;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyStar</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.star = star;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">method.invoke(star, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Star star = <span class="keyword">new</span> RealStar();</span><br><span class="line"></span><br><span class="line">ProxyStar proxyStar = <span class="keyword">new</span> ProxyStar(star);</span><br><span class="line"></span><br><span class="line">Star proxy = (Star) Proxy.newProxyInstance(</span><br><span class="line">      ClassLoader.getSystemClassLoader(), </span><br><span class="line">      <span class="keyword">new</span> Class[] &#123;Star.class&#125;, </span><br><span class="line">      proxyStar);</span><br><span class="line"></span><br><span class="line">proxy.sing();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a><font size="4px">行为型模式</font></h1><h2 id="模版方法模式"><a href="#模版方法模式" class="headerlink" title="模版方法模式"></a><font size="3px">模版方法模式</font></h2><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a><font size="3px">命令模式</font></h2><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a><font size="3px">迭代器模式</font></h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a><font size="3px">观察者模式</font></h2><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a><font size="3px">中介者模式</font></h2><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a><font size="3px">备忘录模式</font></h2><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a><font size="3px">解释器模式</font></h2><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a><font size="3px">状态模式</font></h2><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a><font size="3px">策略模式</font></h2><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a><font size="3px">职责链模式</font></h2><h3 id="Leave"><a href="#Leave" class="headerlink" title="Leave"></a><font size="3px">Leave</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leave</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String empName;</span><br><span class="line"><span class="keyword">private</span> String reason;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Leave</span><span class="params">(String empName, String reason,<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.empName = empName;</span><br><span class="line"><span class="keyword">this</span>.reason = reason;</span><br><span class="line"><span class="keyword">this</span>.day=day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmpName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpName</span><span class="params">(String empName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empName = empName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getReason</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> reason;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReason</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDay</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.day = day;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a><font size="3px">Leader</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> String name;</span><br><span class="line"><span class="keyword">protected</span> Leader nextLeader;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLeader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Leave leave)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a><font size="3px">Manager</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Leave leave)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (leave.getDay()&lt;<span class="number">3</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">super</span>.name+ <span class="string">"批准请假"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader.handleRequest(leave);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Director"><a href="#Director" class="headerlink" title="Director"></a><font size="3px">Director</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Leave leave)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (leave.getDay()&lt;<span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(name+<span class="string">"批准"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader.handleRequest(leave);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a><font size="3px">Client</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Leader director = <span class="keyword">new</span> Director(<span class="string">"主管"</span>);</span><br><span class="line"></span><br><span class="line">Leader manager = <span class="keyword">new</span> Manager(<span class="string">"经理"</span>);</span><br><span class="line"></span><br><span class="line">manager.setNextLeader(director);</span><br><span class="line"></span><br><span class="line">Leave leave = <span class="keyword">new</span> Leave(<span class="string">"员工"</span>, <span class="string">"过年"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">manager.handleRequest(leave);</span><br><span class="line"></span><br><span class="line">Leave leave2 = <span class="keyword">new</span> Leave(<span class="string">"员工"</span>, <span class="string">"过年"</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">manager.handleRequest(leave2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a><font size="3px">访问者模式</font></h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;GOF(Group For Four)23设计模式&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.runaccepted.com/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.runaccepted.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.runaccepted.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构03-栈和队列</title>
    <link href="https://www.runaccepted.com/2020/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://www.runaccepted.com/2020/02/07/数据结构-栈和队列/</id>
    <published>2020-02-07T06:57:07.000Z</published>
    <updated>2021-02-07T17:52:08.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">栈[顺序栈，链栈]，队列[循环队列，链式队列]</blockquote><a id="more"></a><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a><font size="4px">栈</font></h1><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a><font size="4px">队列</font></h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;栈[顺序栈，链栈]，队列[循环队列，链式队列]&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://www.runaccepted.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.runaccepted.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构02-线性表</title>
    <link href="https://www.runaccepted.com/2020/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://www.runaccepted.com/2020/02/07/数据结构-线性表/</id>
    <published>2020-02-07T06:56:56.000Z</published>
    <updated>2021-02-07T17:46:18.297Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">顺序表，单链表，双链表，循环链式，静态链表</blockquote><a id="more"></a><h1 id="线性表总览"><a href="#线性表总览" class="headerlink" title="线性表总览"></a><font size="4px">线性表总览</font></h1><p><img src="/2020/02/07/数据结构-线性表/zong.png" alt></p><p>数据结构三要素——逻辑结构、数据的运算、存储结构(物理结构)</p><p>存储结构不同，运算的实现方式不同</p><h2 id="线性表的定义-逻辑结构"><a href="#线性表的定义-逻辑结构" class="headerlink" title="线性表的定义-逻辑结构"></a><font size="3px">线性表的定义-逻辑结构</font></h2><p>Linear List：</p><p>Line 线 Eg:Sky line baby 天线宝宝</p><p>List 列表 Eg:a list of 一连串、一系列的</p><p>线性表是具有<font color="#f00">相同</font>数据类型的<em>n</em>(<em>n</em>≥0)个<font color="#f00">数据元素</font>的<font color="#f00">有限</font>序列，其中<em>n</em>为表长，当<em>n</em> = 0时线性表是一个空表。若用<em>L</em>命名线性表，则其一般表示为 L = (a<sub>1</sub>, a<sub>2</sub>, … , a<sub>i</sub>, a<sub>i+1</sub>, … , a<sub>n</sub>)</p><ul><li>每个数据元素所占空间一样大</li><li>有次序</li><li>所有的整数按递增次序排列，因长度不定，不是线性表</li></ul><p>几个概念:</p><ul><li>a<sub>i</sub> 是线性表中的“第i个”元素线性表中的位序</li><li>a<sub>1</sub>是表头元素；a<sub>n</sub> 是表尾元素。 除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继</li></ul><h2 id="线性表的基本操作-数据的运算"><a href="#线性表的基本操作-数据的运算" class="headerlink" title="线性表的基本操作-数据的运算"></a><font size="3px">线性表的基本操作-数据的运算</font></h2><p>为什么要实现对数据结构的基本操作?</p><ol><li>团队合作编程，你定义的数据结构要让别人能够很方便的使用(封装)</li><li>将常用的操作/运算封装成函数，避免重复工作，降低出错风险</li></ol><p><font color="#f00">Tips:比起学会“How”， 更重要的是想明白 “Why”</font></p><p><strong>从无到有，从有到无</strong></p><p><code>InitList(&amp;L)</code>:初始化表。构造一个空的线性表L，分配内存空间。 </p><p><code>DestroyList(&amp;L)</code>:销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</p><p><strong>增、删</strong></p><p><code>ListInsert(&amp;L,i,e)</code>:插入操作。在表L中的第i个位置上插入指定元素e。 </p><p><code>ListDelete(&amp;L,i,&amp;e)</code>:删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</p><p><strong>改、查(“改’之前也要“查’)</strong></p><p> <code>LocateElem(L,e)</code>:按值查找操作。在表L中查找具有给定关键字值的元素。 </p><p><code>GetElem(L,i)</code>:按位查找操作。获取表L中第i个位置的元素的值。</p><p><strong>其他常用操作:</strong> </p><p><code>Length(L)</code>:求表长。返回线性表L的长度，即L中数据元素的个数。 </p><p><code>PrintList(L)</code>:输出操作。按前后顺序输出线性表L的所有元素值。 </p><p><code>Empty(L)</code>:判空操作。若L为空表，则返回true，否则返回false。</p><p><strong>Tips:</strong></p><ol><li>对数据的操作(记忆思路) —— 创销、增删改查</li><li>C语言函数的定义 —— &lt;返回值类型&gt; 函数名 (&lt;参数1类型&gt; 参数1，&lt;参数2类型&gt; 参数2，……) </li><li>实际开发中，可根据实际需求定义其他的基本操作 </li><li>函数名和参数的形式、命名都可改变(Reference:严蔚敏版《数据结构》) 一一Key:命名要有可读性 </li><li>什么时候要传入引用“&amp;” —— 对参数的修改结果需要“带回来”</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p><img src="/2020/02/07/数据结构-线性表/linear.png" alt></p><h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a><font size="4px">顺序表</font></h1><h2 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a><font size="3px">顺序表的定义</font></h2><p>线性表是具有相同数据类型的n(n≥0)个数据元素的有限序列 L = (a<sub>1</sub>, a<sub>2</sub>, … , a<sub>i</sub>, a<sub>i+1</sub>, … , a<sub>n</sub>)</p><p>顺序表—用顺序存储的方式实现线性表顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p><p>线性表L逻辑结构：a<sub>1</sub>—a<sub>2</sub>—a<sub>3</sub>—a<sub>4</sub>—a<sub>5</sub></p><table><thead><tr><th>内存</th><th>线性表第一个元素的存放位置是LOC (L)  LOC-location</th></tr></thead><tbody><tr><td>a<sub>1</sub></td><td>LOC(L)</td></tr><tr><td>a<sub>2</sub></td><td>LOC(L)+数据元素的大小</td></tr><tr><td>a<sub>3</sub></td><td>LOC(L)+数据元素的大小*2</td></tr><tr><td>a<sub>4</sub></td><td>LOC(L)+数据元素的大小*3</td></tr><tr><td>a<sub>5</sub></td><td>LOC(L)+数据元素的大小*4</td></tr></tbody></table><p>ElemType 就是顺序表中存放的数据元素类型</p><p>如何知道一个数据元素大小</p><p> C语言 <code>sizeof(ElemType)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> num; <span class="comment">//号数 </span></span><br><span class="line">  <span class="keyword">int</span> people; <span class="comment">//人数</span></span><br><span class="line">&#125; Customer;</span><br></pre></td></tr></table></figure><p>sizeof(int) = 4B </p><p>sizeof(Customer) = 8B</p><h2 id="线性表的实现"><a href="#线性表的实现" class="headerlink" title="线性表的实现"></a><font size="3px">线性表的实现</font></h2><h3 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a><font size="3px">静态分配</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义最大长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="comment">//用静态的“数组”存放数据元素 </span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="comment">//顺序表的当前长度</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义(静态分配方式)</span></span><br><span class="line"><span class="comment">//Sq:sequence —— 顺序，序列</span></span><br></pre></td></tr></table></figure><p>给各个数据元素分配连续的存储空间，大小为MaxSize*sizeof(ElemType)</p><h4 id="实战"><a href="#实战" class="headerlink" title="实战"></a><font size="3px">实战</font></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data[MaxSize];</span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">  <span class="comment">//所有数据元素设置为默认初始值,不然内存中会有遗留的“脏数据”</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MaxSize;i++)&#123;</span><br><span class="line">    L.data[i]=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//顺序表初始长度为0</span></span><br><span class="line">  L.length=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//声明一个顺序表</span></span><br><span class="line">  SqList L;</span><br><span class="line">  <span class="comment">//初始化顺序表</span></span><br><span class="line">  InitList(L);</span><br><span class="line">  <span class="comment">//遍历</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,L.data[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分配</p><table><thead><tr><th>内存</th><th></th></tr></thead><tbody><tr><td>data[0]</td><td>1. 内存中分配存储顺序表L的空间。包括：MaxSize*sizeof(ElemType)和存储length的空间</td></tr><tr><td>data[1]</td><td>2. 把各个数据元素的值设为默认值(可省略)</td></tr><tr><td>data[2]</td><td></td></tr><tr><td>data[3]</td><td></td></tr><tr><td>data[4]</td><td></td></tr><tr><td>data[5]</td><td></td></tr><tr><td>data[6]</td><td></td></tr><tr><td>data[7]</td><td></td></tr><tr><td>data[8]</td><td></td></tr><tr><td>data[9]</td><td></td></tr><tr><td>length</td><td>3. length值为0</td></tr></tbody></table><p>Q：如果“数组”存满了怎么办?</p><p>A：可以放弃治疗，顺序表的表长刚开始确定后就无法更改(存储空间是静态的) </p><p>思考：如果刚开始就声明一个很大的内存空间呢?存在什么问题?</p><p>A：浪费空间</p><h3 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a><font size="3px">动态分配</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序表的初始长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="comment">//指示动态分配数组的指针</span></span><br><span class="line">    ElemType *data;</span><br><span class="line">    <span class="comment">//顺序表的最大容量</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">    <span class="comment">//顺序表的当前长度</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125; SeqList;<span class="comment">//顺序表的类型定义(动态分配方式)</span></span><br></pre></td></tr></table></figure><p>Key：动态申请和释放内存空间需要强制转型为你定义的数据元素类型指针</p><ul><li><p>C - malloc、free函数</p><p>头文件 <code>#include&lt;stdlib.h&gt;</code></p><p><code>L.data = (ElemType *) malloc (sizeof(ElemType) * InitSize);</code></p><p>malloc 函数会申请一整片连续的存储空间</p><p>返回一个指针，需要强制转型为你定义的数据元素类型指针</p><p>返回的是申请的空间的首地址</p></li><li><p>C++ - new、delete 关键字</p></li></ul><h4 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a><font size="3px">实战</font></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span></span>&#123;</span><br><span class="line">  L.data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(InitSize*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  L.length=<span class="number">0</span>;</span><br><span class="line">  L.MaxSize = InitSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSize</span><span class="params">(SeqList &amp;L,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *p = L.data;</span><br><span class="line">  L.data = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>((L.MaxSize+len)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="comment">//数据复制到新区域 - 时间开销大</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">    L.data[i]=p[i];</span><br><span class="line">  &#125;</span><br><span class="line">  L.MaxSize=L.MaxSize+len;</span><br><span class="line">  <span class="comment">//释放原来的内存空间</span></span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  SeqList L;</span><br><span class="line">  InitList(L);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//扩容</span></span><br><span class="line">  IncreaseSize(L,<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分配</p><p><img src="/2020/02/07/数据结构-线性表/dong.png" alt></p><h2 id="顺序表的特点"><a href="#顺序表的特点" class="headerlink" title="顺序表的特点"></a><font size="3px">顺序表的特点</font></h2><ol><li><p>随机访问，即可以在 O(1) 时间内找到第 i 个元素。<code>data[i-1]：静态分配、动态分配都一样</code></p></li><li><p>存储密度高，每个节点只存储数据元素 </p></li><li><p>拓展容量不方便(即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高) </p></li><li><p>插入、删除操作不方便，需要移动大量元素</p><p>静态分配、动态分配都一样</p></li></ol><h2 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a><font size="3px">顺序表的基本操作</font></h2><h3 id="插入-O-n"><a href="#插入-O-n" class="headerlink" title="插入-O(n)"></a><font size="3px">插入-O(n)</font></h3><p>用存储位置的相邻来体现数据元素之间的逻辑关系</p><p><code>ListInsert(&amp;L,i,e)</code>:插入操作。在表L中的第i个位置上插入指定元素e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> data[MaxSize];</span><br><span class="line">  <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length+<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//存储空间已满</span></span><br><span class="line">  <span class="keyword">if</span>(L.length&gt;=MaxSize)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//第i个元素及之后的元素后移</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=L.length;j&gt;=i;j--)&#123;</span><br><span class="line">    L.data[j]=L.data[j<span class="number">-1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  L.data[i<span class="number">-1</span>]=e;</span><br><span class="line">  L.length++;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题规模 n = L.length (表长)</p><ul><li><p>最好情况：新元素插入到表尾，不需要移动元素i = n+1，循环0次；最好时间复杂度 = O(1)</p></li><li><p>最坏情况：新元素插入到表头，需要将原有的n个元素全都向后移动 i = 1，循环n次；最坏时间复杂度 = O(n);</p></li><li><p>平均情况：假设新元素插入到任何一个位置的概率相同，即 i = 1,2,3, … , length+1 的概率都是 p = 1/(n+1)</p><p>i=1，循环n次；i=2时，循环n-1次；i=3，循环n-2次 ……i=n+1时，循环0次</p><p>平均循环次数=np+(n-1)p+(n-2)p+……+1⋅p=[n(n+1)/2]*[1/(n+1)] =n/2 </p><p>平均时间复杂度 = O(n)</p></li></ul><h3 id="删除-O-n"><a href="#删除-O-n" class="headerlink" title="删除-O(n)"></a><font size="3px">删除-O(n)</font></h3><p><code>ListDelete(&amp;L,i,&amp;e)</code> 删除操作。删除表L中第i个位置的元素， 并用e返回删除元素的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,<span class="keyword">int</span> &amp;e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  e = L.data[i<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;L.length;j++)&#123;</span><br><span class="line">    L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">  &#125;</span><br><span class="line">  L.length--;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  SqList L;</span><br><span class="line">  InitList(L);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> e = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span>(ListDelete(L,<span class="number">3</span>,e))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"已删除第3个元素，删除的元素值为%d\n"</span>,e);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除失败!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题规模 n = L.length (表长)</p><ul><li><p>最好情况：删除表尾元素，不需要移动其他元素 i = n，循环 0 次;最好时间复杂度 = O(1)</p></li><li><p>最坏情况：删除表头元素，需要将后续的 n-1 个元素全都向前移动 i = 1，循环 n-1 次;最坏时间复杂度 = O(n);</p></li><li><p>平均情况：假设删除任何一个元素的概率相同，即 i=1,2,3, … , length 的概率都是 p = 1/n</p><p> i=1,循环n-1次；i=2时,循环n-2次；i=3，循环n-3次 ……i=n时，循环0次</p><p>平均循环次数 = (n-1)p + (n-2)p + …… + 1⋅p = [n(n-1)/2]*(1/n) = (n-1)/2</p><p>平均时间复杂度 = O(n)</p></li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a><font size="3px">查找</font></h3><h4 id="按位查找-O-1"><a href="#按位查找-O-1" class="headerlink" title="按位查找-O(1)"></a><font size="3px">按位查找-O(1)</font></h4><p><code>GetElem(L,i)</code>:按位查找操作。获取表L中第i个位置的元素的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态分配</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义最大长度</span></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SqList L, <span class="keyword">int</span> i)</span></span>&#123; </span><br><span class="line">  <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态分配</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *data;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125; SeqList;</span><br><span class="line"> </span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(SeqList L, <span class="keyword">int</span> i)</span></span>&#123; </span><br><span class="line">   <span class="comment">//和访问普通数组的方法一样</span></span><br><span class="line">   <span class="keyword">return</span> L.data[i<span class="number">-1</span>]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(1)</p><p>由于顺序表的各个数据元素在内存中连续存放,因此可以根据起始地址和数据元素大小立即找到第i个元素–“随机存取”</p><h4 id="按值查找-O-n"><a href="#按值查找-O-n" class="headerlink" title="按值查找-O(n)"></a><font size="3px">按值查找-O(n)</font></h4><p><code>LocateElem(L,e)</code>:按值查找操作。在表L中查找具有给定关键字值的元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序表的初始长度</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="comment">//指示动态分配数组的指针</span></span><br><span class="line">    ElemType *data;</span><br><span class="line">  <span class="comment">//顺序表的最大容量</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">  <span class="comment">//顺序表的当前长度</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125; SeqList; <span class="comment">//顺序表的类型定义(动态分配方式)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在顺序表L中查找第一个元素值等于e的元素，并返回其位序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SeqList L,ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.data[i]==e)&#123;</span><br><span class="line">      <span class="comment">//数组下标为i的元素值等于e，返回其位序i+1</span></span><br><span class="line">      <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//退出循环，说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本数据类型:int、char、double、 float 等可以直接用运算符“==”比较</p><p>Q：结构类型的数据元素也这样吗?</p><p>A：C语言中，结构体的比较不能直接用 “== ”，需要依次对比各个分量来判断两个结构体是否相等</p><p>Tips:</p><p>《数据结构》考研初试中，手写代码可以直接用“==”，无论 ElemType 是基本数据类型还是结构类型</p><p>手写代码主要考察学生是否能理解算法思想，不会严格要求代码完全可运行 有的学校考《C语言程序设计》，那么，也许就要语法严格一些</p><p><strong>时间复杂度</strong></p><ul><li><p>最好情况：目标元素在表头，循环1次;最好时间复杂度 = O(1)</p></li><li><p>最坏情况：目标元素在表尾，循环 n 次;最坏时间复杂度 = O(n);</p></li><li><p>平均情况：假设目标元素出现在任何一个位置的概率相同，都是1/n</p><p>目标元素在第1位，循环1次；在第2位，循环2次；…… ;在第n位，循环n次</p><p>平均循环次数=1(1/n)+2(1/n)+3(1/n)+……+n(1/n)=[n(n+1)/2]*(1/n)=(n+1)/2 </p><p>平均时间复杂度=O(n)</p></li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p><img src="/2020/02/07/数据结构-线性表/shunzong.png" alt></p><p><img src="/2020/02/07/数据结构-线性表/chazong.png" alt></p><p><img src="/2020/02/07/数据结构-线性表/shuncha.png" alt></p><h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a><font size="4px">单链表</font></h1><h2 id="什么是单链表"><a href="#什么是单链表" class="headerlink" title="什么是单链表"></a><font size="3px">什么是单链表</font></h2><p>逻辑结构：线性表 a<sub>1</sub> - a<sub>2</sub> - a<sub>3</sub> - a<sub>4</sub></p><table><thead><tr><th></th><th>顺序存储</th><th>链式存储</th></tr></thead><tbody><tr><td></td><td>顺序表 L-&gt;a<sub>1</sub> - a<sub>2</sub> - a<sub>3</sub> - a<sub>4</sub></td><td>单链表 L-&gt;a<sub>1</sub> -&gt; a<sub>2</sub> -&gt; a<sub>3</sub> -&gt; a<sub>4</sub></td></tr><tr><td>优点</td><td>可随机存取，存储密度高</td><td>不要求大片连续空间，改变容量方便</td></tr><tr><td>缺点</td><td>要求大片连续空间，改变容量不方便</td><td>不可随机存取，要耗费一定空间存放指针</td></tr><tr><td></td><td><img src="/2020/02/07/数据结构-线性表/shunxub.png" alt></td><td><img src="/2020/02/07/数据结构-线性表/danlianb.png" alt></td></tr></tbody></table><h2 id="代码定义单链表"><a href="#代码定义单链表" class="headerlink" title="代码定义单链表"></a><font size="3px">代码定义单链表</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  <span class="comment">//数据域</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="comment">//指针域</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加一个新的结点:在内存中申请一个结点所需空间，并用指针p指向这个结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">p</span> = (<span class="title">struct</span> <span class="title">LNode</span> *) <span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">LNode</span>));</span></span><br></pre></td></tr></table></figure><p>别名：typedef关键字  <code>typedef &lt;数据类型&gt; &lt;别名&gt;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> zhangsan;</span><br><span class="line">zhangsan x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>故重命名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  <span class="comment">//数据域</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="comment">//指针域</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> <span class="title">LNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">LinkList</span>;</span></span><br><span class="line">LNode *p = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br></pre></td></tr></table></figure><p>单链表定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><p>要表示一个单链表时，只需声明一个头指针 L ，指向单链表的第一个结点<code>LNode *L</code>,<code>LinkList L</code></p><p><code>LNode *L</code> 强调返回的是一个结点</p><p>``LinkList L `强调是一个单链表</p><h2 id="单链表的实现"><a href="#单链表的实现" class="headerlink" title="单链表的实现"></a><font size="3px">单链表的实现</font></h2><h3 id="带头结点"><a href="#带头结点" class="headerlink" title="带头结点"></a><font size="3px">带头结点</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  <span class="comment">//头结点</span></span><br><span class="line">  L = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//头结点之后暂时还没有结点</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LinkList L;</span><br><span class="line">  InitList(L);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存</p><p><img src="/2020/02/07/数据结构-线性表/tou.png" alt></p><h3 id="不带头结点"><a href="#不带头结点" class="headerlink" title="不带头结点"></a><font size="3px">不带头结点</font></h3><p>不带头结点，写代码更麻烦。对第一个数据结点和后续数据结点的处理需要用不同的代码逻辑。对空表和非空表的处理需要用不同的代码逻辑</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L=<span class="literal">NULL</span>;<span class="comment">//防止脏数据</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LinkList L;</span><br><span class="line">  InitList(L);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存</p><p><img src="/2020/02/07/数据结构-线性表/notou.png" alt></p><h2 id="单链表基本操作"><a href="#单链表基本操作" class="headerlink" title="单链表基本操作"></a><font size="3px">单链表基本操作</font></h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a><font size="3px">插入</font></h3><h4 id="按位序插入-带头结点-O-n"><a href="#按位序插入-带头结点-O-n" class="headerlink" title="按位序插入(带头结点)-O(n)"></a><font size="3px">按位序插入(带头结点)-O(n)</font></h4><p><code>ListInsert(&amp;L,i,e)</code>:插入操作。在表L中的第i个位置上插入指定元素e. 找到第 i-1 个结点,将新结点插入其后</p><p>头结点可以看作 “第0个”结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">  LNode *p;</span><br><span class="line">  <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">  <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//L指向头结点，头结点第0个结点(不存数据)</span></span><br><span class="line">  p=L;</span><br><span class="line">  <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//i值不合法</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  <span class="comment">//后插</span></span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>平均时间复杂度:O(n)</strong></p><p>i=1时，p指向头结点</p><p><img src="/2020/02/07/数据结构-线性表/weicha.png" alt></p><p>i=5时,插在表尾</p><p><img src="/2020/02/07/数据结构-线性表/i=5.png" alt></p><p>如果 i = 6(i&gt;Lengh)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i值不合法</span></span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按位序插入-不带头结点-O-n"><a href="#按位序插入-不带头结点-O-n" class="headerlink" title="按位序插入(不带头结点)-O(n)"></a><font size="3px">按位序插入(不带头结点)-O(n)</font></h4><p>不存在 “第0个” 结点，因此i=1时，需要特殊处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">    LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    <span class="comment">//初始化时L=NULL</span></span><br><span class="line">    s-&gt;next = L;</span><br><span class="line">    L=s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">  LNode *p;</span><br><span class="line">  <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">  <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//L指向第1个结点</span></span><br><span class="line">  p=L;</span><br><span class="line">  <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//i值不合法</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  <span class="comment">//后插</span></span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>i=1时，</p><p><img src="/2020/02/07/数据结构-线性表/i=1.png" alt></p><p>如果i &gt; 1，后续逻辑和带 头结点的一样</p><h4 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a><font size="3px">指定结点的后插操作</font></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode *p,ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  <span class="comment">//内存分配失败</span></span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p=&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/数据结构-线性表/houcha.png" alt></p><h4 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a><font size="3px">指定结点的前插操作</font></h4><ol><li><p>从头指针开始遍历，求p前插结点 – O(n)</p><p><code>bool InsertPriorNode(LinkList L,LNode *p,ElemType e)</code></p></li><li><p>p后插结点，交换两者数据 – O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode *p,ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  <span class="comment">//内存分配失败</span></span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//s插到p后</span></span><br><span class="line">  s-&gt;next = p=&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="comment">//交换两者值</span></span><br><span class="line">  s-&gt;data = p-&gt;data;</span><br><span class="line">  p-&gt;data = e;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>王道书版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode *p,LNode *s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>||s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;next = p=&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="comment">//交换两者值</span></span><br><span class="line">  ElemType temp = p-&gt;data;</span><br><span class="line">  p-&gt;data = s-&gt;data;</span><br><span class="line">  s-&gt;data = temp;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a><font size="3px">删除</font></h3><h4 id="按位序删除-带头结点-O-n"><a href="#按位序删除-带头结点-O-n" class="headerlink" title="按位序删除(带头结点)-O(n)"></a><font size="3px">按位序删除(带头结点)-O(n)</font></h4><p><code>ListDelete(&amp;L,i,&amp;e)</code>:删除操作。</p><p>删除表L中第i个位置的元素，并用e返回删除元素的值。</p><p>找到 i-1个结点，将其指针指向第i+1个结点，并释放第i个结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">  LNode *p;</span><br><span class="line">  <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">  <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//L指向第1个结点</span></span><br><span class="line">  p=L;</span><br><span class="line">  <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//i值不合法</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//第i-1结点后已无结点</span></span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//q记录被删除结点</span></span><br><span class="line">  LNode *q = p-&gt;next;</span><br><span class="line">  <span class="comment">//e返回元素值</span></span><br><span class="line">  e = q-&gt;data;</span><br><span class="line">  <span class="comment">//q结点从链表中断开</span></span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="comment">//释放结点存储空间</span></span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最坏、平均时间复杂度：O(n)  最好时间复杂度：O(1)</p><h4 id="按位序删除-不带头结点"><a href="#按位序删除-不带头结点" class="headerlink" title="按位序删除(不带头结点)"></a><font size="3px">按位序删除(不带头结点)</font></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">    LNode *s = L;</span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *p;</span><br><span class="line">  <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">  p = L;</span><br><span class="line">  <span class="comment">//same</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指定结点的删除"><a href="#指定结点的删除" class="headerlink" title="指定结点的删除"></a><font size="3px">指定结点的删除</font></h4><p><code>bool DeleteNode(LNodwe *p)</code>删除结点p，需要修改其前驱结点的next指针</p><ol><li><p>传入头指针，循环寻找p的前驱结点 </p></li><li><p>偷天换日-后插后交换值-O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode *p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//q指向p后继</span></span><br><span class="line">  LNode *q = p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="comment">//交换p，q的值</span></span><br><span class="line">    p-&gt;data = p-&gt;next-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>单链表的局限性：无法逆向检索，有时候不太方便</p><h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a><font size="3px">查找</font></h3><p><font color="#f00">本节只探讨“带头结点”的情况</font></p><h4 id="按位查找-O-n"><a href="#按位查找-O-n" class="headerlink" title="按位查找 -O(n)"></a><font size="3px">按位查找 -O(n)</font></h4><p><code>GetElem(L,i)</code>:按位查找操作。获取表L中第i个位置的元素的值。 平均时间复杂度:O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LinkList L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *p;</span><br><span class="line">  <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">  p=L;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>王道版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">GetElem</span><span class="params">(LinkList L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"> LNode *p = L-&gt;next;</span><br><span class="line">  <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按值查找-O-n-1"><a href="#按值查找-O-n-1" class="headerlink" title="按值查找 - O(n)"></a><font size="3px">按值查找 - O(n)</font></h4><p><code>LocateElem(L,e)</code>:按值查找操作。在表L中查找具有给定关键字值的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode* <span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="comment">//从第1个结点开始查找数据</span></span><br><span class="line">  LNode *p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=e)&#123;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求表长-O-n"><a href="#求表长-O-n" class="headerlink" title="求表长 - O(n)"></a><font size="3px">求表长 - O(n)</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">  LNode *p = L;</span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立链表"><a href="#建立链表" class="headerlink" title="建立链表"></a><font size="3px">建立链表</font></h3><p>如果给你很多个数据元素(ElemType)，要把它们存到一个单链表里边，怎么做?</p><ol><li>初始化一个单链表</li><li>每次取一个数据元素，插入到表尾/表头</li></ol><p>头插法、尾插法：核心就是初始化操作、指定结点的后插操作</p><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a><font size="3px">尾插法</font></h4><p>初始化链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  <span class="comment">//头结点</span></span><br><span class="line">  L = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  <span class="comment">//内存不足，分配失败</span></span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//头结点之后暂时还没有结点</span></span><br><span class="line">  L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  LinkList L;</span><br><span class="line">  InitList(L);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尾插法建立单链表：初始化单链表，设置变量 length 记录链表长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">While 循环 &#123; </span></span><br><span class="line"><span class="comment">  每次取一个数据元素 e;</span></span><br><span class="line"><span class="comment">  ListInsert (L, length+1, e) 插到尾部;</span></span><br><span class="line"><span class="comment">  length++; </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入-每次都从头开始之后遍历，时间复杂度为O(n*n)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">  LNode *p;</span><br><span class="line">  <span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">  <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">  <span class="comment">//L指向头结点，头结点第0个结点(不存数据)</span></span><br><span class="line">  p=L;</span><br><span class="line">  <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">  <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//i值不合法</span></span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  <span class="comment">//后插</span></span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立尾指针，后插</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">TailInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  LNode *s,*r;</span><br><span class="line">  r = L;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">999</span>)&#123;</span><br><span class="line">    s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    r-&gt;next = s;</span><br><span class="line">    <span class="comment">//r指向新的表尾结点-永远保持r指向最后一个结点</span></span><br><span class="line">    r = s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">  &#125;</span><br><span class="line">  r-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a><font size="3px">头插法</font></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">While 循环 &#123; </span></span><br><span class="line"><span class="comment">每次取一个数据元素 e;</span></span><br><span class="line"><span class="comment">InsertNextNode (L, e);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode *p,ElemType e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  <span class="comment">//内存分配失败</span></span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;data = e;</span><br><span class="line">  s-&gt;next = p-&gt;next;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头插法-逆置链表数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逆向建立单链表</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123; </span><br><span class="line">  LNode *s;</span><br><span class="line">  <span class="keyword">int</span> x; </span><br><span class="line">  <span class="comment">//创建头结点</span></span><br><span class="line">  L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">  <span class="comment">////初始为空链表</span></span><br><span class="line">  L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x); </span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">    s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">    s-&gt;data=x;</span><br><span class="line">    s-&gt;next=L-&gt;next;</span><br><span class="line">    L-&gt;next=s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> L; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不带头结点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逆向建立单链表</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123; </span><br><span class="line">  LNode *s;</span><br><span class="line">  <span class="keyword">int</span> x; </span><br><span class="line">  <span class="comment">//创建头结点</span></span><br><span class="line">  L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">  <span class="comment">////初始为空链表</span></span><br><span class="line">  L=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x); </span><br><span class="line">  <span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">    s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); </span><br><span class="line">    s-&gt;data=x;</span><br><span class="line">    s-&gt;next=L-&gt;next;</span><br><span class="line">    L=s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> L; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p><img src="/2020/02/07/数据结构-线性表/lianzong.png" alt></p><p><img src="/2020/02/07/数据结构-线性表/dancha.png" alt></p><p><img src="/2020/02/07/数据结构-线性表/danzhao.png" alt></p><h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a><font size="4px">双链表</font></h1><p>单链表:无法逆向检索，有时候不太方便</p><p>双链表:可进可退，存储密度更低一丢丢</p><p><img src="/2020/02/07/数据结构-线性表/shuang.png" alt></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><font size="3px">初始化</font></h2><p>表头结点的 prior指向 NULL; 表尾结点的 next 指向 NULL</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DlinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitDLinkList</span><span class="params">(DlinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">  L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">  l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判空带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  DLinkList L;</span><br><span class="line">  InitDLinkList(L);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/数据结构-线性表/shuangtou.png" alt></p><h2 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a><font size="3px">插入</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *p,DNode *s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>||s==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    p-&gt;next-&gt;prior = s;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;prior = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a><font size="3px">删除</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode *p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  DNode *q = p-&gt;next;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  <span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    q-&gt;next-&gt;prior = p;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除整个链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryList</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(L-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    DeleteNextNode(L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(L);</span><br><span class="line">  L=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a><font size="3px">遍历</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后向遍历</span></span><br><span class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span>)&#123; </span><br><span class="line">  <span class="comment">//对结点p做相应处理，如打印 </span></span><br><span class="line">  p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历</span></span><br><span class="line"><span class="keyword">while</span> (p!=<span class="literal">NULL</span>)&#123; </span><br><span class="line">  <span class="comment">//对结点p做相应处理 </span></span><br><span class="line">  p = p-&gt;prior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前向遍历(跳过头结 点)</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt; prior != <span class="literal">NULL</span>)&#123; </span><br><span class="line">  <span class="comment">//对结点p做相应处理 </span></span><br><span class="line">  p = p-&gt;prior; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双链表不可随机存取，按位查找、按值查找操作都只能用遍历的方式实现。时间复杂度 O(n)</p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p><img src="/2020/02/07/数据结构-线性表/shuangzong.png" alt></p><h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a><font size="4px">循环链表</font></h1><h2 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a><font size="3px">循环单链表</font></h2><p><img src="/2020/02/07/数据结构-线性表/xundan.png" alt><br><img src="/2020/02/07/数据结构-线性表/xunshuang.png" alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===============初始化=================</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//头结点next指向头结点</span></span><br><span class="line">  L-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================判空==================</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next == L)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//============判断结点p是否为循环单链表的表尾结点============</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isTail</span><span class="params">(LinkList L,LNode *p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next == L)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/数据结构-线性表/xundndai.png" alt></p><p>从头结点找到尾部，时间复杂度为O(n)</p><p>从尾部找到头部，时间复杂度为O(1)</p><p>很多时候对链表的操作都是在头部或尾部，可以让L指向表尾元素 (插入、删除时可能需要修改L)</p><h2 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a><font size="3px">循环双链表</font></h2><p><img src="/2020/02/07/数据结构-线性表/shuangdan.png" alt><br><img src="/2020/02/07/数据结构-线性表/shuangxun.png" alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DlinkList;</span><br><span class="line"><span class="comment">//===============初始化====================</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitDLinkList</span><span class="params">(DlinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//头结点prior指向头结点</span></span><br><span class="line">  L-&gt;prior = L;</span><br><span class="line">  <span class="comment">//头结点的next指向头结点</span></span><br><span class="line">  l-&gt;next = L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//================判空==================</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L-&gt;next == L)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//============判断结点p是否为循环单链表的表尾结点============</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isTail</span><span class="params">(DLinkList L,LNode *p)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;next == L)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/07/数据结构-线性表/emptyshuang.png" alt></p><h3 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a><font size="3px">插入</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *p,DNode *s)</span></span>&#123;</span><br><span class="line">  <span class="comment">//s插入到p之后</span></span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  p-&gt;next-&gt;prior = s;</span><br><span class="line">  s-&gt;prior = p;</span><br><span class="line">  p-&gt;next = s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a><font size="3px">删除</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNextDNode</span><span class="params">(DNode *p)</span></span>&#123;</span><br><span class="line">  DNode *q = p-&gt;next;</span><br><span class="line">  p-&gt;next = q-&gt;next;</span><br><span class="line">  q-&gt;next-&gt;prior = p;</span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p><img src="/2020/02/07/数据结构-线性表/xunzong.png" alt></p><h1 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a><font size="4px">静态链表</font></h1><h2 id="什么是静态链表"><a href="#什么是静态链表" class="headerlink" title="什么是静态链表"></a><font size="3px">什么是静态链表</font></h2><p>单链表：各个结点在内存中星罗棋布、散落天涯。</p><p>静态链表：分配一整片连续的内存空间，各个结点集中安置。用数组的方式实现的链表</p><p>初始化静态链表: 把a[0]的next设为-1，把其他结点的 next 设为一个特殊值用来表示结点空闲，如 -2</p><p><img src="/2020/02/07/数据结构-线性表/jing.png" alt></p><p>每个数据元素4B，每个游标4B(每个结点共 8B) 设起始地址为 addr，e1的存放地址为 addr + 8*2</p><h2 id="用代码定义一个静态链表"><a href="#用代码定义一个静态链表" class="headerlink" title="用代码定义一个静态链表"></a><font size="3px">用代码定义一个静态链表</font></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">  <span class="comment">//数据元素</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="comment">//下一个元素数组下标</span></span><br><span class="line">  <span class="keyword">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//可用SLinkList定义一个长度为MaxSize的Node型数组</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">SLinkList</span>[<span class="title">MaxSize</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testLinkList</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//数组a作为静态链表</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">a</span>[<span class="title">MaxSize</span>];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>王道</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  ElemType data;</span><br><span class="line">  <span class="keyword">int</span> next;</span><br><span class="line">&#125;SLinkList[MaxSize];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSLinkList</span><span class="params">()</span></span>&#123;</span><br><span class="line">  SLinkList a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SLinkList a ——相当于定义了一个长度为 MaxSize 的 Node型数组</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><font size="3px">基本操作</font></h2><h3 id="查找-2"><a href="#查找-2" class="headerlink" title="查找"></a><font size="3px">查找</font></h3><p>从头结点出发挨个往后遍历结点</p><h3 id="插入位序为-i-的结点"><a href="#插入位序为-i-的结点" class="headerlink" title="插入位序为 i 的结点"></a><font size="3px">插入位序为 i 的结点</font></h3><ol><li>找到一个空的结点，存入数据元素 </li><li>从头结点出发找到位序为 i-1 的结点 </li><li>修改新结点的 next</li><li>修改 i-1 号结点的 next</li></ol><h3 id="删除某个结点"><a href="#删除某个结点" class="headerlink" title="删除某个结点"></a><font size="3px">删除某个结点</font></h3><ol><li>从头结点出发找到前驱结点 </li><li>修改前驱结点的游标 </li><li>被删除结点 next 设为 -2</li></ol><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p>优点：增、删 操作不需要大量移动元素 </p><p>缺点：不能随机存取，只能从头结点开始依次往后查 找;容量固定不可变</p><p>适用场景:</p><ol><li>不支持指针的低级语言;</li><li>数据元素数量固定不变的场景(如操作系统的文件分配表FAT)</li></ol><h1 id="顺序表-V-S-链表"><a href="#顺序表-V-S-链表" class="headerlink" title="顺序表 V.S.链表"></a><font size="4px">顺序表 V.S.链表</font></h1><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a><font size="3px">逻辑结构</font></h2><p>都属于线性表，都是线性结构</p><h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a><font size="3px">物理结构</font></h2><p>都属于线性表，都是线性结构</p><table><thead><tr><th></th><th>顺序表</th><th>链表</th></tr></thead><tbody><tr><td>优点</td><td>支持随机存取、存储密度高</td><td>离散的小空间分配方便，改变容量方便</td></tr><tr><td>缺点</td><td>大片连续空间分配不方便，改变容量不方便</td><td>不可随机存取，存储密度低</td></tr></tbody></table><h2 id="数据的运算-创销增删改查"><a href="#数据的运算-创销增删改查" class="headerlink" title="数据的运算-创销增删改查"></a><font size="3px">数据的运算-创销增删改查</font></h2><table><thead><tr><th></th><th>顺序表</th><th>链表</th></tr></thead><tbody><tr><td>创</td><td>需要预分配大片连续空间。 若分配空间过小，则之后不方便拓展容量;若分配空间过大，则浪费内存资源<br>静态分配：静态数组 - 容量不可变<br>动态分配：动态数组(malloc、free) - 容量可变，扩容时间代价高</td><td>只需分配一个头结点(也可以不要头结点，只声明一个头指针)，之后方便拓展</td></tr><tr><td>销</td><td>修改 L.length = 0<br>静态分配：静态数组 - 系统自动回收空间<br>动态分配：动态数组(malloc、free) - 手动free</td><td>依次删除各个 结点(free)</td></tr><tr><td>增删</td><td>插入/删除元素要将后续元素都后移/前移<br>时间复杂度 O(n)，时间开销主要来自移动元素<br>若数据元素很大，则移动的时间代价很高</td><td>插入/删除元素只需修改指针即可<br>时间复杂度 O(n)，时间开销主要来自查找目标元素<br>查找元素的时间代价更低</td></tr><tr><td>查</td><td>按位查找:O(1)<br>按值查找:O(n) 若表内元素有序，可在 O(log2n) 时间内找到</td><td>按位查找:O(n)<br>按值查找:O(n)</td></tr><tr><td>弹性(可扩容)</td><td>静态不可扩容，动态可扩容</td><td>可扩容</td></tr></tbody></table><p>表长难以预估、经常要增加/删除元素 ——链表 </p><p>表长可预估、查询(搜索)操作较多 ——顺序表</p><h2 id="如何抉择"><a href="#如何抉择" class="headerlink" title="如何抉择"></a><font size="3px">如何抉择</font></h2><p>请描述顺序表和链表的… 实现线性表时，用顺序表还是链表好?</p><p>顺序表和链表的逻辑结构都是线性结构，都属于线性表。 但是二者的存储结构不同，顺序表采用顺序存储…(特点，带来的优点缺点)；链表采用链式存储…(特点、导致的优缺点)。 </p><p>由于采用不同的存储方式实现，因此基本操作的实现效率也不同。当初始化时…;当插入一个数据元素时…;当删除一个数据元素时…;当查找一个数据元素时…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;顺序表，单链表，双链表，循环链式，静态链表&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://www.runaccepted.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.runaccepted.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构01-绪论</title>
    <link href="https://www.runaccepted.com/2020/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BB%AA%E8%AE%BA/"/>
    <id>https://www.runaccepted.com/2020/02/07/数据结构-绪论/</id>
    <published>2020-02-07T06:56:46.000Z</published>
    <updated>2021-02-07T17:56:05.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">数据结构三要素，时间复杂度，空间复杂度</blockquote><a id="more"></a><h1 id="数据结构在学什么"><a href="#数据结构在学什么" class="headerlink" title="数据结构在学什么?"></a><font size="4px">数据结构在学什么?</font></h1><ul><li><p>如何用程序代码把现实世界的问题信息化</p><blockquote class="blockquote-center">人类社会的发展,迄今经历了和经历着三个浪潮:第一次浪潮为农业阶段,从约1万年前开始;第二次浪潮为工业阶段,从17世纪末开始;第三次浪潮为正在到来的<font color="#f00">信息化</font>阶段。—《第三次浪潮(1980版)》,阿尔文·托夫勒</blockquote><p>金钱：纸币-&gt;支付宝余额，微信余额</p><p>买饭：排队-&gt;在线点菜</p><p>交友：面对面交流-&gt;微信，QQ</p><p><font color="#f00"><strong>如何在计算机中表示这些信息???</strong></font></p><p>金额：浮点型变量(float)</p><p>取号：队列</p><p>微博关注：图，树</p></li><li><p>如何用计算机高效地处理这些信息从而创造价值</p><p><img src="/2020/02/07/数据结构-绪论/408.png" alt></p></li></ul><blockquote class="blockquote-center">唯一可以确定的是，明天会使我们所有人大吃一惊。 —— 阿尔文·托夫勒 (The sole certainty is that tomorrow will surprise us all.)</blockquote><p><strong>人类文明 ：</strong></p><p>农业革命【学会农耕，从“动物” 到“人类”】</p><p>工业革命【出现枪炮与机械，导致古文明灭亡】</p><p>信息革命【高度信息化的世界，导致???】</p><h1 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a><font size="4px">数据结构基本概念</font></h1><h2 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a><font size="3px">知识总览</font></h2><p>​    <img src="/2020/02/07/数据结构-绪论/jiben.png" alt></p><h2 id="什么是数据"><a href="#什么是数据" class="headerlink" title="什么是数据?"></a><font size="3px">什么是数据?</font></h2><p>数据: 数据是<font color="#f00">信息</font>的载体，是描述客观事物属性的数、字符及所有<font color="#f00">能输入到计算机中并被计算机程序识别(二进制0/1)</font>和处理的符号的集合。数据是计算机程序加工的原料。</p><p><img src="/2020/02/07/数据结构-绪论/shujuyuansu.png" alt></p><h2 id="数据元素、数据项"><a href="#数据元素、数据项" class="headerlink" title="数据元素、数据项"></a><font size="3px">数据元素、数据项</font></h2><p><strong>数据元素</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。 一个数据元素可由若干<strong>数据项</strong>组成，数据项是构成数据元素的不可分割的最小单位。</p><p><font color="#f00">要根据实际的业务需求来确定什么是数据元素、什么是数据项</font></p><p><img src="/2020/02/07/数据结构-绪论/jishu.png" alt> <img src="/2020/02/07/数据结构-绪论/shuju.png" alt></p><h2 id="数据结构、数据对象"><a href="#数据结构、数据对象" class="headerlink" title="数据结构、数据对象"></a><font size="3px">数据结构、数据对象</font></h2><p>结构-各个元素之间的关系</p><p><strong>沙</strong>- 左右结构，<strong>粥</strong>- 左中右结构，<strong>曼</strong>- 上中下结构</p><p><strong>数据结构</strong>是相互之间存在一种或多种特定关系的数据元素的集合。 </p><p><strong>数据对象</strong>是具有相同性质的数据元素的集合，是数据的一个子集。</p><p>例如：</p><p>数据结构：某个特定门店的排队顾客信息和它们之间的关系</p><p>数据对象：全国所有门店的排队顾客信息</p><h2 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a><font size="3px">数据结构的三要素</font></h2><p><img src="/2020/02/07/数据结构-绪论/sanyaosu.png" alt></p><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a><font size="3px">逻辑结构</font></h3><p>数据元素之间的逻辑关系</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a><font size="3px">集合</font></h4><p>各个元素同属一个集合，别无其他关系</p><h4 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a><font size="3px">线性结构</font></h4><p>数据元素之间是一对一的关系。 除了第一个元素，所有元素都有唯一前驱; 除了最后一个元素，所有元素都有唯一后继</p><h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a><font size="3px">树形结构</font></h4><p>数据元素之间是一对多的关系</p><h4 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a><font size="3px">图结构</font></h4><p>数据元素之间是多对多的关系</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a><font size="3px">存储结构</font></h3><p>如何用计算机表示数据元素的逻辑关系</p><p>确定一种存储结构，就意味着在计算机中表示出数据的逻辑结构。存储结构不同，也会导致运算的具体实现不同。 确定了存储结构，才能实现数据结构</p><p>理解两点:</p><ol><li><p>若采用顺序存储，则各个数据元素在物理上必须是连续的;若采用非顺序存储，则各个数据元素在物理上可以是离散的。</p></li><li><p>数据的存储结构会影响存储空间分配的方便程度(有人想插队)，数据的存储结构会影响对数据运算的速度(找第三个人)</p></li></ol><h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a><font size="3px">顺序结构</font></h4><p>把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p><p><img src="/2020/02/07/数据结构-绪论/linear.png" alt> <img src="/2020/02/07/数据结构-绪论/linear2.png" alt></p><h4 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a><font size="3px">链式结构</font></h4><p>逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。</p><p><img src="/2020/02/07/数据结构-绪论/list.png" alt></p><h4 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a><font size="3px">索引结构</font></h4><p>在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项 的一般形式是(关键字，地址)</p><p><img src="/2020/02/07/数据结构-绪论/index.png" alt></p><h4 id="散列结构"><a href="#散列结构" class="headerlink" title="散列结构"></a><font size="3px">散列结构</font></h4><p>根据元素的关键字直接计算出该元素的存储地址，又称哈希(Hash)存储</p><h3 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a><font size="3px">数据的运算</font></h3><p>施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的， 指出运算的功能;运算的实现是针对存储结构的，指出运算的具体操作步骤。</p><p>逻辑结构——线性结构(队列)</p><p>结合现实需求定义队列这种逻辑结构的运算:</p><p>995-996-997-998</p><ol><li>队头元素出队;  叫995</li><li>新元素入队;  取999</li><li>输出队列长度;</li></ol><p>运算实现取999号，顺序结构和链式结构不同：</p><p><img src="/2020/02/07/数据结构-绪论/shun.png" alt></p><h2 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a><font size="3px">数据类型、抽象数据类型</font></h2><p><strong>数据类型</strong>是一个值的集合和定义在此集合上的一组操作的总称。 </p><ol><li><p>原子类型。其值不可再分的数据类型。 </p><ul><li><p><strong>bool</strong> 类型：</p><p>值的范围:true、false</p><p>可进⾏行行操作:与、或、⾮非…</p></li><li><p><strong>int</strong> 类型</p><p>值的范围:-2147483648 ~ 2147483647</p><p>可进⾏行行操作:加、减、乘、除、模运算…</p></li></ul></li><li><p>结构类型。其值可以再分解为若干成分(分量)的数据类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个具体的结构类型，表示排队顾客信息。 </span></span><br><span class="line"><span class="comment">//根据具体业务需求来确定值的范围，可进行的操作</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Customer</span>&#123;</span></span><br><span class="line">  <span class="comment">//值的范围:num(1~9999)、people(1~12) </span></span><br><span class="line">  <span class="comment">//可进行操作:如“拼桌”运算，把人数相加合并</span></span><br><span class="line">  <span class="keyword">int</span> num; <span class="comment">//号数 </span></span><br><span class="line">  <span class="keyword">int</span> people; <span class="comment">//人数 </span></span><br><span class="line">  ...... <span class="comment">//其他必要的信息</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>抽象数据类型(Abstract Data Type，<strong>ADT</strong>)是抽象数据组织及与之相关的操作。用数学化的语言定义数据的逻辑结构、定义运算。 与具体的实现无关。</p><p>定义一个ADT，就是定义了数据的逻辑结构、数据的运算。 也就是定义了一个数据结构。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p>在探讨一种数据结构时: </p><ol><li>定义逻辑结构(数据元素之间的关系) </li><li>定义数据的运算(针对现实需求，应该对这种逻辑结构进行什么样的运算) </li><li>确定某种存储结构，实现数据结构，并实现一些对数据结构的基本运算</li></ol><p><img src="/2020/02/07/数据结构-绪论/daotu.png" alt></p><h1 id="算法基本概念"><a href="#算法基本概念" class="headerlink" title="算法基本概念"></a><font size="4px">算法基本概念</font></h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a><font size="3px">总览</font></h2><p><img src="/2020/02/07/数据结构-绪论/sfa.png" alt></p><h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法?"></a><font size="3px">什么是算法?</font></h2><p>程序 = 数据结构 + 算法</p><p>数据结构：如何把现实世界的问题信息化，将信息存进计算机。同时还要如何处理这些信息，以实现对数据结构的基本操作</p><p>算法：如何处理这些信息，以解决实际问题</p><table><thead><tr><th>海底捞排队系统的数据结构——队列</th><th>要解决的现实问题——带小孩的顾客优先就餐</th></tr></thead><tbody><tr><td>已经实现的基本操作: <br>1. 队头元素出队;  <br>2. 新元素入队;<br>3. 输出队列长度; <br>4. 交换第 i 号和第 j 号的位置</td><td>设计一个算法:<br>- 执行基本操作2(新顾客取号) <br>- 依次对比前一桌信息，如果前一桌没有小孩,<br>则使用基本操作4交换位置。</td></tr></tbody></table><h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a><font size="3px">算法的特性</font></h2><h3 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a><font size="3px">有穷性</font></h3><p>一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。 </p><p><font color="#f00">算法必须是有穷的，而程序可以是无穷的</font></p><p>算法：用有限步骤解决某个特定的问题</p><p>程序：海底捞的排队系统就是一个程序，可以永不停歇</p><p>设计一个算法，解决一个特定的问题——带小孩的顾客优先就餐</p><h3 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a><font size="3px">确定性</font></h3><p>算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。 </p><h3 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a><font size="3px">可行性</font></h3><p>算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。 </p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a><font size="3px">输入</font></h3><p>一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><font size="3px">输出</font></h3><p>一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量。</p><h2 id="“好”算法的特质"><a href="#“好”算法的特质" class="headerlink" title="“好”算法的特质"></a><font size="3px"><strong>“</strong>好<strong>”</strong>算法的特质</font></h2><p>设计算法时要尽量追求的目标</p><h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a><font size="3px">正确性</font></h3><p>算法应能够正确地解决求解问题</p><h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a><font size="3px">可读性</font></h3><p>算法应具有良好的可读性，以帮助人们理解。</p><p><font color="#f00">算法可以用伪代码描述，甚至用文字描述， 重要的是要“无歧义”地描述出解决问题的步骤</font></p><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a><font size="3px">健壮性</font></h3><p>输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</p><h3 id="高效率与低存储量需求"><a href="#高效率与低存储量需求" class="headerlink" title="高效率与低存储量需求"></a><font size="3px">高效率与低存储量需求</font></h3><p>执行速度快。 时间复杂度低</p><p>不费内存。 空间复杂度低</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><font size="3px">总结</font></h2><p><img src="/2020/02/07/数据结构-绪论/sfhuigu.png" alt></p><h1 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a><font size="4px">算法效率的度量</font></h1><p>时间复杂度：时间开销与问题规 模 n 之间的关系</p><p>空间复杂度：空间开销(内存开销)与问题规模 n 之间的关系</p><h2 id="如何评估算法时间开销"><a href="#如何评估算法时间开销" class="headerlink" title="如何评估算法时间开销?"></a><font size="3px">如何评估算法时间开销?</font></h2><p>让算法先运行，事后统计运行时间?</p><p>存在什么问题?</p><ul><li>和机器性能有关，如:超级计算机v.s.单片机</li><li>和编程语言有关，越高级的语言执行效率越低</li><li>和编译程序产生的机器指令质量有关</li><li>有些算法是不能事后再统计的，如:导弹控制算法</li></ul><p>算法时间复杂度</p><p>事前预估算法时间开销T(n)与问题规模 n 的关系(T 表示 “time”)</p><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a><font size="3px">算法的时间复杂度</font></h2><h3 id="算法1-逐步递增"><a href="#算法1-逐步递增" class="headerlink" title="算法1-逐步递增"></a><font size="3px">算法1-逐步递增</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逐步递增型爱你</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为问题规模</span></span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">1</span>;<span class="comment">//语句频度-1</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;=n)&#123; <span class="comment">//语句频度-3001</span></span><br><span class="line">    i++;<span class="comment">//语句频度-3000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,i);<span class="comment">//语句频度-3000</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,n);<span class="comment">//语句频度-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T(3000) = 1 + 3001 + 2*3000 + 1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  loveYou(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间开销与问题规模 n 的关系：T(n)=3n+3</p><p><strong>Q1：是否可以忽略表达式某些部分?</strong></p><p><font color="#f00">只考虑阶数，用大O记法表示</font></p><p>当问题规模 n 足够大时，大O表示“同阶”，同等数量级。即:当 n-&gt;∞时， 二者之比为常数</p><p>T<sub>1</sub>(n)=3n+3  =&gt;  T<sub>1</sub>(n) = O(n) </p><p>T<sub>2</sub>(n)=n<sup>2</sup>+3n+1000  =&gt;  T<sub>2</sub>(n) = O(n<sup>2</sup>) </p><p>T<sub>3</sub>(n)=n<sup>3</sup> + n<sup>2</sup> +9999999   =&gt;  T<sub>3</sub>(n) = O(n<sup>3</sup>)</p><ul><li><p>若 n=3000，则  <font color="#f00">可以只考虑阶数高的部分</font></p><p>3n = 9000  V.S.   T<sub>1</sub>(n)= 9003</p><p>n<sup>2</sup> = 9,000,000   V.S.   T<sub>2</sub>(n)= 9,010,000</p><p>n<sup>3</sup> = 27,000,000,000.  V.S.  T<sub>3</sub>(n)= 27,018,999,999</p></li><li><p>当 n=3000 时，9999n = 29,997,000 远小于 n<sup>3</sup> = 27,018,999,999</p></li><li><p>当 n=1000000时，9999n = 9,999,000,000 远小于 n<sup>2</sup> = 1,000,000,000,000</p><p> <font color="#f00">问题规模足够大时， 常数项系数也可以忽略</font></p></li></ul><p><strong>加法规则</strong><br> <em>T</em>(<em>n</em>) = <em>T</em>1(<em>n</em>) + <em>T</em>2(<em>n</em>) = <em>O</em>(<em>f</em>(<em>n</em>)) + <em>O</em>(<em>g</em>(<em>n</em>)) = <em>O</em>(max(<em>f</em>(<em>n</em>), <em>g</em>(<em>n</em>)))</p><p><strong>乘法规则</strong><br> <em>T</em>(<em>n</em>) = <em>T</em>1(<em>n</em>)×<em>T</em>2(<em>n</em>) = <em>O</em>(<em>f</em>(<em>n</em>))×<em>O</em>(<em>g</em>(<em>n</em>)) = <em>O</em>(<em>f</em>(<em>n</em>)×<em>g</em>(<em>n</em>)) </p><p>Eg:T(n)= n<sup>3</sup> + n<sup>2</sup>log<sub>2</sub>n= O(n<sup>3</sup>) + O(n<sup>2</sup>log<sub>2</sub>n) = O(n<sup>3</sup>) </p><p><font color="#f00">常对幂指阶:<br>O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</font></p><p>问题：两个算法的时间复杂度分别如下，哪个的阶数更高(时间复杂度更高)?</p><p>T<sub>1</sub>(n) = O(n) </p><p>T<sub>2</sub>(n) = O(log<sub>2</sub>n)</p><p>T<sub>3</sub>(n)= n<sup>3</sup> + n<sup>2</sup>log<sub>2</sub>n=O(n<sup>3</sup>) + O(n<sup>2</sup>log<sub>2</sub>n)=O(n<sup>2</sup>n) + O(n<sup>2</sup>log<sub>2</sub>n)</p><p><img src="/2020/02/07/数据结构-绪论/lim.png" alt></p><p><strong>Q2：如果有好几千行代码， 按这种方法需要一行一行数?</strong></p><p><font color="#f00">只需考虑最深层循环的循环次数与 n 的关系</font></p><p>结论1：顺序执行的代码只会影响常数项，可以忽略</p><p>结论2：只需挑循环中的一个 基本操作分析它的执行次数 与 n 的关系即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逐步递增型爱你</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为问题规模</span></span><br><span class="line">  <span class="comment">//此处插入1000行顺序执行的代码</span></span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">1</span>;<span class="comment">//语句频度-1</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;=n)&#123; <span class="comment">//语句频度-3001</span></span><br><span class="line">    i++;<span class="comment">//语句频度-3000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,i);<span class="comment">//语句频度-3000</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,n);<span class="comment">//语句频度-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  loveYou(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>T(3000) = 1000 + 1 + 3001 + 2*3000 + 1 </p><p>时间开销与问题规模 n 的关系：T(n) = 3n+1003 = O(n)</p><h3 id="算法2-嵌套循环"><a href="#算法2-嵌套循环" class="headerlink" title="算法2-嵌套循环"></a><font size="3px">算法2-嵌套循环</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为问题规模</span></span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">1</span>;<span class="comment">//语句频度-1</span></span><br><span class="line">  <span class="keyword">while</span>(i&lt;=n)&#123; <span class="comment">//语句频度-3001</span></span><br><span class="line">    i++;<span class="comment">//语句频度-3000</span></span><br><span class="line">    <span class="comment">//语句频度-3000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,i);</span><br><span class="line">    <span class="comment">//内层循环共执行3000*3000次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"I am Iron Man\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,n);<span class="comment">//语句频度-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  loveYou(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间开销与问题规模 n 的关系: T(n) = O(n) + O(n<sup>2</sup>) = O(n<sup>2</sup>)</p><p>结论3：如果有多层嵌套循环， 只需关注最深层循环循环了几次</p><h3 id="算法3-指数递增"><a href="#算法3-指数递增" class="headerlink" title="算法3-指数递增"></a><font size="3px">算法3-指数递增</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//n为问题规模</span></span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">    i=i*<span class="number">2</span>;<span class="comment">//每次翻倍</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算上述算法的时间复杂度 T(n): 设最深层循环的语句频度(总共循环的次数)为 x，则由循环条件可知，循环结束时刚好满足 2<sup>x</sup> &gt; n，x = log<sub>2</sub>n + 1，T(n) = O(x) = O(log<sub>2</sub>n)</p><h3 id="算法4-搜索数字"><a href="#算法4-搜索数字" class="headerlink" title="算法4-搜索数字"></a><font size="3px">算法4-搜索数字</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> flag[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I am Iron man\n"</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag[i]==n)&#123;<span class="comment">//找到元素n</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"I Love You %d\n"</span>,n);</span><br><span class="line">      <span class="keyword">break</span>;<span class="comment">//立即跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算上述算法的时间复杂度 T(n)</p><p><strong>很多算法执行时间与输入的数据有关</strong></p><p>最好情况：元素n在第一个位置 —- 最好时间复杂度 T(n)=O(1) </p><p>最坏情况：元素n在最后一个位置 —- 最坏时间复杂度 T(n)=O(n)</p><p>平均情况：假设元素n在任意一个位置的概率相同为1/n —- 平均时间复杂度 T(n)=O(n) </p><p>循环次数 x = (1+2+3+…+n) /n= (n(1+n)/2)/n =(1+n)/2，T(n)=O(x)=O(n)</p><h3 id="三种复杂度"><a href="#三种复杂度" class="headerlink" title="三种复杂度"></a><font size="3px">三种复杂度</font></h3><p>最坏时间复杂度：最坏情况下算法的时间复杂度</p><p><font color="#f00">平均时间复杂度：</font>所有输入示例等概率出现的情况下，算法的期望运行时间</p><p>最好时间复杂度：最好情况下算法的时间复杂度</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><font size="3px">总结</font></h3><p><img src="/2020/02/07/数据结构-绪论/suanfa.png" alt></p><h2 id="程序运行时的内存需求"><a href="#程序运行时的内存需求" class="headerlink" title="程序运行时的内存需求"></a><font size="3px">程序运行时的内存需求</font></h2><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a><font size="3px">O(1)</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逐步递增型爱你</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I Love You More Than %d\n"</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装入内存</p><p><img src="/2020/02/07/数据结构-绪论/space.png" alt></p><p>无论问题规模怎么变，算法运行所需的内存空间都是固定的常量，算法空间复杂度为S(n) = O(1)<font color="#f00"> S 表示 “Space”</font></p><p>算法原地工作——算法所需内存空间为常量</p><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a><font size="3px">O(n)</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag[n];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设一个 int 变量占 4B，则所需内存空间 = 4 + 4n + 4 = 4n + 8</p><p>只需关注存储空间大小与问题规模相关的变量</p><p>S(n)=O(n)</p><p><img src="/2020/02/07/数据结构-绪论/space.png" alt></p><h3 id="O-n-n"><a href="#O-n-n" class="headerlink" title="O(n*n)"></a><font size="3px">O(n*n)</font></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag[n][n];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>S(n) = O(n<sup>2</sup>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag[n][n];</span><br><span class="line">  itn other[n];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>S(n) = O(n<sup>2</sup>)+O(n)+O(1) = O(n<sup>2</sup>)</p><p><em>T</em>(<em>n</em>) = <em>T</em>1(<em>n</em>) + <em>T</em>2(<em>n</em>) = <em>O</em>(<em>f</em>(<em>n</em>)) + <em>O</em>(<em>g</em>(<em>n</em>)) = <em>O</em>(max(<em>f</em>(<em>n</em>), <em>g</em>(<em>n</em>)))</p><p><font color="#f00">常对幂指阶:<br>O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!) &lt; O(n<sup>n</sup>)</font></p><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a><font size="3px">递归调用</font></h3><p><font color="#f00">空间复杂度 = 递归调用的深度</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a,b,c;</span><br><span class="line">  <span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    loveYou(n<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I Love You %d\n"</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  loveYou(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归调用内存</p><p><img src="/2020/02/07/数据结构-绪论/digui.png" alt><img src="/2020/02/07/数据结构-绪论/di.png" alt></p><p>S(n)=O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveYou</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flag[n];</span><br><span class="line">  <span class="keyword">if</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    loveYou(n<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"I Love You %d\n"</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  loveYou(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归调用</p><p><img src="/2020/02/07/数据结构-绪论/gui.png" alt></p><p>1+2+3+…+n = [n(1+n)]/2 = n<sup>2</sup>/2 + n/2，S(n) = O(n<sup>2</sup>)</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a><font size="3px">总结</font></h3><p><img src="/2020/02/07/数据结构-绪论/kongj.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;数据结构三要素，时间复杂度，空间复杂度&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="https://www.runaccepted.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.runaccepted.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>20200202</title>
    <link href="https://www.runaccepted.com/2020/02/02/20200202/"/>
    <id>https://www.runaccepted.com/2020/02/02/20200202/</id>
    <published>2020-02-02T12:20:02.000Z</published>
    <updated>2020-02-02T12:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">20200202 正月初九 所想所愿，一切安好！ 山河无恙，人间安好！</blockquote><a id="more"></a><p><img src="/2020/02/02/20200202/20202202.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;20200202 正月初九 所想所愿，一切安好！ 山河无恙，人间安好！&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.runaccepted.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.runaccepted.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>感悟</title>
    <link href="https://www.runaccepted.com/2020/01/28/%E6%84%9F%E6%82%9F/"/>
    <id>https://www.runaccepted.com/2020/01/28/感悟/</id>
    <published>2020-01-28T08:57:50.000Z</published>
    <updated>2020-07-04T08:41:07.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">just talk</blockquote><a id="more"></a><p>成年人的世界里只有厮杀。再也不会有考不好怎么办，做不到怎么办。也不会再有过程更重要的谎言。什么样的结果对应什么样的道路上什么样的选择对应什么样的阶层。一眨眼毕业这么多年，对未来路依旧迷惘。我只希望能有时间停下来好好想想…</p><p>有时候确实会不想做事。但是，就像村上春树说的，正因为今天不想跑才去跑。学习也是一样。告诉自己我只认真干5分钟就好，是继续还是放弃留给5分钟后的自己去决定。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;just talk&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.runaccepted.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.runaccepted.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>stack实现表达式中缀转后缀计算结果</title>
    <link href="https://www.runaccepted.com/2020/01/21/stack%E5%AE%9E%E7%8E%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C/"/>
    <id>https://www.runaccepted.com/2020/01/21/stack实现表达式中缀转后缀计算结果/</id>
    <published>2020-01-21T07:56:31.000Z</published>
    <updated>2020-07-21T09:09:17.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">stack，queue的使用实例</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>输入样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30/90-26+(97-5)*6</span><br></pre></td></tr></table></figure><p>输出样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">526.33</span><br></pre></td></tr></table></figure><h1 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a><font size="4px">解析思路</font></h1><ul><li><p>先转为后缀表达式，操作数直接转入队列中，操作符存入栈中</p><p>当栈中优先级高于或等于栈外优先级时，出栈</p><p>当栈中优先级低于栈外优先级时，入栈</p><p>最终所有操作符转入队列中</p></li><li><p>后缀表达式出队，转入栈中，操作数直接入栈，碰到操作符，出栈两个操作数，计算结果后入栈结果，最终栈内最后一个数即为结果</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font size="4px">代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; inop,outop;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> oper;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">node()&#123;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line"><span class="built_in">stack</span>&lt;node&gt; s,ans;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">210</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">infix</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i] != <span class="string">'\0'</span>;)</span><br><span class="line">&#123;</span><br><span class="line">node temp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(str[i]))</span><br><span class="line">&#123;</span><br><span class="line">temp.flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (; <span class="built_in">isdigit</span>(str[i])&amp;&amp; str[i] != <span class="string">'\0'</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">temp.num = temp.num*<span class="number">10</span>+str[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">q.push(temp);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp.flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (str[i]==<span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp.oper=<span class="string">'('</span>;</span><br><span class="line">s.push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str[i]==<span class="string">')'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(s.top().oper!=<span class="string">'('</span>)&#123;</span><br><span class="line">q.push(s.top());</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!s.empty()&amp;&amp;inop[s.top().oper]&gt;=outop[str[i]])&#123;</span><br><span class="line">q.push(s.top());</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">temp.oper = str[i];</span><br><span class="line">s.push(temp);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">q.push(s.top());</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">freopen(<span class="string">"A0721.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">inop[<span class="string">'('</span>] = <span class="number">1</span>; inop[<span class="string">'*'</span>] = <span class="number">5</span>; inop[<span class="string">'/'</span>] = <span class="number">5</span>; inop[<span class="string">'+'</span>] =<span class="number">3</span>; inop[<span class="string">'-'</span>] =<span class="number">3</span>;  inop[<span class="string">')'</span>] = <span class="number">6</span>;</span><br><span class="line">outop[<span class="string">'('</span>]= <span class="number">6</span>; outop[<span class="string">'*'</span>] =<span class="number">4</span>; outop[<span class="string">'/'</span>] =<span class="number">4</span>; outop[<span class="string">'+'</span>] =<span class="number">2</span>; outop[<span class="string">'-'</span>]= <span class="number">2</span>;outop[<span class="string">')'</span>] = <span class="number">1</span>;</span><br><span class="line">    infix();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">    node top = q.front();</span><br><span class="line">    q.pop();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (top.flag==<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//printf(" %d ",top.num);</span></span><br><span class="line">    ans.push(top);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//printf(" %c ",top.oper);</span></span><br><span class="line">    <span class="keyword">int</span> b = ans.top().num;</span><br><span class="line">    ans.pop();</span><br><span class="line">    <span class="keyword">int</span> a = ans.top().num;</span><br><span class="line">    ans.pop();</span><br><span class="line"></span><br><span class="line">    node temp;</span><br><span class="line">    temp.flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (top.oper == <span class="string">'+'</span>)&#123; temp.num = a+b; &#125;</span><br><span class="line">    <span class="keyword">if</span> (top.oper == <span class="string">'-'</span>)&#123; temp.num = a-b; &#125;</span><br><span class="line">    <span class="keyword">if</span> (top.oper == <span class="string">'*'</span>)&#123; temp.num = a*b; &#125;</span><br><span class="line">    <span class="keyword">if</span> (top.oper == <span class="string">'/'</span>)&#123; temp.num = a/b; &#125;</span><br><span class="line">    ans.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans.top().num);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;stack，queue的使用实例&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccepted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccepted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1168 Cartesian Tree (30分)</title>
    <link href="https://www.runaccepted.com/2020/01/20/A1168/"/>
    <id>https://www.runaccepted.com/2020/01/20/A1168/</id>
    <published>2020-01-20T11:27:11.000Z</published>
    <updated>2020-07-20T11:49:14.185Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> 小根堆+中序 = 层序</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>A Cartesian tree is a binary tree constructed from a sequence of distinct numbers. The tree is heap-ordered, and an inorder traversal returns the original sequence. For example, given the sequence { 8, 15, 3, 4, 1, 5, 12, 10, 18, 6 }, the min-heap Cartesian tree is shown by the figure.</p><p><img src="/2020/01/20/A1168/A1168.png" alt></p><p>Your job is to output the level-order traversal sequence of the min-heap Cartesian tree.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts from giving a positive integer N (≤30), and then N distinct numbers in the next line, separated by a space. All the numbers are in the range of int.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in a line the level-order traversal sequence of the min-heap Cartesian tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the beginning or the end of the line.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">8 15 3 4 1 5 12 10 18 6</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 8 4 6 15 10 12 18</span><br></pre></td></tr></table></figure><h1 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a><font size="4px">解析思路</font></h1><p>小根堆，根一定是最小的，从[left,right]中取最小值(记录索引index)，即为根值，遍历[left,index-1],[index+1,right]，即可得到树</p><p>进行层次遍历</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font size="4px">代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">node *lchild,*rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node* <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">node *root = <span class="keyword">new</span> node;</span><br><span class="line">root-&gt;data = x;</span><br><span class="line">root-&gt;lchild = root-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> in[<span class="number">40</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(node* &amp;root,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left&gt;right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> min = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (in[i]&lt;min)</span><br><span class="line">&#123;</span><br><span class="line">min = in[i];</span><br><span class="line">idx = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">root = init(min);</span><br><span class="line">create(root-&gt;lchild,left,idx<span class="number">-1</span>);</span><br><span class="line">create(root-&gt;rchild,idx+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> key = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">level</span><span class="params">(node *root)</span></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;node*&gt; q;</span><br><span class="line">q.push(root);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">node *top = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span> (key&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">key++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,top-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (top-&gt;lchild!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(top-&gt;lchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (top-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(top-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</span><br><span class="line">&#125;</span><br><span class="line">node *root = <span class="literal">NULL</span>;</span><br><span class="line">create(root,<span class="number">1</span>,n);</span><br><span class="line">level(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; 小根堆+中序 = 层序&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccepted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccepted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1167 Summit (25分)</title>
    <link href="https://www.runaccepted.com/2020/01/20/A1167/"/>
    <id>https://www.runaccepted.com/2020/01/20/A1167/</id>
    <published>2020-01-20T10:37:26.000Z</published>
    <updated>2020-07-20T11:36:58.193Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">散列</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>A summit (峰会) is a meeting of heads of state or government. Arranging the rest areas for the summit is not a simple job. The ideal arrangement of one area is to invite those heads so that everyone is a direct friend of everyone.</p><p>Now given a set of tentative arrangements, your job is to tell the organizers whether or not each area is all set.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line gives two positive integers N (≤ 200), the number of heads in the summit, and M, the number of friendship relations. Then M lines follow, each gives a pair of indices of the heads who are friends to each other. The heads are indexed from 1 to N.</p><p>Then there is another positive integer K (≤ 100), and K lines of tentative arrangement of rest areas follow, each first gives a positive number L (≤ N), then followed by a sequence of L distinct indices of the heads. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each of the K areas, print in a line your advice in the following format:</p><p>if in this area everyone is a direct friend of everyone, and no friend is missing (that is, no one else is a direct friend of everyone in this area), print Area X is OK…</p><p>if in this area everyone is a direct friend of everyone, yet there are some other heads who may also be invited without breaking the ideal arrangement, print Area X may invite more people, such as H. where H is the smallest index of the head who may be invited.</p><p>if in this area the arrangement is not an ideal one, then print Area X needs help. so the host can provide some special service to help the heads get to know each other.</p><p>Here X is the index of an area, starting from 1 to K.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">8 10</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br><span class="line">6 4</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">2 3</span><br><span class="line">8 2</span><br><span class="line">2 7</span><br><span class="line">5 3</span><br><span class="line">3 4</span><br><span class="line">6</span><br><span class="line">4 5 4 3 6</span><br><span class="line">3 2 8 7</span><br><span class="line">2 2 3</span><br><span class="line">1 1</span><br><span class="line">2 4 6</span><br><span class="line">3 3 2 1</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Area 1 is OK.</span><br><span class="line">Area 2 is OK.</span><br><span class="line">Area 3 is OK.</span><br><span class="line">Area 4 is OK.</span><br><span class="line">Area 5 may invite more people, such as 3.</span><br><span class="line">Area 6 needs help.</span><br></pre></td></tr></table></figure><h1 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a><font size="4px">解析思路</font></h1><p>8个峰会代表人，10个好友组</p><p>安排的圆桌会议中</p><ul><li>如果所有人都是直接好友，并且加一个代表人a，a跟圆桌内的所有人并不是直接好友，则当前圆桌是完美的</li><li>可以加一个a，跟圆桌内的所有人都是直接好友，该圆桌可以增加人数</li><li>圆桌内并不是好友，需要调整</li></ul><p>用 fre[a*maxn+b]=1 代表a和b是好友</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font size="4px">代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; fre;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">110</span>]=&#123;&#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">110</span>]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">fre[a*maxn+b]=<span class="number">1</span>;</span><br><span class="line">fre[b*maxn+a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">fill(visit,visit+maxn,<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[j]);</span><br><span class="line">visit[arr[j]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j+<span class="number">1</span>; k &lt; l; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (fre[arr[j]*maxn+arr[k]]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Area %d needs help.\n"</span>,i);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> morepe = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (visit[j]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; l; ++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fre[j*maxn+arr[k]]==<span class="number">0</span>)&#123;</span><br><span class="line">morepe = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (morepe==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j&lt;index)</span><br><span class="line">&#123;</span><br><span class="line">index = j;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Area %d is OK.\n"</span>,i);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Area %d may invite more people, such as %d.\n"</span>,i,index);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;散列&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccepted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccepted.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>A1166 Block Reversing (25分)</title>
    <link href="https://www.runaccepted.com/2020/01/20/A1166/"/>
    <id>https://www.runaccepted.com/2020/01/20/A1166/</id>
    <published>2020-01-20T10:16:15.000Z</published>
    <updated>2020-07-20T11:37:03.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">链表</blockquote><a id="more"></a><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a><font size="4px">原文</font></h1><p>Given a singly linked list L. Let us consider every K nodes as a block (if there are less than K nodes at the end of the list, the rest of the nodes are still considered as a block). Your job is to reverse all the blocks in L. For example, given L as 1→2→3→4→5→6→7→8 and K as 3, your output must be 7→8→4→5→6→1→2→3.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (≤$10^5$) which is the total number of nodes, and a positive K (≤N) which is the size of a block. The address of a node is a 5-digit nonnegative integer, and NULL is represented by −1.</p><p>Then N lines follow, each describes a node in the format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Address Data Next</span><br></pre></td></tr></table></figure><p>where Address is the position of the node, Data is an integer, and Next is the position of the next node.</p><p><strong>Output Specification:</strong></p><p>For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.</p><p><strong>Sample Input:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00100 8 3</span><br><span class="line">71120 7 88666</span><br><span class="line">00000 4 99999</span><br><span class="line">00100 1 12309</span><br><span class="line">68237 6 71120</span><br><span class="line">33218 3 00000</span><br><span class="line">99999 5 68237</span><br><span class="line">88666 8 -1</span><br><span class="line">12309 2 33218</span><br></pre></td></tr></table></figure><p><strong>Sample Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">71120 7 88666</span><br><span class="line">88666 8 00000</span><br><span class="line">00000 4 99999</span><br><span class="line">99999 5 68237</span><br><span class="line">68237 6 00100</span><br><span class="line">00100 1 12309</span><br><span class="line">12309 2 33218</span><br><span class="line">33218 3 -1</span><br></pre></td></tr></table></figure><h1 id="解析思路"><a href="#解析思路" class="headerlink" title="解析思路"></a><font size="4px">解析思路</font></h1><p>按块反向输出链表</p><p>用<code>vector&lt;int&gt; v[100010];</code>记录每一块，反向输出</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font size="4px">代码</font></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; data,nextAdd;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> first,n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;first,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;data[a],&amp;nextAdd[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = first; i != <span class="number">-1</span>; i=nextAdd[i])</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span> (cnt%k!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">v[idx].push_back(i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">v[idx].push_back(i);</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].size(); ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d %d "</span>,v[i][j],data[v[i][j]]);</span><br><span class="line"><span class="keyword">if</span>(j&lt;v[i].size()<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d\n"</span>,v[i][j+<span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, v[i<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;链表&lt;/blockquote&gt;
    
    </summary>
    
      <category term="PAT" scheme="https://www.runaccepted.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://www.runaccepted.com/tags/PAT/"/>
    
  </entry>
  
</feed>
